Bridge.assembly("MazeGenerators",function($asm,globals){"use strict";var $m=Bridge.setMetadata,$n=["MazeGenerators","System","MazeGenerators.Utils","System.Collections.Generic","MazeGenerators.Utils.RegionConnector","MazeGenerators.Utils.DeadendRemover"];$m("MazeGenerators.RoomMazeGenerator",function(){return{nested:[$n[0].RoomMazeGenerator.Result,$n[0].RoomMazeGenerator.Settings],att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:1,n:"ConnectRegions",t:8,pi:[{n:"result",pt:$n[0].RoomMazeGenerator.Result,ps:0},{n:"settings",pt:$n[0].RoomMazeGenerator.Settings,ps:1},{n:"connectorId",pt:$n[1].Int32,ps:2}],sn:"ConnectRegions",rt:$n[1].Void,p:[$n[0].RoomMazeGenerator.Result,$n[0].RoomMazeGenerator.Settings,$n[1].Int32]},{a:2,n:"Generate",t:8,pi:[{n:"settings",pt:$n[0].RoomMazeGenerator.Settings,ps:0}],sn:"Generate",rt:$n[0].RoomMazeGenerator.Result,p:[$n[0].RoomMazeGenerator.Settings]},{a:1,n:"TryAddRooms",t:8,pi:[{n:"result",pt:$n[0].RoomMazeGenerator.Result,ps:0},{n:"settings",pt:$n[0].RoomMazeGenerator.Settings,ps:1},{n:"regionId",pt:$n[1].Int32,ps:2}],sn:"TryAddRooms",rt:$n[1].Boolean,p:[$n[0].RoomMazeGenerator.Result,$n[0].RoomMazeGenerator.Settings,$n[1].Int32],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}}]}},$n);$m("MazeGenerators.RoomMazeGenerator.Result",function(){return{td:$n[0].RoomMazeGenerator,att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"GetTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0}],sn:"GetTile",rt:$n[1].Nullable$1(System.Int32),p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Int32,System.Nullable.toString,System.Nullable.getHashCode)}},{a:2,n:"IsInRegion",t:8,pi:[{n:"loc",pt:$n[2].Vector2,ps:0}],sn:"IsInRegion",rt:$n[1].Boolean,p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{a:2,n:"RemoveTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0}],sn:"RemoveTile",rt:$n[1].Void,p:[$n[2].Vector2]},{a:2,n:"SetTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0},{n:"regionId",pt:$n[1].Int32,ps:1}],sn:"SetTile",rt:$n[1].Void,p:[$n[2].Vector2,$n[1].Int32]},{a:2,n:"Junctions",t:16,rt:$n[3].List$1(MazeGenerators.Utils.Vector2),g:{a:2,n:"get_Junctions",t:8,rt:$n[3].List$1(MazeGenerators.Utils.Vector2),fg:"Junctions"},s:{a:2,n:"set_Junctions",t:8,p:[$n[3].List$1(MazeGenerators.Utils.Vector2)],rt:$n[1].Void,fs:"Junctions"},fn:"Junctions"},{a:2,n:"Regions",t:4,rt:$n[1].Array.type(System.Nullable$1(System.Int32),2),sn:"Regions"},{a:2,n:"Rooms",t:4,rt:$n[3].List$1(MazeGenerators.Utils.Rectangle),sn:"Rooms"}]}},$n);$m("MazeGenerators.RoomMazeGenerator.Settings",function(){return{td:$n[0].RoomMazeGenerator,att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"AdditionalPassages",t:16,rt:$n[1].Int32,g:{a:2,n:"get_AdditionalPassages",t:8,rt:$n[1].Int32,fg:"AdditionalPassages",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_AdditionalPassages",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"AdditionalPassages"},fn:"AdditionalPassages"},{a:2,n:"Directions",t:16,rt:System.Array.type(MazeGenerators.Utils.Vector2),g:{a:2,n:"get_Directions",t:8,rt:System.Array.type(MazeGenerators.Utils.Vector2),fg:"Directions"},s:{a:2,n:"set_Directions",t:8,p:[System.Array.type(MazeGenerators.Utils.Vector2)],rt:$n[1].Void,fs:"Directions"},fn:"Directions"},{a:2,n:"Height",t:16,rt:$n[1].Int32,g:{a:2,n:"get_Height",t:8,rt:$n[1].Int32,fg:"Height",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_Height",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"Height"},fn:"Height"},{a:2,n:"Random",t:16,rt:$n[1].Random,g:{a:2,n:"get_Random",t:8,rt:$n[1].Random,fg:"Random"},s:{a:2,n:"set_Random",t:8,p:[$n[1].Random],rt:$n[1].Void,fs:"Random"},fn:"Random"},{a:2,n:"RemoveDeadEnds",t:16,rt:$n[1].Boolean,g:{a:2,n:"get_RemoveDeadEnds",t:8,rt:$n[1].Boolean,fg:"RemoveDeadEnds",box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},s:{a:2,n:"set_RemoveDeadEnds",t:8,p:[$n[1].Boolean],rt:$n[1].Void,fs:"RemoveDeadEnds"},fn:"RemoveDeadEnds"},{a:2,n:"Width",t:16,rt:$n[1].Int32,g:{a:2,n:"get_Width",t:8,rt:$n[1].Int32,fg:"Width",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_Width",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"Width"},fn:"Width"},{a:2,n:"WindingPercent",t:16,rt:$n[1].Int32,g:{a:2,n:"get_WindingPercent",t:8,rt:$n[1].Int32,fg:"WindingPercent",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_WindingPercent",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"WindingPercent"},fn:"WindingPercent"},{a:2,n:"NumRoomTries",t:4,rt:$n[1].Int32,sn:"NumRoomTries",box:function($v){return Bridge.box($v,System.Int32)}},{a:2,n:"PreventOverlappedRooms",t:4,rt:$n[1].Boolean,sn:"PreventOverlappedRooms",box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{a:2,n:"RoomSize",t:4,rt:$n[1].Int32,sn:"RoomSize",box:function($v){return Bridge.box($v,System.Int32)}},{a:1,n:"__Property__Initializer__AdditionalPassages",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__AdditionalPassages",box:function($v){return Bridge.box($v,System.Int32)}},{a:1,n:"__Property__Initializer__Directions",t:4,rt:System.Array.type(MazeGenerators.Utils.Vector2),sn:"__Property__Initializer__Directions"},{a:1,n:"__Property__Initializer__Height",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__Height",box:function($v){return Bridge.box($v,System.Int32)}},{a:1,n:"__Property__Initializer__Random",t:4,rt:$n[1].Random,sn:"__Property__Initializer__Random"},{a:1,n:"__Property__Initializer__RemoveDeadEnds",t:4,rt:$n[1].Boolean,sn:"__Property__Initializer__RemoveDeadEnds",box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{a:1,n:"__Property__Initializer__Width",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__Width",box:function($v){return Bridge.box($v,System.Int32)}},{a:1,n:"__Property__Initializer__WindingPercent",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__WindingPercent",box:function($v){return Bridge.box($v,System.Int32)}}]}},$n);$m("MazeGenerators.TreeMazeGenerator",function(){return{nested:[$n[0].TreeMazeGenerator.Result,$n[0].TreeMazeGenerator.Settings],att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"Generate",t:8,pi:[{n:"settings",pt:$n[0].TreeMazeGenerator.Settings,ps:0}],sn:"Generate",rt:$n[0].TreeMazeGenerator.Result,p:[$n[0].TreeMazeGenerator.Settings]}]}},$n);$m("MazeGenerators.TreeMazeGenerator.Result",function(){return{td:$n[0].TreeMazeGenerator,att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"GetTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0}],sn:"GetTile",rt:$n[1].Nullable$1(System.Int32),p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Int32,System.Nullable.toString,System.Nullable.getHashCode)}},{a:2,n:"IsInRegion",t:8,pi:[{n:"loc",pt:$n[2].Vector2,ps:0}],sn:"IsInRegion",rt:$n[1].Boolean,p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{a:2,n:"RemoveTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0}],sn:"RemoveTile",rt:$n[1].Void,p:[$n[2].Vector2]},{a:2,n:"SetTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0},{n:"regionId",pt:$n[1].Int32,ps:1}],sn:"SetTile",rt:$n[1].Void,p:[$n[2].Vector2,$n[1].Int32]},{a:2,n:"Junctions",t:16,rt:$n[3].List$1(MazeGenerators.Utils.Vector2),g:{a:2,n:"get_Junctions",t:8,rt:$n[3].List$1(MazeGenerators.Utils.Vector2),fg:"Junctions"},s:{a:2,n:"set_Junctions",t:8,p:[$n[3].List$1(MazeGenerators.Utils.Vector2)],rt:$n[1].Void,fs:"Junctions"},fn:"Junctions"},{a:2,n:"Regions",t:4,rt:$n[1].Array.type(System.Nullable$1(System.Int32),2),sn:"Regions"}]}},$n);$m("MazeGenerators.TreeMazeGenerator.Settings",function(){return{td:$n[0].TreeMazeGenerator,att:1048578,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"AdditionalPassages",t:16,rt:$n[1].Int32,g:{a:2,n:"get_AdditionalPassages",t:8,rt:$n[1].Int32,fg:"AdditionalPassages",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_AdditionalPassages",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"AdditionalPassages"},fn:"AdditionalPassages"},{a:2,n:"Directions",t:16,rt:System.Array.type(MazeGenerators.Utils.Vector2),g:{a:2,n:"get_Directions",t:8,rt:System.Array.type(MazeGenerators.Utils.Vector2),fg:"Directions"},s:{a:2,n:"set_Directions",t:8,p:[System.Array.type(MazeGenerators.Utils.Vector2)],rt:$n[1].Void,fs:"Directions"},fn:"Directions"},{a:2,n:"Height",t:16,rt:$n[1].Int32,g:{a:2,n:"get_Height",t:8,rt:$n[1].Int32,fg:"Height",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_Height",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"Height"},fn:"Height"},{a:2,n:"Random",t:16,rt:$n[1].Random,g:{a:2,n:"get_Random",t:8,rt:$n[1].Random,fg:"Random"},s:{a:2,n:"set_Random",t:8,p:[$n[1].Random],rt:$n[1].Void,fs:"Random"},fn:"Random"},{a:2,n:"RemoveDeadEnds",t:16,rt:$n[1].Boolean,g:{a:2,n:"get_RemoveDeadEnds",t:8,rt:$n[1].Boolean,fg:"RemoveDeadEnds",box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},s:{a:2,n:"set_RemoveDeadEnds",t:8,p:[$n[1].Boolean],rt:$n[1].Void,fs:"RemoveDeadEnds"},fn:"RemoveDeadEnds"},{a:2,n:"Width",t:16,rt:$n[1].Int32,g:{a:2,n:"get_Width",t:8,rt:$n[1].Int32,fg:"Width",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_Width",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"Width"},fn:"Width"},{a:2,n:"WindingPercent",t:16,rt:$n[1].Int32,g:{a:2,n:"get_WindingPercent",t:8,rt:$n[1].Int32,fg:"WindingPercent",box:function($v){return Bridge.box($v,System.Int32)}},s:{a:2,n:"set_WindingPercent",t:8,p:[$n[1].Int32],rt:$n[1].Void,fs:"WindingPercent"},fn:"WindingPercent"},{a:1,n:"__Property__Initializer__AdditionalPassages",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__AdditionalPassages",box:function($v){return Bridge.box($v,System.Int32)}},{a:1,n:"__Property__Initializer__Directions",t:4,rt:System.Array.type(MazeGenerators.Utils.Vector2),sn:"__Property__Initializer__Directions"},{a:1,n:"__Property__Initializer__Height",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__Height",box:function($v){return Bridge.box($v,System.Int32)}},{a:1,n:"__Property__Initializer__Random",t:4,rt:$n[1].Random,sn:"__Property__Initializer__Random"},{a:1,n:"__Property__Initializer__RemoveDeadEnds",t:4,rt:$n[1].Boolean,sn:"__Property__Initializer__RemoveDeadEnds",box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{a:1,n:"__Property__Initializer__Width",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__Width",box:function($v){return Bridge.box($v,System.Int32)}},{a:1,n:"__Property__Initializer__WindingPercent",t:4,rt:$n[1].Int32,sn:"__Property__Initializer__WindingPercent",box:function($v){return Bridge.box($v,System.Int32)}}]}},$n);$m("MazeGenerators.Utils.Directions",function(){return{att:1048577,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:"CardinalDirs",is:!0,t:4,rt:System.Array.type(MazeGenerators.Utils.Vector2),sn:"CardinalDirs",ro:!0},{a:2,n:"CompassDirs",is:!0,t:4,rt:System.Array.type(MazeGenerators.Utils.Vector2),sn:"CompassDirs",ro:!0}]}},$n);$m("MazeGenerators.Utils.Rectangle",function(){return{att:1048841,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Int32,$n[1].Int32,$n[1].Int32,$n[1].Int32],pi:[{n:"x",pt:$n[1].Int32,ps:0},{n:"y",pt:$n[1].Int32,ps:1},{n:"width",pt:$n[1].Int32,ps:2},{n:"height",pt:$n[1].Int32,ps:3}],sn:"$ctor1"},{a:2,n:"Intersects",t:8,pi:[{n:"value",pt:$n[2].Rectangle,ps:0}],sn:"Intersects",rt:$n[1].Boolean,p:[$n[2].Rectangle],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{a:2,n:"Height",t:4,rt:$n[1].Int32,sn:"Height",box:function($v){return Bridge.box($v,System.Int32)}},{a:2,n:"Width",t:4,rt:$n[1].Int32,sn:"Width",box:function($v){return Bridge.box($v,System.Int32)}},{a:2,n:"X",t:4,rt:$n[1].Int32,sn:"X",box:function($v){return Bridge.box($v,System.Int32)}},{a:2,n:"Y",t:4,rt:$n[1].Int32,sn:"Y",box:function($v){return Bridge.box($v,System.Int32)}}]}},$n);$m("MazeGenerators.Utils.Vector2",function(){return{att:1048841,a:2,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:2,n:".ctor",t:1,p:[$n[1].Int32,$n[1].Int32],pi:[{n:"x",pt:$n[1].Int32,ps:0},{n:"y",pt:$n[1].Int32,ps:1}],sn:"$ctor1"},{a:2,n:"LengthSquared",t:8,sn:"LengthSquared",rt:$n[1].Int32,box:function($v){return Bridge.box($v,System.Int32)}},{a:2,n:"op_Addition",is:!0,t:8,pi:[{n:"a",pt:$n[2].Vector2,ps:0},{n:"b",pt:$n[2].Vector2,ps:1}],sn:"op_Addition",rt:$n[2].Vector2,p:[$n[2].Vector2,$n[2].Vector2]},{a:2,n:"op_Multiply",is:!0,t:8,pi:[{n:"a",pt:$n[2].Vector2,ps:0},{n:"b",pt:$n[1].Int32,ps:1}],sn:"op_Multiply",rt:$n[2].Vector2,p:[$n[2].Vector2,$n[1].Int32]},{a:2,n:"op_Subtraction",is:!0,t:8,pi:[{n:"a",pt:$n[2].Vector2,ps:0},{n:"b",pt:$n[2].Vector2,ps:1}],sn:"op_Subtraction",rt:$n[2].Vector2,p:[$n[2].Vector2,$n[2].Vector2]},{a:2,n:"X",t:4,rt:$n[1].Int32,sn:"X",box:function($v){return Bridge.box($v,System.Int32)}},{a:2,n:"Y",t:4,rt:$n[1].Int32,sn:"Y",box:function($v){return Bridge.box($v,System.Int32)}}]}},$n);$m("MazeGenerators.Utils.RegionConnector.IRegionConnectorResult",function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"GetTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0}],sn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorResult$GetTile",rt:$n[1].Nullable$1(System.Int32),p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Int32,System.Nullable.toString,System.Nullable.getHashCode)}},{ab:!0,a:2,n:"IsInRegion",t:8,pi:[{n:"vector2",pt:$n[2].Vector2,ps:0}],sn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorResult$IsInRegion",rt:$n[1].Boolean,p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{ab:!0,a:2,n:"SetTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0},{n:"connectorId",pt:$n[1].Int32,ps:1}],sn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorResult$SetTile",rt:$n[1].Void,p:[$n[2].Vector2,$n[1].Int32]},{ab:!0,a:2,n:"Junctions",t:16,rt:$n[3].List$1(MazeGenerators.Utils.Vector2),g:{ab:!0,a:2,n:"get_Junctions",t:8,rt:$n[3].List$1(MazeGenerators.Utils.Vector2),fg:"MazeGenerators$Utils$RegionConnector$IRegionConnectorResult$Junctions"},fn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorResult$Junctions"}]}},$n);$m("MazeGenerators.Utils.RegionConnector.IRegionConnectorSettings",function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"AdditionalPassages",t:16,rt:$n[1].Int32,g:{ab:!0,a:2,n:"get_AdditionalPassages",t:8,rt:$n[1].Int32,fg:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$AdditionalPassages",box:function($v){return Bridge.box($v,System.Int32)}},fn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$AdditionalPassages"},{ab:!0,a:2,n:"Directions",t:16,rt:System.Array.type(MazeGenerators.Utils.Vector2),g:{ab:!0,a:2,n:"get_Directions",t:8,rt:System.Array.type(MazeGenerators.Utils.Vector2),fg:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Directions"},fn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Directions"},{ab:!0,a:2,n:"Height",t:16,rt:$n[1].Int32,g:{ab:!0,a:2,n:"get_Height",t:8,rt:$n[1].Int32,fg:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Height",box:function($v){return Bridge.box($v,System.Int32)}},fn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Height"},{ab:!0,a:2,n:"Random",t:16,rt:$n[1].Random,g:{ab:!0,a:2,n:"get_Random",t:8,rt:$n[1].Random,fg:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Random"},fn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Random"},{ab:!0,a:2,n:"RemoveDeadEnds",t:16,rt:$n[1].Boolean,g:{ab:!0,a:2,n:"get_RemoveDeadEnds",t:8,rt:$n[1].Boolean,fg:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$RemoveDeadEnds",box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},fn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$RemoveDeadEnds"},{ab:!0,a:2,n:"Width",t:16,rt:$n[1].Int32,g:{ab:!0,a:2,n:"get_Width",t:8,rt:$n[1].Int32,fg:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Width",box:function($v){return Bridge.box($v,System.Int32)}},fn:"MazeGenerators$Utils$RegionConnector$IRegionConnectorSettings$Width"}]}},$n);$m("MazeGenerators.Utils.RegionConnector.RegionConnectorAlgorythm",function(){return{att:1048576,a:4,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:4,n:"ConnectRegions",is:!0,t:8,pi:[{n:"result",pt:$n[4].IRegionConnectorResult,ps:0},{n:"settings",pt:$n[4].IRegionConnectorSettings,ps:1},{n:"connectorId",pt:$n[1].Int32,ps:2}],sn:"ConnectRegions",rt:$n[1].Void,p:[$n[4].IRegionConnectorResult,$n[4].IRegionConnectorSettings,$n[1].Int32]}]}},$n);$m("MazeGenerators.Utils.RegionConnector.ITreeMazeBuilderResult",function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"GetTile",t:8,pi:[{n:"end",pt:$n[2].Vector2,ps:0}],sn:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderResult$GetTile",rt:$n[1].Nullable$1(System.Int32),p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Int32,System.Nullable.toString,System.Nullable.getHashCode)}},{ab:!0,a:2,n:"IsInRegion",t:8,pi:[{n:"block",pt:$n[2].Vector2,ps:0}],sn:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderResult$IsInRegion",rt:$n[1].Boolean,p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{ab:!0,a:2,n:"SetTile",t:8,pi:[{n:"start",pt:$n[2].Vector2,ps:0},{n:"regionId",pt:$n[1].Int32,ps:1}],sn:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderResult$SetTile",rt:$n[1].Void,p:[$n[2].Vector2,$n[1].Int32]}]}},$n);$m("MazeGenerators.Utils.RegionConnector.ITreeMazeBuilderSettings",function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Directions",t:16,rt:System.Array.type(MazeGenerators.Utils.Vector2),g:{ab:!0,a:2,n:"get_Directions",t:8,rt:System.Array.type(MazeGenerators.Utils.Vector2),fg:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderSettings$Directions"},fn:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderSettings$Directions"},{ab:!0,a:2,n:"Random",t:16,rt:$n[1].Random,g:{ab:!0,a:2,n:"get_Random",t:8,rt:$n[1].Random,fg:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderSettings$Random"},fn:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderSettings$Random"},{ab:!0,a:2,n:"WindingPercent",t:16,rt:$n[1].Int32,g:{ab:!0,a:2,n:"get_WindingPercent",t:8,rt:$n[1].Int32,fg:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderSettings$WindingPercent",box:function($v){return Bridge.box($v,System.Int32)}},fn:"MazeGenerators$Utils$RegionConnector$ITreeMazeBuilderSettings$WindingPercent"}]}},$n);$m("MazeGenerators.Utils.RegionConnector.TreeMazeBuilderAlgorythm",function(){return{att:1048576,a:4,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:1,n:"CanCarve",is:!0,t:8,pi:[{n:"result",pt:$n[4].ITreeMazeBuilderResult,ps:0},{n:"pos",pt:$n[2].Vector2,ps:1},{n:"direction",pt:$n[2].Vector2,ps:2}],sn:"CanCarve",rt:$n[1].Boolean,p:[$n[4].ITreeMazeBuilderResult,$n[2].Vector2,$n[2].Vector2],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{a:4,n:"GrowMaze",is:!0,t:8,pi:[{n:"result",pt:$n[4].ITreeMazeBuilderResult,ps:0},{n:"settings",pt:$n[4].ITreeMazeBuilderSettings,ps:1},{n:"start",pt:$n[2].Vector2,ps:2},{n:"regionId",pt:$n[1].Int32,ps:3}],sn:"GrowMaze",rt:$n[1].Void,p:[$n[4].ITreeMazeBuilderResult,$n[4].ITreeMazeBuilderSettings,$n[2].Vector2,$n[1].Int32]}]}},$n);$m("MazeGenerators.Utils.DeadendRemover.DeadEndRemoverAlgorythm",function(){return{att:1048576,a:4,m:[{a:2,isSynthetic:!0,n:".ctor",t:1,sn:"ctor"},{a:4,n:"RemoveDeadEnds",is:!0,t:8,pi:[{n:"result",pt:$n[5].IDeadEndRemoverResult,ps:0},{n:"settings",pt:$n[5].IDeadEndRemoverSettings,ps:1}],sn:"RemoveDeadEnds",rt:$n[1].Void,p:[$n[5].IDeadEndRemoverResult,$n[5].IDeadEndRemoverSettings]}]}},$n);$m("MazeGenerators.Utils.DeadendRemover.IDeadEndRemoverResult",function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"GetTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0}],sn:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverResult$GetTile",rt:$n[1].Nullable$1(System.Int32),p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Int32,System.Nullable.toString,System.Nullable.getHashCode)}},{ab:!0,a:2,n:"IsInRegion",t:8,pi:[{n:"vector2",pt:$n[2].Vector2,ps:0}],sn:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverResult$IsInRegion",rt:$n[1].Boolean,p:[$n[2].Vector2],box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},{ab:!0,a:2,n:"RemoveTile",t:8,pi:[{n:"pos",pt:$n[2].Vector2,ps:0}],sn:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverResult$RemoveTile",rt:$n[1].Void,p:[$n[2].Vector2]}]}},$n);$m("MazeGenerators.Utils.DeadendRemover.IDeadEndRemoverSettings",function(){return{att:161,a:2,m:[{ab:!0,a:2,n:"Directions",t:16,rt:System.Array.type(MazeGenerators.Utils.Vector2),g:{ab:!0,a:2,n:"get_Directions",t:8,rt:System.Array.type(MazeGenerators.Utils.Vector2),fg:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$Directions"},fn:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$Directions"},{ab:!0,a:2,n:"Height",t:16,rt:$n[1].Int32,g:{ab:!0,a:2,n:"get_Height",t:8,rt:$n[1].Int32,fg:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$Height",box:function($v){return Bridge.box($v,System.Int32)}},fn:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$Height"},{ab:!0,a:2,n:"RemoveDeadEnds",t:16,rt:$n[1].Boolean,g:{ab:!0,a:2,n:"get_RemoveDeadEnds",t:8,rt:$n[1].Boolean,fg:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$RemoveDeadEnds",box:function($v){return Bridge.box($v,System.Boolean,System.Boolean.toString)}},fn:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$RemoveDeadEnds"},{ab:!0,a:2,n:"Width",t:16,rt:$n[1].Int32,g:{ab:!0,a:2,n:"get_Width",t:8,rt:$n[1].Int32,fg:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$Width",box:function($v){return Bridge.box($v,System.Int32)}},fn:"MazeGenerators$Utils$DeadendRemover$IDeadEndRemoverSettings$Width"}]}},$n)});