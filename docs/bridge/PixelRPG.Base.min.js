Bridge.assembly("PixelRPG.Base",function($asm,globals){"use strict";Bridge.define("PixelRPG.Base.Assets.UnitAnimation",{props:{Idle:null,Run:null,Attack:null,Die:null}});Bridge.define("PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent",{inherits:[LocomotorECS.Component],props:{AIBot:null}});Bridge.define("PixelRPG.Base.AdditionalStuff.BrainAI.EntitySystems.AIUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent]))}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var ai=entity.GetComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent);ai.AIBot.BrainAI$AI$IAITurn$Tick()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage",{$kind:"interface"});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessageParser",{$kind:"interface"});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"interface"});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent",{inherits:[LocomotorECS.Component],fields:{Message:null,Response:null}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalClientComponent",{inherits:[LocomotorECS.Component],fields:{ServerEntity:null,Identifier:null},ctors:{init:function(){this.Identifier=new System.Guid;this.Identifier=System.Guid.Empty}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalServerComponent",{inherits:[LocomotorECS.Component],fields:{Request:null,Response:null,PendingConnections:null,ClientToConnectionKey:null,ConnectionKeyToClient:null,Clients:null},ctors:{init:function(){this.Request=new(System.Collections.Generic.Dictionary$2(System.Guid,System.Collections.Generic.Queue$1(System.String)));this.Response=new(System.Collections.Generic.Dictionary$2(System.Guid,System.Collections.Generic.Queue$1(System.String)));this.PendingConnections=new(System.Collections.Generic.List$1(System.Guid).ctor);this.ClientToConnectionKey=new(System.Collections.Generic.Dictionary$2(System.Guid,System.Int32));this.ConnectionKeyToClient=new(System.Collections.Generic.Dictionary$2(System.Int32,System.Guid));this.Clients=new(System.Collections.Generic.List$1(System.Guid).ctor)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkClientComponent",{inherits:[LocomotorECS.Component],fields:{Client:null,RecievingTask:null,RecievingBuffer:null},props:{ServerAddress:null},ctors:{init:function(){this.RecievingBuffer=new System.ArraySegment;this.RecievingBuffer=new System.ArraySegment(System.Array.init(2048,0,System.Byte))},ctor:function(serverAddress){this.$initialize();LocomotorECS.Component.ctor.call(this);this.ServerAddress=serverAddress}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkServerComponent",{inherits:[LocomotorECS.Component],props:{Ip:null,Port:0},ctors:{ctor:function(ip,port){this.$initialize();LocomotorECS.Component.ctor.call(this);this.Ip=ip;this.Port=port}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.Components.ServerComponent",{inherits:[LocomotorECS.Component],fields:{ConnectedPlayers:0,Request:null,Response:null},ctors:{init:function(){this.Request=new(System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.Queue$1(PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage)));this.Response=new(System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.Queue$1(PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage)))}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.LocalClientCommunicatorSystem",{inherits:[LocomotorECS.EntityProcessingSystem],fields:{scene:null,parsers:null},ctors:{ctor:function(scene,parsers){parsers===void 0&&(parsers=null);this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalClientComponent,PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent]));this.scene=scene;this.parsers=parsers}},methods:{DoAction$1:function(entity,gameTime){var response;LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var localClient=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalClientComponent),client=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent),serverEntity=this.scene.FindEntity(localClient.ServerEntity),localServer=serverEntity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalServerComponent);if(System.Guid.op_Equality(localClient.Identifier,System.Guid.Empty)){localClient.Identifier=System.Guid.NewGuid();localServer.PendingConnections.add(localClient.Identifier);return}if(client.Message!=null){var transferMessage=client.Message,parser=PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.FindWriter(transferMessage,this.parsers),data=parser.PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Write(transferMessage);localServer.Request.get(localClient.Identifier).Enqueue(data);client.Message=null}if(response=localServer.Response.get(localClient.Identifier),client.Response=null,response.Count>0){var data1=response.Dequeue(),parser1=PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.FindReader(data1,this.parsers),transferMessage1=parser1.PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Read(data1);client.Response=transferMessage1}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.LocalServerCommunicatorSystem",{inherits:[LocomotorECS.EntityProcessingSystem],fields:{parsers:null},ctors:{ctor:function(parsers){parsers===void 0&&(parsers=null);this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalServerComponent,PixelRPG.Base.AdditionalStuff.ClientServer.Components.ServerComponent]));this.parsers=parsers}},methods:{DoAction$1:function(entity,gameTime){var localServer,server,i,tcpClient,i1,client,connectionKey,request,response;if(LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime),localServer=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalServerComponent),server=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ServerComponent),localServer.PendingConnections.Count>0){for(i=0;i<localServer.PendingConnections.Count;i=i+1|0)server.ConnectedPlayers=server.ConnectedPlayers+1|0,tcpClient=localServer.PendingConnections.getItem(i),localServer.Clients.add(tcpClient),localServer.ConnectionKeyToClient.set(server.ConnectedPlayers,tcpClient),localServer.ClientToConnectionKey.set(tcpClient,server.ConnectedPlayers),server.Request.set(localServer.ClientToConnectionKey.get(tcpClient),new(System.Collections.Generic.Queue$1(PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage).ctor)),server.Response.set(localServer.ClientToConnectionKey.get(tcpClient),new(System.Collections.Generic.Queue$1(PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage).ctor)),localServer.Request.set(tcpClient,new(System.Collections.Generic.Queue$1(System.String).ctor)),localServer.Response.set(tcpClient,new(System.Collections.Generic.Queue$1(System.String).ctor));localServer.PendingConnections.clear()}for(i1=0;i1<localServer.Clients.Count;i1=i1+1|0){if(client=localServer.Clients.getItem(i1),connectionKey=localServer.ClientToConnectionKey.get(client),localServer.Request.containsKey(client)&&localServer.Request.get(client).Count>0)for(request=localServer.Request.get(client);request.Count>0;){var data=request.Dequeue(),parser=PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.FindReader(data,this.parsers),transferMessage=parser.PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Read(data);server.Request.get(connectionKey).Enqueue(transferMessage)}if(server.Response.containsKey(connectionKey)&&server.Response.get(connectionKey).Count>0)for(response=server.Response.get(connectionKey);response.Count>0;){var transferMessage1=response.Dequeue(),parser1=PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.FindWriter(transferMessage1,this.parsers),data1=parser1.PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Write(transferMessage1);localServer.Response.get(client).Enqueue(data1)}}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.NetworkClientCommunicatorSystem",{inherits:[LocomotorECS.EntityProcessingSystem],fields:{ms:null,reader:null,parsers:null},ctors:{ctor:function(parsers){parsers===void 0&&(parsers=null);this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkClientComponent,PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent]));this.ms=new System.IO.MemoryStream.ctor;this.reader=new System.IO.StreamReader.$ctor3(this.ms,System.Text.Encoding.UTF8);this.parsers=parsers}},methods:{DoAction$1:function(entity,gameTime){var networkClient,client,result;if(LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime),networkClient=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkClientComponent),client=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent),networkClient.Client==null&&(networkClient.Client=new System.Net.WebSockets.ClientWebSocket,networkClient.Client.connectAsync(networkClient.ServerAddress,System.Threading.CancellationToken.none)),networkClient.Client.getState()==="open"){if(client.Response=null,client.Message!=null){var transferMessage=client.Message,parser=PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.FindWriter(transferMessage,this.parsers),data=parser.PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Write(transferMessage);networkClient.Client.sendAsync(new System.ArraySegment(System.Text.Encoding.UTF8.GetBytes$2(data)),"text",!0,System.Threading.CancellationToken.none);client.Message=null;return}if(networkClient.RecievingTask==null&&(networkClient.RecievingTask=networkClient.Client.receiveAsync(networkClient.RecievingBuffer,System.Threading.CancellationToken.none)),networkClient.RecievingTask.isCompleted()){for(result=networkClient.RecievingTask.getResult(),networkClient.RecievingTask=null,this.ms.Seek(System.Int64(0),0),this.ms.SetLength(System.Int64(0)),this.ms.Write(networkClient.RecievingBuffer.getArray(),networkClient.RecievingBuffer.getOffset(),result.getCount());!result.getEndOfMessage();)result=networkClient.Client.receiveAsync(networkClient.RecievingBuffer,System.Threading.CancellationToken.none).getResult(),this.ms.Write(networkClient.RecievingBuffer.getArray(),networkClient.RecievingBuffer.getOffset(),result.getCount());this.ms.Seek(System.Int64(0),0);var data1=this.reader.ReadToEnd(),parser1=PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.FindReader(data1,this.parsers),transferMessage1=parser1.PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Read(data1);client.Response=transferMessage1}}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.NetworkServerCommunicatorSystem",{inherits:[LocomotorECS.EntityProcessingSystem],statics:{methods:{GetDecodedData:function(buffer,length){var b=buffer[System.Array.index(1,buffer)],dataLength=0,totalLength=0,keyIndex=0,i,retBytes;if((b-128|0)<=125&&(dataLength=b-128|0,keyIndex=2,totalLength=dataLength+6|0),(b-128|0)==126&&(dataLength=System.BitConverter.toInt16(System.Array.init([buffer[System.Array.index(3,buffer)],buffer[System.Array.index(2,buffer)]],System.Byte),0),keyIndex=4,totalLength=dataLength+8|0),(b-128|0)==127&&(dataLength=System.Int64.clip32(System.BitConverter.toInt64(System.Array.init([buffer[System.Array.index(9,buffer)],buffer[System.Array.index(8,buffer)],buffer[System.Array.index(7,buffer)],buffer[System.Array.index(6,buffer)],buffer[System.Array.index(5,buffer)],buffer[System.Array.index(4,buffer)],buffer[System.Array.index(3,buffer)],buffer[System.Array.index(2,buffer)]],System.Byte),0)),keyIndex=10,totalLength=dataLength+14|0),totalLength>length)throw new System.Exception("The buffer length is small than the data length");var key=System.Array.init([buffer[System.Array.index(keyIndex,buffer)],buffer[System.Array.index(keyIndex+1|0,buffer)],buffer[System.Array.index(keyIndex+2|0,buffer)],buffer[System.Array.index(keyIndex+3|0,buffer)]],System.Byte),dataIndex=keyIndex+4|0,count=0;for(i=dataIndex;i<totalLength;i=i+1|0)buffer[System.Array.index(i,buffer)]=(buffer[System.Array.index(i,buffer)]^key[System.Array.index(count%4,key)])&255,count=count+1|0;return retBytes=System.Array.init(dataLength,0,System.Byte),System.Array.copy(buffer,dataIndex,retBytes,0,dataLength),retBytes},GetFrameFromBytes:function(bytesRaw){var response,frame=System.Array.init(10,0,System.Byte),indexStartRawData=-1,length=bytesRaw.length,i,reponseIdx;for(frame[System.Array.index(0,frame)]=129,length<=125?(frame[System.Array.index(1,frame)]=length&255,indexStartRawData=2):length>=126&&length<=65535?(frame[System.Array.index(1,frame)]=126,frame[System.Array.index(2,frame)]=length>>8&255,frame[System.Array.index(3,frame)]=length&255,indexStartRawData=4):(frame[System.Array.index(1,frame)]=127,frame[System.Array.index(2,frame)]=length>>56&255,frame[System.Array.index(3,frame)]=length>>48&255,frame[System.Array.index(4,frame)]=length>>40&255,frame[System.Array.index(5,frame)]=length>>32&255,frame[System.Array.index(6,frame)]=length>>24&255,frame[System.Array.index(7,frame)]=length>>16&255,frame[System.Array.index(8,frame)]=length>>8&255,frame[System.Array.index(9,frame)]=length&255,indexStartRawData=10),response=System.Array.init(indexStartRawData+length|0,0,System.Byte),reponseIdx=0,i=0;i<indexStartRawData;i=i+1|0)response[System.Array.index(reponseIdx,response)]=frame[System.Array.index(i,frame)],reponseIdx=reponseIdx+1|0;for(i=0;i<length;i=i+1|0)response[System.Array.index(reponseIdx,response)]=bytesRaw[System.Array.index(i,bytesRaw)],reponseIdx=reponseIdx+1|0;return response}}},fields:{parsers:null},ctors:{ctor:function(parsers){parsers===void 0&&(parsers=null);this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkServerComponent,PixelRPG.Base.AdditionalStuff.ClientServer.Components.ServerComponent]));this.parsers=parsers}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem",{inherits:[LocomotorECS.EntityProcessingSystem],fields:{handlers:null},ctors:{ctor:function(handlers){handlers===void 0&&(handlers=[]);this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.ClientServer.Components.ServerComponent]));this.handlers=System.Linq.Enumerable.from(handlers).toDictionary($asm.$.PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem.f1,null,Function,PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem.IHandler)}},methods:{DoAction$1:function(entity,gameTime){var $t,server,req,request,transferMessage;LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);server=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ServerComponent);$t=Bridge.getEnumerator(server.Request);try{while($t.moveNext())for(req=$t.Current,server.Response.containsKey(req.key)||server.Response.set(req.key,new(System.Collections.Generic.Queue$1(PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage).ctor)),request=req.value;request.Count>0;)transferMessage=request.Dequeue(),this.handlers.get(Bridge.getType(transferMessage)).PixelRPG$Base$AdditionalStuff$ClientServer$EntitySystems$ServerReceiveHandlerSystem$IHandler$Handle(server,req.key,transferMessage)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}});Bridge.ns("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem",$asm.$);Bridge.apply($asm.$.PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem,{f1:function(a){return a.PixelRPG$Base$AdditionalStuff$ClientServer$EntitySystems$ServerReceiveHandlerSystem$IHandler$MessageType}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem.IHandler",{$kind:"nested interface"});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils",{statics:{fields:{AvailableParsers:null},ctors:{ctor:function(){PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.AvailableParsers=System.Array.init([new PixelRPG.Base.AdditionalStuff.ClientServer.ClientConnectTransferMessageParser,new PixelRPG.Base.AdditionalStuff.ClientServer.ClientTurnDoneTransferMessageParser,new PixelRPG.Base.AdditionalStuff.ClientServer.ServerClientConnectedTransferMessageParser,new PixelRPG.Base.AdditionalStuff.ClientServer.ServerCurrentStateTransferMessageParser,new PixelRPG.Base.AdditionalStuff.ClientServer.ServerGameStartedTransferMessageParser,new PixelRPG.Base.AdditionalStuff.ClientServer.ServerPlayerTurnMadeTransferMessageParser,new PixelRPG.Base.AdditionalStuff.ClientServer.ServerYouConnectedTransferMessageParser,new PixelRPG.Base.AdditionalStuff.ClientServer.ServerYourTurnTransferMessageParser],PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessageParser)}},methods:{FindWriter:function(transferModel,parsers){if(parsers===void 0&&(parsers=null),parsers=parsers||PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.AvailableParsers,parsers==null)throw new System.Exception("Parsers list not initialized. You should either specify parsers parameter or run \r\nPixelRPG.CLI.exe generateserializers -d E:\\projects\\PixelRPG\\PixelRPG.Base\\bin\\Debug\\netstandard2.0\\PixelRPG.Base.dll > E:\\projects\\PixelRPG\\PixelRPG.Base\\TransferMessages\\Parsers.cs");for(var j=0;j<parsers.length;j=j+1|0)if(parsers[System.Array.index(j,parsers)].PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$IsWritable(transferModel))return parsers[System.Array.index(j,parsers)];return null},FindReader:function(data,parsers){if(parsers===void 0&&(parsers=null),parsers=parsers||PixelRPG.Base.AdditionalStuff.ClientServer.TransferMessageParserUtils.AvailableParsers,parsers==null)throw new System.Exception("Parsers list not initialized. You should either specify parsers parameter or run \r\nPixelRPG.CLI.exe generateserializers -d E:\\projects\\PixelRPG\\PixelRPG.Base\\bin\\Debug\\netstandard2.0\\PixelRPG.Base.dll > E:\\projects\\PixelRPG\\PixelRPG.Base\\TransferMessages\\Parsers.cs");for(var j=0;j<parsers.length;j=j+1|0)if(parsers[System.Array.index(j,parsers)].PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$IsReadable(data))return parsers[System.Array.index(j,parsers)];return null}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.Components.CameraShakeComponent",{inherits:[LocomotorECS.Component],fields:{Camera:null,ShakeDegredation:0,ShakeDirection:null,ShakeIntensity:0,ShakeOffset:null},ctors:{init:function(){this.ShakeDirection=new Microsoft.Xna.Framework.Vector2;this.ShakeOffset=new Microsoft.Xna.Framework.Vector2;this.ShakeDegredation=.95},ctor:function(camera){this.$initialize();LocomotorECS.Component.ctor.call(this);this.Camera=camera}},methods:{Shake:function(shakeIntensity,shakeDegredation,shakeDirection){(shakeIntensity===void 0&&(shakeIntensity=15),shakeDegredation===void 0&&(shakeDegredation=.9),shakeDirection===void 0&&(shakeDirection=new Microsoft.Xna.Framework.Vector2),this.Enabled=!0,this.ShakeIntensity>=shakeIntensity)||(this.ShakeDirection=shakeDirection.$clone(),this.ShakeIntensity=shakeIntensity,(shakeDegredation<0||shakeDegredation>=1)&&(shakeDegredation=.95),this.ShakeDegredation=shakeDegredation)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent",{inherits:[LocomotorECS.Component],fields:{AffectsIntensity:!1,Amplitude:0,ColorChannel:0,Frequency:0,Offset:0,OriginalColor:null,Phase:0,WaveFunction:0},ctors:{init:function(){this.AffectsIntensity=!0;this.Amplitude=1;this.ColorChannel=PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.ColorChannels.All;this.Frequency=.5;this.Offset=0;this.Phase=0;this.WaveFunction=PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions.Sin}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.ColorChannels",{$kind:"nested enum",statics:{fields:{None:0,All:1,Red:2,Green:3,Blue:4}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions",{$kind:"nested enum",statics:{fields:{Sin:0,Triangle:1,Square:2,SawTooth:3,InvertedSawTooth:4,Random:5}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.Components.FollowCameraComponent",{inherits:[LocomotorECS.Component],fields:{DesiredPosition:null,FollowLerp:0},props:{Camera:null},ctors:{init:function(){this.DesiredPosition=new Microsoft.Xna.Framework.Vector2;this.FollowLerp=.2},ctor:function(camera){this.$initialize();LocomotorECS.Component.ctor.call(this);this.Camera=camera}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.Components.FollowCursorComponent",{inherits:[LocomotorECS.Component]});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.EntitySystems.CameraShakeUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.Common.Components.CameraShakeComponent]))}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var shake=entity.GetComponent(PixelRPG.Base.AdditionalStuff.Common.Components.CameraShakeComponent);shake.Enabled&&(Math.abs(shake.ShakeIntensity)>0&&(shake.ShakeOffset=shake.ShakeDirection.$clone(),shake.ShakeOffset.X!==0||shake.ShakeOffset.Y!==0?shake.ShakeOffset.Normalize():(shake.ShakeOffset.X=shake.ShakeOffset.X+FateRandom.Fate.GlobalFate.NextFloat()-.5,shake.ShakeOffset.Y=shake.ShakeOffset.Y+FateRandom.Fate.GlobalFate.NextFloat()-.5),shake.ShakeOffset=Microsoft.Xna.Framework.Vector2.op_Multiply$1(shake.ShakeOffset.$clone(),shake.ShakeIntensity),shake.ShakeIntensity*=-shake.ShakeDegredation,Math.abs(shake.ShakeIntensity)<=.01&&(shake.ShakeIntensity=0,shake.Enabled=!1)),shake.Camera.Position=Microsoft.Xna.Framework.Vector2.op_Addition(shake.Camera.Position.$clone(),shake.ShakeOffset.$clone()))}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.EntitySystems.ColorCyclerUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([SpineEngine.ECS.Components.ColorComponent,PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent]))}},methods:{DoAction$1:function(entity,gameTime){var $t,color,colorCycler,newColor;LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);color=entity.GetComponent(SpineEngine.ECS.Components.ColorComponent);colorCycler=entity.GetComponent(PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent);colorCycler.OriginalColor=($t=colorCycler.OriginalColor,$t!=null?$t:color.Color);newColor=new Microsoft.Xna.Framework.Color;switch(colorCycler.ColorChannel){case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.ColorChannels.All:newColor=Microsoft.Xna.Framework.Color.op_Multiply(System.Nullable.getValue(colorCycler.OriginalColor).$clone(),this.EvaluateWaveFunction(gameTime.getTotalSeconds(),colorCycler));break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.ColorChannels.Red:newColor=new Microsoft.Xna.Framework.Color.$ctor7(Bridge.Int.clip32(System.Nullable.getValue(colorCycler.OriginalColor).R*this.EvaluateWaveFunction(gameTime.getTotalSeconds(),colorCycler)),System.Nullable.getValue(colorCycler.OriginalColor).G,System.Nullable.getValue(colorCycler.OriginalColor).B,System.Nullable.getValue(colorCycler.OriginalColor).A);break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.ColorChannels.Green:newColor=new Microsoft.Xna.Framework.Color.$ctor7(System.Nullable.getValue(colorCycler.OriginalColor).R,Bridge.Int.clip32(System.Nullable.getValue(colorCycler.OriginalColor).G*this.EvaluateWaveFunction(gameTime.getTotalSeconds(),colorCycler)),System.Nullable.getValue(colorCycler.OriginalColor).B,System.Nullable.getValue(colorCycler.OriginalColor).A);break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.ColorChannels.Blue:newColor=new Microsoft.Xna.Framework.Color.$ctor7(System.Nullable.getValue(colorCycler.OriginalColor).R,System.Nullable.getValue(colorCycler.OriginalColor).G,Bridge.Int.clip32(System.Nullable.getValue(colorCycler.OriginalColor).B*this.EvaluateWaveFunction(gameTime.getTotalSeconds(),colorCycler)),System.Nullable.getValue(colorCycler.OriginalColor).A);break;default:newColor=color.Color.$clone();break}newColor.A=colorCycler.AffectsIntensity?Bridge.Int.clipu8(System.Nullable.getValue(colorCycler.OriginalColor).A*this.EvaluateWaveFunction(gameTime.getTotalSeconds(),colorCycler)):System.Nullable.getValue(colorCycler.OriginalColor).A;color.Color=newColor.$clone()},EvaluateWaveFunction:function(secondsPassed,colorCycler){var t=(secondsPassed+colorCycler.Phase)*colorCycler.Frequency,y;t=t-SpineEngine.Maths.Mathf.Floor(t);y=1;switch(colorCycler.WaveFunction){case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions.Sin:y=SpineEngine.Maths.Mathf.Sin(1*t*Microsoft.Xna.Framework.MathHelper.Pi);break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions.Triangle:y=t<.5?4*t-1:-4*t+3;break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions.Square:y=t<.5?1:-1;break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions.SawTooth:y=t;break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions.InvertedSawTooth:y=1-t;break;case PixelRPG.Base.AdditionalStuff.Common.Components.ColorCyclerComponent.WaveFunctions.Random:y=1-FateRandom.Fate.GlobalFate.NextFloat()*2;break}return y*colorCycler.Amplitude+colorCycler.Offset}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.EntitySystems.FollowCameraUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.Common.Components.FollowCameraComponent]))}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var follow=entity.GetComponent(PixelRPG.Base.AdditionalStuff.Common.Components.FollowCameraComponent);this.UpdateFollow(entity);follow.Camera.Position=Microsoft.Xna.Framework.Vector2.Lerp(follow.Camera.Position.$clone(),follow.DesiredPosition.$clone(),follow.FollowLerp);follow.Camera.Position=new Microsoft.Xna.Framework.Vector2.$ctor2(Bridge.Math.round(follow.Camera.Position.X,0,6),Bridge.Math.round(follow.Camera.Position.Y,0,6))},UpdateFollow:function(entity){var follow=entity.GetComponent(PixelRPG.Base.AdditionalStuff.Common.Components.FollowCameraComponent),transform;follow.DesiredPosition.X=(follow.DesiredPosition.Y=0,0);transform=SpineEngine.Maths.TransformationUtils.GetTransformation(entity);follow.DesiredPosition.X=transform.Position.X;follow.DesiredPosition.Y=transform.Position.Y}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Common.EntitySystems.FollowCursorUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],fields:{scene:null},ctors:{ctor:function(scene){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.Common.Components.FollowCursorComponent]));this.scene=scene}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var pos=entity.GetOrCreateComponent(SpineEngine.ECS.Components.PositionComponent),mouse=entity.GetOrCreateComponent(SpineEngine.ECS.Components.InputMouseComponent),touch=entity.GetOrCreateComponent(SpineEngine.ECS.Components.InputTouchComponent);pos.Position=System.Linq.Enumerable.from(touch.CurrentTouches).any()?touch.GetScaledPosition(System.Linq.Enumerable.from(touch.CurrentTouches).first().Position.$clone()):mouse.MousePosition.$clone();pos.Position=this.scene.Camera.ScreenToWorldPoint$1(pos.Position.$clone())}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ContentPaths",{statics:{fields:{content:null},ctors:{init:function(){this.content="Content"}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ContentPaths.Effects",{$kind:"nested class",statics:{fields:{bevels:null,bloomCombine:null,bloomExtract:null,crosshatch:null,deferredLighting:null,deferredSprite:null,dissolve:null,dots:null,forwardLighting:null,gaussianBlur:null,grayscale:null,heatDistortion:null,invert:null,letterbox:null,multiTexture:null,multiTextureOverlay:null,noise:null,paletteCycler:null,pixelGlitch:null,polygonLight:null,reflection:null,scanlines:null,sepia:null,spriteAlphaTest:null,spriteBlinkEffect:null,spriteLightMultiply:null,spriteLines:null,squares:null,textureWipe:null,twist:null,vignette:null,wind:null},ctors:{init:function(){this.bevels="effects/Bevels";this.bloomCombine="effects/BloomCombine";this.bloomExtract="effects/BloomExtract";this.crosshatch="effects/Crosshatch";this.deferredLighting="effects/DeferredLighting";this.deferredSprite="effects/DeferredSprite";this.dissolve="effects/Dissolve";this.dots="effects/Dots";this.forwardLighting="effects/ForwardLighting";this.gaussianBlur="effects/GaussianBlur";this.grayscale="effects/Grayscale";this.heatDistortion="effects/HeatDistortion";this.invert="effects/Invert";this.letterbox="effects/Letterbox";this.multiTexture="effects/MultiTexture";this.multiTextureOverlay="effects/MultiTextureOverlay";this.noise="effects/Noise";this.paletteCycler="effects/PaletteCycler";this.pixelGlitch="effects/PixelGlitch";this.polygonLight="effects/PolygonLight";this.reflection="effects/Reflection";this.scanlines="effects/Scanlines";this.sepia="effects/Sepia";this.spriteAlphaTest="effects/SpriteAlphaTest";this.spriteBlinkEffect="effects/SpriteBlinkEffect";this.spriteLightMultiply="effects/SpriteLightMultiply";this.spriteLines="effects/SpriteLines";this.squares="effects/Squares";this.textureWipe="effects/TextureWipe";this.twist="effects/Twist";this.vignette="effects/Vignette";this.wind="effects/Wind"}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ContentPaths.Textures",{$kind:"nested class",statics:{fields:{heatDistortionNoise:null},ctors:{init:function(){this.heatDistortionNoise="textures/heatDistortionNoise"}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ContentPaths.Textures.TextureWipeTransition",{$kind:"nested class",statics:{fields:{angular:null,crissCross:null,diagonalDistort:null,horizontal:null,noise:null,pokemon:null,sawTooth:null,spiral:null,wink:null},ctors:{init:function(){this.angular="textures/textureWipeTransition/angular";this.crissCross="textures/textureWipeTransition/crissCross";this.diagonalDistort="textures/textureWipeTransition/diagonalDistort";this.horizontal="textures/textureWipeTransition/horizontal";this.noise="textures/textureWipeTransition/noise";this.pokemon="textures/textureWipeTransition/pokemon";this.sawTooth="textures/textureWipeTransition/sawTooth";this.spiral="textures/textureWipeTransition/spiral";this.wink="textures/textureWipeTransition/wink"}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.BevelsEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Bevels"}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.BloomCombineEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/BloomCombine"}}},fields:{baseIntensityParam:null,baseMapParam:null,baseSaturationParam:null,bloomIntensityParam:null,bloomSaturationParam:null},props:{BloomIntensity:{get:function(){return this.bloomIntensityParam.GetValueSingle()},set:function(value){this.bloomIntensityParam.SetValue$12(value)}},BaseIntensity:{get:function(){return this.baseIntensityParam.GetValueSingle()},set:function(value){this.baseIntensityParam.SetValue$12(value)}},BloomSaturation:{get:function(){return this.bloomSaturationParam.GetValueSingle()},set:function(value){this.bloomSaturationParam.SetValue$12(value)}},BaseSaturation:{get:function(){return this.baseSaturationParam.GetValueSingle()},set:function(value){this.baseSaturationParam.SetValue$12(value)}},BaseMap:{get:function(){return this.baseMapParam.GetValueTexture2D()},set:function(value){this.baseMapParam.SetValue(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.bloomIntensityParam=this.Parameters.getItem$1("_bloomIntensity");this.baseIntensityParam=this.Parameters.getItem$1("_baseIntensity");this.bloomSaturationParam=this.Parameters.getItem$1("_bloomSaturation");this.baseSaturationParam=this.Parameters.getItem$1("_baseSaturation");this.baseMapParam=this.Parameters.getItem$1("_baseMap")}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.BloomExtractEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/BloomExtract"}}},fields:{bloomThresholdParam:null},props:{BloomThreshold:{get:function(){return this.bloomThresholdParam.GetValueSingle()},set:function(value){this.bloomThresholdParam.SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.bloomThresholdParam=this.Parameters.getItem$1("_bloomThreshold")}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.CrosshatchEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Crosshatch"}}},fields:{crosshatchSizeParam:null},props:{CrosshatchSize:{get:function(){return this.crosshatchSizeParam.GetValueInt32()},set:function(value){SpineEngine.Maths.Mathf.IsEven(value)||(value=value+1|0);this.crosshatchSizeParam.SetValue$11(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.crosshatchSizeParam=this.Parameters.getItem$1("crossHatchSize");this.CrosshatchSize=16}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.DeferredLightingEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/DeferredLighting"}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.DeferredSpriteEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/DeferredSprite"}}},fields:{alphaAsSelfIlluminationParam:null,alphaCutoffParam:null,normalMapParam:null,selfIlluminationPowerParam:null},props:{AlphaCutoff:{get:function(){return this.alphaCutoffParam.GetValueSingle()},set:function(value){this.alphaCutoffParam.SetValue$12(value)}},NormalMap:{get:function(){return this.normalMapParam.GetValueTexture2D()},set:function(value){this.normalMapParam.SetValue(value)}},UseNormalAlphaChannelForSelfIllumination:{get:function(){return this.alphaAsSelfIlluminationParam.GetValueSingle()===1},set:function(value){this.alphaAsSelfIlluminationParam.SetValue$12(value?1:0)}},SelfIlluminationPower:{get:function(){return this.selfIlluminationPowerParam.GetValueSingle()},set:function(value){this.selfIlluminationPowerParam.SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.normalMapParam=this.Parameters.getItem$1("_normalMap");this.alphaCutoffParam=this.Parameters.getItem$1("_alphaCutoff");this.alphaAsSelfIlluminationParam=this.Parameters.getItem$1("_alphaAsSelfIllumination");this.selfIlluminationPowerParam=this.Parameters.getItem$1("_selfIlluminationPower");this.AlphaCutoff=.3;this.SelfIlluminationPower=1}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.DissolveEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Dissolve"}}},fields:{dissolveTexParam:null,dissolveThresholdColorParam:null,dissolveThresholdParam:null,progressParam:null},props:{Progress:{get:function(){return this.progressParam.GetValueSingle()},set:function(value){this.progressParam.SetValue$12(value)}},DissolveThreshold:{get:function(){return this.dissolveThresholdParam.GetValueSingle()},set:function(value){this.dissolveThresholdParam.SetValue$12(value)}},DissolveThresholdColor:{get:function(){return new Microsoft.Xna.Framework.Color.$ctor4(this.dissolveThresholdColorParam.GetValueVector4())},set:function(value){this.dissolveThresholdColorParam.SetValue$8(value.ToVector4())}},DissolveTexture:{get:function(){return this.dissolveTexParam.GetValueTexture2D()},set:function(value){this.dissolveTexParam.SetValue(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.progressParam=this.Parameters.getItem$1("_progress");this.dissolveThresholdParam=this.Parameters.getItem$1("_dissolveThreshold");this.dissolveThresholdColorParam=this.Parameters.getItem$1("_dissolveThresholdColor");this.dissolveTexParam=this.Parameters.getItem$1("_dissolveTex");this.Progress=0;this.DissolveThreshold=.1;this.DissolveThresholdColor=Microsoft.Xna.Framework.Color.Red.$clone()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.DotsEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Dots"}}},fields:{angleParam:null,scaleParam:null},props:{Scale:{get:function(){return this.scaleParam.GetValueSingle()},set:function(value){this.scaleParam.SetValue$12(value)}},Angle:{get:function(){return this.angleParam.GetValueSingle()},set:function(value){this.angleParam.SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.scaleParam=this.Parameters.getItem$1("scale");this.angleParam=this.Parameters.getItem$1("angle");this.Scale=.5;this.Angle=.5}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.ForwardLightingEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/ForwardLighting"}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/GaussianBlur"}}},fields:{blurOffsetsParam:null,blurWeightsParam:null,horizontalSampleOffsets:null,sampleCount:0,sampleWeights:null,verticalSampleOffsets:null,blurAmount:0,horizontalBlurDelta:0,verticalBlurDelta:0},props:{BlurAmount:{get:function(){return this.blurAmount},set:function(value){this.blurAmount!==value&&(value===0&&(value=.001),this.blurAmount=value,this.CalculateSampleWeights())}},HorizontalBlurDelta:{get:function(){return this.horizontalBlurDelta},set:function(value){value!==this.horizontalBlurDelta&&(this.horizontalBlurDelta=value,this.SetBlurEffectParameters(this.horizontalBlurDelta,0,this.horizontalSampleOffsets))}},VerticalBlurDelta:{get:function(){return this.verticalBlurDelta},set:function(value){value!==this.verticalBlurDelta&&(this.verticalBlurDelta=value,this.SetBlurEffectParameters(0,this.verticalBlurDelta,this.verticalSampleOffsets))}}},ctors:{init:function(){this.blurAmount=2},ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.blurWeightsParam=this.Parameters.getItem$1("_sampleWeights");this.blurOffsetsParam=this.Parameters.getItem$1("_sampleOffsets");this.sampleCount=this.blurWeightsParam.Elements.Count;this.sampleWeights=System.Array.init(this.sampleCount,0,System.Single);this.verticalSampleOffsets=System.Array.init(this.sampleCount,function(){return new Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2);this.horizontalSampleOffsets=System.Array.init(this.sampleCount,function(){return new Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2);this.verticalSampleOffsets[System.Array.index(0,this.verticalSampleOffsets)]=Microsoft.Xna.Framework.Vector2.Zero.$clone();this.horizontalSampleOffsets[System.Array.index(0,this.horizontalSampleOffsets)]=Microsoft.Xna.Framework.Vector2.Zero.$clone();this.CalculateSampleWeights()}},methods:{PrepareForHorizontalBlur:function(){this.blurOffsetsParam.SetValue$5(this.horizontalSampleOffsets)},PrepareForVerticalBlur:function(){this.blurOffsetsParam.SetValue$5(this.verticalSampleOffsets)},SetBlurEffectParameters:function(dx,dy,offsets){for(var sampleOffset,delta,i=0;i<(Bridge.Int.div(this.sampleCount,2)|0);i=i+1|0)sampleOffset=Bridge.Int.mul(i,2)+1.5,delta=Microsoft.Xna.Framework.Vector2.op_Multiply$1(new Microsoft.Xna.Framework.Vector2.$ctor2(dx,dy),sampleOffset),offsets[System.Array.index(Bridge.Int.mul(i,2)+1|0,offsets)]=delta.$clone(),offsets[System.Array.index(Bridge.Int.mul(i,2)+2|0,offsets)]=Microsoft.Xna.Framework.Vector2.op_UnaryNegation(delta.$clone())},CalculateSampleWeights:function(){var totalWeights,i,weight,i1;for(this.sampleWeights[System.Array.index(0,this.sampleWeights)]=this.ComputeGaussian(0),totalWeights=this.sampleWeights[System.Array.index(0,this.sampleWeights)],i=0;i<(Bridge.Int.div(this.sampleCount,2)|0);i=i+1|0)weight=this.ComputeGaussian(i+1|0),this.sampleWeights[System.Array.index(Bridge.Int.mul(i,2)+1|0,this.sampleWeights)]=weight,this.sampleWeights[System.Array.index(Bridge.Int.mul(i,2)+2|0,this.sampleWeights)]=weight,totalWeights+=weight*2;for(i1=0;i1<this.sampleWeights.length;i1=i1+1|0)this.sampleWeights[System.Array.index(i1,this.sampleWeights)]/=totalWeights;this.blurWeightsParam.SetValue$13(this.sampleWeights)},ComputeGaussian:function(n){return 1/Math.sqrt(6.2831853071795862*this.blurAmount)*Math.exp(-(n*n)/(2*this.blurAmount*this.blurAmount))}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.GrayscaleEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Grayscale"}}},ctors:{ctor:function(cloneSource){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,cloneSource)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.HeatDistortionEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/HeatDistortion"}}},props:{DistortionFactor:{get:function(){return this.Parameters.getItem$1("_distortionFactor").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_distortionFactor").SetValue$12(value)}},RiseFactor:{get:function(){return this.Parameters.getItem$1("_riseFactor").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_riseFactor").SetValue$12(value)}},Time:{get:function(){return this.Parameters.getItem$1("_time").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_time").SetValue$12(value)}},DistortionTexture:{get:function(){return this.Parameters.getItem$1("_distortionTexture").GetValueTexture2D()},set:function(value){this.Parameters.getItem$1("_distortionTexture").SetValue(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.InvertEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Invert"}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.LetterboxEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Letterbox"}}},props:{Color:{get:function(){return new Microsoft.Xna.Framework.Color.$ctor4(this.Parameters.getItem$1("_color").GetValueVector4())},set:function(value){this.Parameters.getItem$1("_color").SetValue$8(value.ToVector4())}},LetterboxSize:{get:function(){return this.Parameters.getItem$1("_letterboxSize").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_letterboxSize").SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.MultiTextureEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/MultiTexture"}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.MultiTextureOverlayEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/MultiTextureOverlay"}}},props:{SecondTexture:{get:function(){return this.Parameters.getItem$1("_secondTexture").GetValueTexture2D()},set:function(value){this.Parameters.getItem$1("_secondTexture").SetValue(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.NoiseEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Noise"}}},fields:{noiseParam:null},props:{Noise:{get:function(){return this.noiseParam.GetValueSingle()},set:function(value){this.noiseParam.SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.noiseParam=this.Parameters.getItem$1("noise");this.Noise=1}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.PaletteCyclerEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/PaletteCycler"}}},fields:{cycleSpeedParam:null,paletteTextureParam:null,timeParam:null},props:{PaletteTexture:{get:function(){return this.paletteTextureParam.GetValueTexture2D()},set:function(value){this.paletteTextureParam.SetValue(value)}},CycleSpeed:{get:function(){return this.cycleSpeedParam.GetValueSingle()},set:function(value){this.cycleSpeedParam.SetValue$12(value)}},Time:{get:function(){return this.timeParam.GetValueSingle()},set:function(value){this.timeParam.SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.paletteTextureParam=this.Parameters.getItem$1("_paletteTexture");this.cycleSpeedParam=this.Parameters.getItem$1("_cycleSpeed");this.timeParam=this.Parameters.getItem$1("_time")}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.PixelGlitchEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/PixelGlitch"}}},props:{VerticalSize:{get:function(){return this.Parameters.getItem$1("_verticalSize").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_verticalSize").SetValue$12(value)}},HorizontalOffset:{get:function(){return this.Parameters.getItem$1("_horizontalOffset").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_horizontalOffset").SetValue$12(value)}},ScreenSize:{get:function(){return this.Parameters.getItem$1("_screenSize").GetValueVector2()},set:function(value){this.Parameters.getItem$1("_screenSize").SetValue$4(value.$clone())}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.PolygonLightEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/PolygonLight"}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Reflection"}}},fields:{matrixTransformParam:null,normalMagnitudeParam:null,normalMapParam:null,reflectionIntensityParam:null,renderTextureParam:null},props:{ReflectionIntensity:{get:function(){return this.reflectionIntensityParam.GetValueSingle()},set:function(value){this.reflectionIntensityParam.SetValue$12(value)}},NormalMagnitude:{get:function(){return this.normalMagnitudeParam.GetValueSingle()},set:function(value){this.normalMagnitudeParam.SetValue$12(value)}},NormalMap:{get:function(){return this.normalMapParam.GetValueTexture2D()},set:function(value){this.normalMapParam.SetValue(value)}},RenderTexture:{get:function(){return this.renderTextureParam.GetValueTexture2D()},set:function(value){this.renderTextureParam.SetValue(value)}},MatrixTransform:{get:function(){return this.matrixTransformParam.GetValueMatrix()},set:function(value){this.matrixTransformParam.SetValue$1(value.$clone())}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.reflectionIntensityParam=this.Parameters.getItem$1("_reflectionIntensity");this.renderTextureParam=this.Parameters.getItem$1("_renderTexture");this.normalMapParam=this.Parameters.getItem$1("_normalMap");this.matrixTransformParam=this.Parameters.getItem$1("_matrixTransform");this.normalMagnitudeParam=this.Parameters.getItem$1("_normalMagnitude");this.ReflectionIntensity=.4;this.NormalMagnitude=.05}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.ScanlinesEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Scanlines"}}},fields:{attenuationParam:null,linesFactorParam:null},props:{Attenuation:{get:function(){return this.attenuationParam.GetValueSingle()},set:function(value){this.attenuationParam.SetValue$12(value)}},LinesFactor:{get:function(){return this.linesFactorParam.GetValueSingle()},set:function(value){this.linesFactorParam.SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.attenuationParam=this.Parameters.getItem$1("_attenuation");this.linesFactorParam=this.Parameters.getItem$1("_linesFactor");this.Attenuation=.04;this.LinesFactor=800}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.SepiaEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Sepia"}}},fields:{sepiaToneParam:null},props:{SepiaTone:{get:function(){return this.sepiaToneParam.GetValueVector3()},set:function(value){this.sepiaToneParam.SetValue$6(value.$clone())}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.sepiaToneParam=this.Parameters.getItem$1("_sepiaTone");this.SepiaTone=new Microsoft.Xna.Framework.Vector3.$ctor3(1.2,1,.8)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.SpriteAlphaTestEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/SpriteAlphaTest"}}},fields:{alphaTestParam:null,compareFunction:0,referenceAlpha:0},props:{ReferenceAlpha:{get:function(){return this.referenceAlpha},set:function(value){this.referenceAlpha!==value&&(this.referenceAlpha=value,this.UpdateEffectParameter())}},CompareFunction:{get:function(){return this.compareFunction},set:function(value){this.compareFunction!==value&&(this.compareFunction=value,this.UpdateEffectParameter())}}},ctors:{init:function(){this.compareFunction=PixelRPG.Base.AdditionalStuff.Effects.SpriteAlphaTestEffect.AlphaTestCompareFunction.Greater;this.referenceAlpha=.5},ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.alphaTestParam=this.Parameters.getItem$1("_alphaTest");this.UpdateEffectParameter()}},methods:{UpdateEffectParameter:function(){var value=new Microsoft.Xna.Framework.Vector3.ctor;value.X=this.referenceAlpha;switch(this.compareFunction){case PixelRPG.Base.AdditionalStuff.Effects.SpriteAlphaTestEffect.AlphaTestCompareFunction.Greater:value.Y=-1;value.Z=1;break;case PixelRPG.Base.AdditionalStuff.Effects.SpriteAlphaTestEffect.AlphaTestCompareFunction.LessThan:value.Y=1;value.Z=-1;break;case PixelRPG.Base.AdditionalStuff.Effects.SpriteAlphaTestEffect.AlphaTestCompareFunction.Always:value.Y=1;value.Z=1;break;case PixelRPG.Base.AdditionalStuff.Effects.SpriteAlphaTestEffect.AlphaTestCompareFunction.Never:value.Y=-1;value.Z=-1;break}this.alphaTestParam.SetValue$6(value.$clone())}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.SpriteAlphaTestEffect.AlphaTestCompareFunction",{$kind:"nested enum",statics:{fields:{Greater:0,LessThan:1,Always:2,Never:3}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.SpriteBlinkEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/SpriteBlinkEffect"}}},fields:{blinkColorParam:null},props:{BlinkColor:{get:function(){return new Microsoft.Xna.Framework.Color.$ctor4(this.blinkColorParam.GetValueVector4())},set:function(value){this.blinkColorParam.SetValue$8(value.ToVector4())}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.blinkColorParam=this.Parameters.getItem$1("_blinkColor");this.BlinkColor=Microsoft.Xna.Framework.Color.TransparentBlack.$clone()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/SpriteLightMultiply"}}},props:{LightTexture:{get:function(){return this.Parameters.getItem$1("_lightTexture").GetValueTexture2D()},set:function(value){this.Parameters.getItem$1("_lightTexture").SetValue(value)}},MultiplicativeFactor:{get:function(){return this.Parameters.getItem$1("_multiplicativeFactor").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_multiplicativeFactor").SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.SpriteLinesEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/SpriteLines"}}},fields:{lineColorParam:null,lineSizeParam:null},props:{LineColor:{get:function(){return new Microsoft.Xna.Framework.Color.$ctor4(this.lineColorParam.GetValueVector4())},set:function(value){this.lineColorParam.SetValue$8(value.ToVector4())}},LineSize:{get:function(){return this.lineSizeParam.GetValueSingle()},set:function(value){this.lineSizeParam.SetValue$12(value)}},IsVertical:{get:function(){return Bridge.referenceEquals(this.CurrentTechnique,this.Techniques.getItem$1("VerticalLines"))},set:function(value){this.CurrentTechnique=this.Techniques.getItem$1(value?"VerticalLines:":"HorizontalLines")}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.lineColorParam=this.Parameters.getItem$1("_lineColor");this.lineSizeParam=this.Parameters.getItem$1("_lineSize");this.LineColor=Microsoft.Xna.Framework.Color.Red.$clone();this.LineSize=5}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect,SpineEngine.Graphics.Transitions.IProgressEffect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Squares"}}},props:{Color:{get:function(){return new Microsoft.Xna.Framework.Color.$ctor4(this.Parameters.getItem$1("_color").GetValueVector4())},set:function(value){this.Parameters.getItem$1("_color").SetValue$8(value.ToVector4())}},Smoothness:{get:function(){return this.Parameters.getItem$1("_smoothness").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_smoothness").SetValue$12(value)}},Size:{get:function(){return this.Parameters.getItem$1("_size").GetValueVector2()},set:function(value){this.Parameters.getItem$1("_size").SetValue$4(value.$clone())}},Progress:{get:function(){return this.Parameters.getItem$1("_progress").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_progress").SetValue$12(value)}}},alias:["Progress","SpineEngine$Graphics$Transitions$IProgressEffect$Progress"],ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.Color=Microsoft.Xna.Framework.Color.Black.$clone();this.Smoothness=.5;this.Size=new Microsoft.Xna.Framework.Vector2.$ctor2(30,30);this.Progress=0}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.TextureWipeEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect,SpineEngine.Graphics.Transitions.IProgressEffect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/TextureWipe"}}},props:{Opacity:{get:function(){return this.Parameters.getItem$1("_opacity").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_opacity").SetValue$12(value)}},Color:{get:function(){return new Microsoft.Xna.Framework.Color.$ctor4(this.Parameters.getItem$1("_color").GetValueVector4())},set:function(value){this.Parameters.getItem$1("_color").SetValue$8(value.ToVector4())}},Texture:{get:function(){return this.Parameters.getItem$1("_transitionTex").GetValueTexture2D()},set:function(value){this.Parameters.getItem$1("_transitionTex").SetValue(value)}},Progress:{get:function(){return this.Parameters.getItem$1("_progress").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_progress").SetValue$12(value)}}},alias:["Progress","SpineEngine$Graphics$Transitions$IProgressEffect$Progress"],ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.TwistEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Twist"}}},fields:{angleParam:null,offsetParam:null,radiusParam:null},props:{Radius:{get:function(){return this.radiusParam.GetValueSingle()},set:function(value){this.radiusParam.SetValue$12(value)}},Angle:{get:function(){return this.angleParam.GetValueSingle()},set:function(value){this.angleParam.SetValue$12(value)}},Offset:{get:function(){return this.offsetParam.GetValueVector2()},set:function(value){this.offsetParam.SetValue$4(value.$clone())}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect);this.radiusParam=this.Parameters.getItem$1("radius");this.angleParam=this.Parameters.getItem$1("angle");this.offsetParam=this.Parameters.getItem$1("offset");this.Radius=.5;this.Angle=5;this.Offset=Microsoft.Xna.Framework.Vector2.op_Division$1(Microsoft.Xna.Framework.Vector2.One.$clone(),2)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.VignetteEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Vignette"}}},props:{Power:{get:function(){return this.Parameters.getItem$1("_power").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_power").SetValue$12(value)}},Radius:{get:function(){return this.Parameters.getItem$1("_radius").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_radius").SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.WindEffect",{inherits:[Microsoft.Xna.Framework.Graphics.Effect,SpineEngine.Graphics.Transitions.IProgressEffect],statics:{fields:{EffectAssetName:null},ctors:{init:function(){this.EffectAssetName="effects/Wind"}}},props:{Segments:{get:function(){return this.Parameters.getItem$1("_windSegments").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_windSegments").SetValue$12(value)}},Size:{get:function(){return this.Parameters.getItem$1("_size").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_size").SetValue$12(value)}},Progress:{get:function(){return this.Parameters.getItem$1("_progress").GetValueSingle()},set:function(value){this.Parameters.getItem$1("_progress").SetValue$12(value)}}},alias:["Progress","SpineEngine$Graphics$Transitions$IProgressEffect$Progress"],ctors:{ctor:function(effect){this.$initialize();Microsoft.Xna.Framework.Graphics.Effect.ctor.call(this,effect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.TextComponent",{inherits:[LocomotorECS.Component],props:{Text:null,Label:null}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.UIComponent",{inherits:[LocomotorECS.Component],fields:{GameTime:null,MouseProvider:null},props:{UserInterface:null},ctors:{init:function(){this.GameTime=new Microsoft.Xna.Framework.GameTime.ctor;this.MouseProvider=new PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider;this.UserInterface=new FaceUI.UserInterface}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.ECS.EntitySystems.TextUIUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.TextComponent]))}},methods:{DoAction$1:function(entity,gameTime){var $t,$t1,$t2,$t3;LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var ui=entity.GetOrCreateComponent(PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.UIComponent),text=entity.GetComponent(PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.TextComponent),scale=($t=($t1=entity.GetComponent(SpineEngine.ECS.Components.ScaleComponent))!=null?$t1.Scale:null,$t!=null?$t:Microsoft.Xna.Framework.Vector2.One),color=($t2=($t3=entity.GetComponent(SpineEngine.ECS.Components.ColorComponent))!=null?$t3.Color:null,$t2!=null?$t2:Microsoft.Xna.Framework.Color.White);ui.UserInterface.ShowCursor=!1;text.Label==null&&(text.Label=new FaceUI.Entities.Label.$ctor1(text.Text),ui.UserInterface.AddEntity(text.Label));text.Label.FillColor=color.$clone();text.Label.Text=text.Text;text.Label.Scale=scale.X}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.ECS.EntitySystems.UIUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem,SpineEngine.ECS.IScreenResolutionChangedListener],fields:{spriteBatchWrapper:null,totalTime:null},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{init:function(){this.totalTime=new System.TimeSpan;this.spriteBatchWrapper=new PixelRPG.Base.AdditionalStuff.FaceUI.Utils.MeshBatchWrapper;this.totalTime=System.TimeSpan.zero},ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.UIComponent]))}},methods:{DoAction$1:function(entity,gameTime){var $t,$t1,touchPosition;LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var ui=entity.GetComponent(PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.UIComponent),scale=($t=($t1=entity.GetComponent(SpineEngine.ECS.Components.ScaleComponent))!=null?$t1.Scale:null,$t!=null?$t:Microsoft.Xna.Framework.Vector2.One),mouse=entity.GetOrCreateComponent(SpineEngine.ECS.Components.InputMouseComponent),touch=entity.GetOrCreateComponent(SpineEngine.ECS.Components.InputTouchComponent),finalRender=entity.GetOrCreateComponent(SpineEngine.ECS.Components.FinalRenderComponent);this.totalTime=System.TimeSpan.add(this.totalTime,gameTime);FaceUI.UserInterface.Active=ui.UserInterface;ui.UserInterface.MouseInputProvider=ui.MouseProvider;ui.MouseProvider._oldMouseState=ui.MouseProvider._newMouseState.$clone();touch.IsConnected?(System.Linq.Enumerable.from(touch.CurrentTouches).any()?(touchPosition=touch.GetScaledPosition(touch.CurrentTouches.getItem(0).$clone().Position.$clone()),ui.MouseProvider._newMouseState.X=touchPosition.X,ui.MouseProvider._newMouseState.Y=touchPosition.Y,ui.MouseProvider._newMouseState.LeftButton=Microsoft.Xna.Framework.Input.ButtonState.Pressed):(ui.MouseProvider._newMouseState.X=ui.MouseProvider._oldMouseState.X,ui.MouseProvider._newMouseState.Y=ui.MouseProvider._oldMouseState.Y,ui.MouseProvider._newMouseState.LeftButton=Microsoft.Xna.Framework.Input.ButtonState.Released),ui.MouseProvider._newMouseState.RightButton=Microsoft.Xna.Framework.Input.ButtonState.Released,ui.MouseProvider._newMouseState.MiddleButton=Microsoft.Xna.Framework.Input.ButtonState.Released,ui.MouseProvider._newMouseState.ScrollWheelValue=0):(ui.MouseProvider._newMouseState.X=mouse.ScaledMousePosition.X,ui.MouseProvider._newMouseState.Y=mouse.ScaledMousePosition.Y,ui.MouseProvider._newMouseState.LeftButton=mouse.CurrentMouseState.LeftButton,ui.MouseProvider._newMouseState.RightButton=mouse.CurrentMouseState.RightButton,ui.MouseProvider._newMouseState.MiddleButton=mouse.CurrentMouseState.MiddleButton,ui.MouseProvider._newMouseState.ScrollWheelValue=mouse.CurrentMouseState.ScrollWheelValue);ui.UserInterface.GlobalScale=scale.X;ui.GameTime.TotalGameTime=this.totalTime;ui.GameTime.ElapsedGameTime=gameTime;ui.UserInterface.Update(ui.GameTime);this.spriteBatchWrapper.MeshBatch=finalRender.Batch;this.spriteBatchWrapper.MeshBatch.Clear();ui.UserInterface.Draw(this.spriteBatchWrapper)},SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){Bridge.cast(this.spriteBatchWrapper.GraphicsDevice,PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ScreenGraphicDeviceWrapper).ViewRectangle=sceneRenderTarget.$clone()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources",{statics:{methods:{GetEnumerator:function(content,theme){var $step=0,$jumpFromFinally,$returnValue,root,$t,cursor,cursorName,$t1,skin,skinName,$t2,skin1,skinName1,$t3,style,$t4,skin2,skinName2,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:return root="FaceUI/themes/"+(theme||"")+"/",content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/horizontal_line"),$enumerator.current=Bridge.box(0,System.Int32),$step=1,!0;case 1:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/white_texture"),$enumerator.current=Bridge.box(0,System.Int32),$step=2,!0;case 2:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/icons/background"),$enumerator.current=Bridge.box(0,System.Int32),$step=3,!0;case 3:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/scrollbar"),$enumerator.current=Bridge.box(0,System.Int32),$step=4,!0;case 4:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/scrollbar_mark"),$enumerator.current=Bridge.box(0,System.Int32),$step=5,!0;case 5:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/arrow_down"),$enumerator.current=Bridge.box(0,System.Int32),$step=6,!0;case 6:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/arrow_up"),$enumerator.current=Bridge.box(0,System.Int32),$step=7,!0;case 7:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/progressbar"),$enumerator.current=Bridge.box(0,System.Int32),$step=8,!0;case 8:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,(root||"")+"textures/progressbar_fill"),$enumerator.current=Bridge.box(0,System.Int32),$step=9,!0;case 9:$t=Bridge.getEnumerator(System.Enum.getValues(FaceUI.CursorType));try{while($t.moveNext())cursor=Bridge.cast($t.Current,FaceUI.CursorType),cursorName=System.Enum.getName(FaceUI.CursorType,Bridge.box(cursor,FaceUI.CursorType,System.Enum.toStringFn(FaceUI.CursorType))).toLowerCase(),content.Load(FaceUI.DataTypes.CursorTextureData,(root||"")+"textures/cursor_"+(cursorName||"")+"_md")}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return $enumerator.current=Bridge.box(0,System.Int32),$step=10,!0;case 10:$t1=Bridge.getEnumerator(System.Enum.getValues(FaceUI.Entities.PanelSkin));try{while($t1.moveNext())(skin=Bridge.cast($t1.Current,FaceUI.Entities.PanelSkin),skin!==FaceUI.Entities.PanelSkin.None)&&(skinName=System.Enum.toString(FaceUI.Entities.PanelSkin,skin).toLowerCase(),content.Load(FaceUI.DataTypes.TextureData,(root||"")+"textures/panel_"+(skinName||"")+"_md"))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}return $enumerator.current=Bridge.box(0,System.Int32),$step=11,!0;case 11:return content.Load(FaceUI.DataTypes.TextureData,(root||"")+"textures/scrollbar_md"),$enumerator.current=Bridge.box(0,System.Int32),$step=12,!0;case 12:$t2=Bridge.getEnumerator(System.Enum.getValues(FaceUI.Entities.SliderSkin));try{while($t2.moveNext())skin1=Bridge.cast($t2.Current,FaceUI.Entities.SliderSkin),skinName1=System.Enum.toString(FaceUI.Entities.SliderSkin,skin1).toLowerCase(),content.Load(FaceUI.DataTypes.TextureData,(root||"")+"textures/slider_"+(skinName1||"")+"_md")}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}return $enumerator.current=Bridge.box(0,System.Int32),$step=13,!0;case 13:$t3=Bridge.getEnumerator(System.Enum.getValues(FaceUI.Entities.FontStyle));try{while($t3.moveNext())style=Bridge.cast($t3.Current,FaceUI.Entities.FontStyle),content.Load(Microsoft.Xna.Framework.Graphics.SpriteFont,(root||"")+"fonts/"+(System.Enum.toString(FaceUI.Entities.FontStyle,style)||""))}finally{Bridge.is($t3,System.IDisposable)&&$t3.System$IDisposable$Dispose()}return $enumerator.current=Bridge.box(0,System.Int32),$step=14,!0;case 14:$t4=Bridge.getEnumerator(System.Enum.getValues(FaceUI.Entities.ButtonSkin));try{while($t4.moveNext())skin2=Bridge.cast($t4.Current,FaceUI.Entities.ButtonSkin),skinName2=System.Enum.toString(FaceUI.Entities.ButtonSkin,skin2).toLowerCase(),content.Load(FaceUI.DataTypes.TextureData,(root||"")+"textures/button_"+(skinName2||"")+"_md")}finally{Bridge.is($t4,System.IDisposable)&&$t4.System$IDisposable$Dispose()}return $enumerator.current=Bridge.box(0,System.Int32),$step=15,!0;case 15:return content.Load(FaceUI.DataTypes.TextureData,(root||"")+"textures/progressbar_md"),$enumerator.current=Bridge.box(0,System.Int32),$step=16,!0;case 16:return content.Load(Microsoft.Xna.Framework.Graphics.Effect,(root||"")+"effects/disabled"),$enumerator.current=Bridge.box(0,System.Int32),$step=17,!0;case 17:return content.Load(Microsoft.Xna.Framework.Graphics.Effect,(root||"")+"effects/silhouette"),$enumerator.current=Bridge.box(0,System.Int32),$step=18,!0;case 18:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Entity,"DefaultStyle"),"Entity",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=19,!0;case 19:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Paragraph,"DefaultStyle"),"Paragraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=20,!0;case 20:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Button,"DefaultStyle"),"Button",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=21,!0;case 21:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Button,"DefaultParagraphStyle"),"ButtonParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=22,!0;case 22:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.CheckBox,"DefaultStyle"),"CheckBox",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=23,!0;case 23:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.CheckBox,"DefaultParagraphStyle"),"CheckBoxParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=24,!0;case 24:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.ColoredRectangle,"DefaultStyle"),"ColoredRectangle",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=25,!0;case 25:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.DropDown,"DefaultStyle"),"DropDown",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=26,!0;case 26:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.DropDown,"DefaultParagraphStyle"),"DropDownParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=27,!0;case 27:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.DropDown,"DefaultSelectedParagraphStyle"),"DropDownSelectedParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=28,!0;case 28:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Header,"DefaultStyle"),"Header",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=29,!0;case 29:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.HorizontalLine,"DefaultStyle"),"HorizontalLine",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=30,!0;case 30:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Icon,"DefaultStyle"),"Icon",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=31,!0;case 31:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Image,"DefaultStyle"),"Image",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=32,!0;case 32:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Label,"DefaultStyle"),"Label",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=33,!0;case 33:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Panel,"DefaultStyle"),"Panel",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=34,!0;case 34:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.ProgressBar,"DefaultStyle"),"ProgressBar",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=35,!0;case 35:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.ProgressBar,"DefaultFillStyle"),"ProgressBarFill",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=36,!0;case 36:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.RadioButton,"DefaultStyle"),"RadioButton",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=37,!0;case 37:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.RadioButton,"DefaultParagraphStyle"),"RadioButtonParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=38,!0;case 38:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.SelectList,"DefaultStyle"),"SelectList",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=39,!0;case 39:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.SelectList,"DefaultParagraphStyle"),"SelectListParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=40,!0;case 40:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.Slider,"DefaultStyle"),"Slider",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=41,!0;case 41:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.TextInput,"DefaultStyle"),"TextInput",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=42,!0;case 42:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.TextInput,"DefaultParagraphStyle"),"TextInputParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=43,!0;case 43:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.TextInput,"DefaultPlaceholderStyle"),"TextInputPlaceholder",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=44,!0;case 44:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.VerticalScrollbar,"DefaultStyle"),"VerticalScrollbar",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=45,!0;case 45:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.PanelTabs,"DefaultButtonStyle"),"PanelTabsButton",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=46,!0;case 46:return PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.LoadDefaultStyles(Bridge.ref(FaceUI.Entities.PanelTabs,"DefaultButtonParagraphStyle"),"PanelTabsButtonParagraph",root,content),$enumerator.current=Bridge.box(0,System.Int32),$step=47,!0;case 47:default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator},LoadDefaultStyles:function(sheet,entityName,themeRoot,content){var stylesheetBase=(themeRoot||"")+"styles/"+(entityName||"");content.Load(FaceUI.DataTypes.DefaultStylesList,stylesheetBase)}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.Utils.MeshBatchWrapper",{inherits:[FaceUI.Utils.ISpriteBatchWrapper],fields:{glyphsCache:null},props:{MeshBatch:null,GraphicsDevice:null},alias:["Begin","FaceUI$Utils$ISpriteBatchWrapper$Begin","End","FaceUI$Utils$ISpriteBatchWrapper$End","Draw","FaceUI$Utils$ISpriteBatchWrapper$Draw","Draw$1","FaceUI$Utils$ISpriteBatchWrapper$Draw$1","DrawString","FaceUI$Utils$ISpriteBatchWrapper$DrawString","GraphicsDevice","FaceUI$Utils$ISpriteBatchWrapper$GraphicsDevice"],ctors:{init:function(){this.glyphsCache=new(System.Collections.Generic.Dictionary$2(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Collections.Generic.Dictionary$2(System.Char,Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph)));this.GraphicsDevice=new PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ScreenGraphicDeviceWrapper}},methods:{Begin:function(sortMode,blendState,samplerState,depthStencilState,rasterizerState,effect,transformMatrix){sortMode===void 0&&(sortMode=0);blendState===void 0&&(blendState=null);samplerState===void 0&&(samplerState=null);depthStencilState===void 0&&(depthStencilState=null);rasterizerState===void 0&&(rasterizerState=null);effect===void 0&&(effect=null);transformMatrix===void 0&&(transformMatrix=null)},End:function(){},Draw:function(texture,destRect,color){this.MeshBatch.Draw(texture,SpineEngine.Maths.RectangleF.op_Implicit$1(destRect.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(texture.Bounds.$clone()),color.$clone())},Draw$1:function(texture,destRect,srcRect,color){this.MeshBatch.Draw(texture,SpineEngine.Maths.RectangleF.op_Implicit$1(destRect.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(srcRect.$clone()),color.$clone())},DrawString:function(spriteFont,text,position,color,rotation,origin,scalef,effects,layerDepth){var scale=new Microsoft.Xna.Framework.Vector2.$ctor1(scalef),flipAdjustment=Microsoft.Xna.Framework.Vector2.Zero.$clone(),flippedVert=(effects&Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically)===Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically,flippedHorz=(effects&Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally)===Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally,size,offset,firstGlyphOfLine,pGlyphs,i,c,pCurrentGlyph,p;(flippedVert||flippedHorz)&&(size=spriteFont.MeasureString(text),flippedHorz&&(origin.X*=-1,flipAdjustment.X=-size.X),flippedVert&&(origin.Y*=-1,flipAdjustment.Y=spriteFont.LineSpacing-size.Y));var transformation={v:Microsoft.Xna.Framework.Matrix.Identity.$clone()},cos=0,sin=0;for(rotation===0?(transformation.v.M11=flippedHorz?-scale.X:scale.X,transformation.v.M22=flippedVert?-scale.Y:scale.Y,transformation.v.M41=(flipAdjustment.X-origin.X)*transformation.v.M11+position.X,transformation.v.M42=(flipAdjustment.Y-origin.Y)*transformation.v.M22+position.Y):(cos=Math.cos(rotation),sin=Math.sin(rotation),transformation.v.M11=(flippedHorz?-scale.X:scale.X)*cos,transformation.v.M12=(flippedHorz?-scale.X:scale.X)*sin,transformation.v.M21=(flippedVert?-scale.Y:scale.Y)*-sin,transformation.v.M22=(flippedVert?-scale.Y:scale.Y)*cos,transformation.v.M41=(flipAdjustment.X-origin.X)*transformation.v.M11+(flipAdjustment.Y-origin.Y)*transformation.v.M21+position.X,transformation.v.M42=(flipAdjustment.X-origin.X)*transformation.v.M12+(flipAdjustment.Y-origin.Y)*transformation.v.M22+position.Y),offset=Microsoft.Xna.Framework.Vector2.Zero.$clone(),firstGlyphOfLine=!0,this.glyphsCache.containsKey(spriteFont)||this.glyphsCache.set(spriteFont,spriteFont.GetGlyphs()),pGlyphs=this.glyphsCache.get(spriteFont),i=0;i<text.length;i=i+1|0)if(c=text.charCodeAt(i),c!==13){if(c===10){offset.X=0;offset.Y+=spriteFont.LineSpacing;firstGlyphOfLine=!0;continue}pCurrentGlyph=pGlyphs.get(c).$clone();firstGlyphOfLine?(offset.X=Math.max(pCurrentGlyph.LeftSideBearing,0),firstGlyphOfLine=!1):offset.X+=spriteFont.Spacing+pCurrentGlyph.LeftSideBearing;p={v:offset.$clone()};flippedHorz&&(p.v.X+=pCurrentGlyph.BoundsInTexture.Width);p.v.X+=pCurrentGlyph.Cropping.X;flippedVert&&(p.v.Y+=pCurrentGlyph.BoundsInTexture.Height-spriteFont.LineSpacing|0);p.v.Y+=pCurrentGlyph.Cropping.Y;Microsoft.Xna.Framework.Vector2.Transform$2(p,transformation,p);this.Draw$1(spriteFont.Texture,SpineEngine.Maths.RectangleF.op_Implicit(new SpineEngine.Maths.RectangleF.$ctor2(p.v.X,p.v.Y,pCurrentGlyph.BoundsInTexture.Width*scale.X,pCurrentGlyph.BoundsInTexture.Height*scale.Y)),SpineEngine.Maths.RectangleF.op_Implicit(new SpineEngine.Maths.RectangleF.$ctor2(pCurrentGlyph.BoundsInTexture.X,pCurrentGlyph.BoundsInTexture.Y,(pCurrentGlyph.BoundsInTexture.X+pCurrentGlyph.BoundsInTexture.Width|0)-pCurrentGlyph.BoundsInTexture.X|0,(pCurrentGlyph.BoundsInTexture.Y+pCurrentGlyph.BoundsInTexture.Height|0)-pCurrentGlyph.BoundsInTexture.Y|0)),color.$clone());offset.X+=pCurrentGlyph.Width+pCurrentGlyph.RightSideBearing}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider",{inherits:[FaceUI.IMouseInput],fields:{_newMouseState:null,_oldMouseState:null,_newMousePos:null,_oldMousePos:null},props:{MouseWheel:0,MouseWheelChange:0,MousePosition:{get:function(){return this._newMousePos.$clone()}},MousePositionDiff:{get:function(){return Microsoft.Xna.Framework.Vector2.op_Subtraction(this._newMousePos.$clone(),this._oldMousePos.$clone())}}},alias:["MouseWheel","FaceUI$IMouseInput$MouseWheel","MouseWheelChange","FaceUI$IMouseInput$MouseWheelChange","Update","FaceUI$IMouseInput$Update","UpdateMousePosition","FaceUI$IMouseInput$UpdateMousePosition","TransformMousePosition","FaceUI$IMouseInput$TransformMousePosition","MousePosition","FaceUI$IMouseInput$MousePosition","MousePositionDiff","FaceUI$IMouseInput$MousePositionDiff","MouseButtonDown","FaceUI$IMouseInput$MouseButtonDown","AnyMouseButtonDown","FaceUI$IMouseInput$AnyMouseButtonDown","MouseButtonReleased","FaceUI$IMouseInput$MouseButtonReleased","AnyMouseButtonReleased","FaceUI$IMouseInput$AnyMouseButtonReleased","MouseButtonPressed","FaceUI$IMouseInput$MouseButtonPressed","AnyMouseButtonPressed","FaceUI$IMouseInput$AnyMouseButtonPressed","MouseButtonClick","FaceUI$IMouseInput$MouseButtonClick","AnyMouseButtonClicked","FaceUI$IMouseInput$AnyMouseButtonClicked"],ctors:{init:function(){this._newMouseState=new PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider.State;this._oldMouseState=new PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider.State;this._newMousePos=new Microsoft.Xna.Framework.Vector2;this._oldMousePos=new Microsoft.Xna.Framework.Vector2}},methods:{Update:function(gameTime){this._oldMousePos=this._newMousePos.$clone();this._newMousePos=new Microsoft.Xna.Framework.Vector2.$ctor2(this._newMouseState.X,this._newMouseState.Y);var prevMouseWheel=this.MouseWheel;this.MouseWheel=this._newMouseState.ScrollWheelValue;this.MouseWheelChange=Bridge.Int.sign(this.MouseWheel-prevMouseWheel)},UpdateMousePosition:function(pos){Microsoft.Xna.Framework.Input.Mouse.SetPosition(Bridge.Int.clip32(pos.X),Bridge.Int.clip32(pos.Y));this._newMousePos=this._oldMousePos=pos.$clone()},TransformMousePosition:function(transform){var newMousePos=this._newMousePos.$clone();return System.Nullable.liftne(Microsoft.Xna.Framework.Matrix.op_Inequality,System.Nullable.lift1("$clone",transform),null)?Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2.Transform(newMousePos.$clone(),System.Nullable.getValue(transform).$clone()),new Microsoft.Xna.Framework.Vector2.$ctor2(System.Nullable.getValue(transform).Translation.X,System.Nullable.getValue(transform).Translation.Y)):newMousePos.$clone()},MouseButtonDown:function(button){return button===void 0&&(button=0),this.GetMouseButtonState(button)===Microsoft.Xna.Framework.Input.ButtonState.Pressed},AnyMouseButtonDown:function(){return this.MouseButtonDown(FaceUI.MouseButton.Left)||this.MouseButtonDown(FaceUI.MouseButton.Right)||this.MouseButtonDown(FaceUI.MouseButton.Middle)},MouseButtonReleased:function(button){return button===void 0&&(button=0),this.GetMouseButtonState(button)===Microsoft.Xna.Framework.Input.ButtonState.Released&&this.GetMousePreviousButtonState(button)===Microsoft.Xna.Framework.Input.ButtonState.Pressed},AnyMouseButtonReleased:function(){return this.MouseButtonReleased(FaceUI.MouseButton.Left)||this.MouseButtonReleased(FaceUI.MouseButton.Right)||this.MouseButtonReleased(FaceUI.MouseButton.Middle)},MouseButtonPressed:function(button){return button===void 0&&(button=0),this.GetMouseButtonState(button)===Microsoft.Xna.Framework.Input.ButtonState.Pressed&&this.GetMousePreviousButtonState(button)===Microsoft.Xna.Framework.Input.ButtonState.Released},AnyMouseButtonPressed:function(){return this.MouseButtonPressed(FaceUI.MouseButton.Left)||this.MouseButtonPressed(FaceUI.MouseButton.Right)||this.MouseButtonPressed(FaceUI.MouseButton.Middle)},MouseButtonClick:function(button){return button===void 0&&(button=0),this.GetMouseButtonState(button)===Microsoft.Xna.Framework.Input.ButtonState.Released&&this.GetMousePreviousButtonState(button)===Microsoft.Xna.Framework.Input.ButtonState.Pressed},AnyMouseButtonClicked:function(){return this.MouseButtonClick(FaceUI.MouseButton.Left)||this.MouseButtonClick(FaceUI.MouseButton.Right)||this.MouseButtonClick(FaceUI.MouseButton.Middle)},GetMouseButtonState:function(button){button===void 0&&(button=0);switch(button){case FaceUI.MouseButton.Left:return this._newMouseState.LeftButton;case FaceUI.MouseButton.Right:return this._newMouseState.RightButton;case FaceUI.MouseButton.Middle:return this._newMouseState.MiddleButton}return Microsoft.Xna.Framework.Input.ButtonState.Released},GetMousePreviousButtonState:function(button){button===void 0&&(button=0);switch(button){case FaceUI.MouseButton.Left:return this._oldMouseState.LeftButton;case FaceUI.MouseButton.Right:return this._oldMouseState.RightButton;case FaceUI.MouseButton.Middle:return this._oldMouseState.MiddleButton}return Microsoft.Xna.Framework.Input.ButtonState.Released}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider.State",{$kind:"nested struct",statics:{methods:{getDefaultValue:function(){return new PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider.State}}},props:{X:0,Y:0,LeftButton:0,RightButton:0,MiddleButton:0,ScrollWheelValue:0},ctors:{ctor:function(){this.$initialize()}},methods:{getHashCode:function(){return Bridge.addHash([1952543928,this.X,this.Y,this.LeftButton,this.RightButton,this.MiddleButton,this.ScrollWheelValue])},equals:function(o){return Bridge.is(o,PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider.State)?Bridge.equals(this.X,o.X)&&Bridge.equals(this.Y,o.Y)&&Bridge.equals(this.LeftButton,o.LeftButton)&&Bridge.equals(this.RightButton,o.RightButton)&&Bridge.equals(this.MiddleButton,o.MiddleButton)&&Bridge.equals(this.ScrollWheelValue,o.ScrollWheelValue):!1},$clone:function(to){var s=to||new PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ResolutionMouseProvider.State;return s.X=this.X,s.Y=this.Y,s.LeftButton=this.LeftButton,s.RightButton=this.RightButton,s.MiddleButton=this.MiddleButton,s.ScrollWheelValue=this.ScrollWheelValue,s}}});Bridge.define("PixelRPG.Base.AdditionalStuff.FaceUI.Utils.ScreenGraphicDeviceWrapper",{inherits:[FaceUI.Utils.GraphicDeviceWrapper],props:{ViewRectangle:null,Viewport:{get:function(){return this.ViewRectangle.$clone()}},GraphicsDevice:null,PresentationParameters:null},ctors:{init:function(){this.ViewRectangle=new Microsoft.Xna.Framework.Rectangle}},methods:{Clear:function(color){},SetRenderTarget:function(target){}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Materials.MaterialDefaults",{statics:{methods:{StencilWrite:function(stencilRef){var $t,$t1;return stencilRef===void 0&&(stencilRef=1),$t=new SpineEngine.Graphics.Materials.Material,$t.DepthStencilState=($t1=new Microsoft.Xna.Framework.Graphics.DepthStencilState.ctor,$t1.StencilEnable=!0,$t1.StencilFunction=Microsoft.Xna.Framework.Graphics.CompareFunction.Always,$t1.StencilPass=Microsoft.Xna.Framework.Graphics.StencilOperation.Replace,$t1.ReferenceStencil=stencilRef,$t1.DepthBufferEnable=!1,$t1),$t},StencilRead:function(stencilRef){var $t,$t1;return stencilRef===void 0&&(stencilRef=1),$t=new SpineEngine.Graphics.Materials.Material,$t.DepthStencilState=($t1=new Microsoft.Xna.Framework.Graphics.DepthStencilState.ctor,$t1.StencilEnable=!0,$t1.StencilFunction=Microsoft.Xna.Framework.Graphics.CompareFunction.Equal,$t1.StencilPass=Microsoft.Xna.Framework.Graphics.StencilOperation.Keep,$t1.ReferenceStencil=stencilRef,$t1.DepthBufferEnable=!1,$t1),$t},BlendDarken:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Min,$t1.AlphaSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.AlphaDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.AlphaBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Min,$t1),$t},BlendLighten:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Max,$t1.AlphaSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.AlphaDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.AlphaBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Max,$t1),$t},BlendScreen:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationColor,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Add,$t1),$t},BlendMultiply:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.DestinationColor,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.Zero,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Add,$t1.AlphaSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.DestinationAlpha,$t1.AlphaDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.Zero,$t1.AlphaBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Add,$t1),$t},BlendMultiply2X:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.DestinationColor,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.SourceColor,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Add,$t1),$t},BlendLinearDodge:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Add,$t1),$t},BlendLinearBurn:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.ReverseSubtract,$t1),$t},BlendDifference:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationColor,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.InverseSourceColor,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.Add,$t1),$t},BlendSubtractive:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.ColorBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.ReverseSubtract,$t1.AlphaSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha,$t1.AlphaDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.AlphaBlendFunction=Microsoft.Xna.Framework.Graphics.BlendFunction.ReverseSubtract,$t1),$t},BlendAdditive:function(){var $t,$t1;return $t=new SpineEngine.Graphics.Materials.Material,$t.BlendState=($t1=new Microsoft.Xna.Framework.Graphics.BlendState.ctor,$t1.ColorSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha,$t1.ColorDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1.AlphaSourceBlend=Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha,$t1.AlphaDestinationBlend=Microsoft.Xna.Framework.Graphics.Blend.One,$t1),$t}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor,SpineEngine.ECS.IScreenResolutionChangedListener],fields:{bloomCombineEffect:null,bloomExtractEffect:null,gaussianBlurEffect:null,renderTarget1:null,renderTarget2:null,renderTargetScale:0,scene:null,sceneRenderTarget:null,settings:null},props:{Settings:{get:function(){return this.settings},set:function(value){this.SetBloomSettings(value)}},RenderTargetScale:{get:function(){return this.renderTargetScale},set:function(value){this.renderTargetScale!==value&&(this.renderTargetScale=value,this.UpdateBlurEffectDeltas())}}},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{init:function(){this.sceneRenderTarget=new Microsoft.Xna.Framework.Rectangle;this.renderTargetScale=1},ctor:function(executionOrder){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor.ctor.call(this,executionOrder);this.settings=PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings.PresetSettings[System.Array.index(3,PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings.PresetSettings)]}},methods:{SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){this.sceneRenderTarget=sceneRenderTarget.$clone();this.UpdateBlurEffectDeltas()},OnAddedToScene:function(scene){this.scene=scene;this.bloomExtractEffect=this.scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.BloomExtractEffect,PixelRPG.Base.AdditionalStuff.Effects.BloomExtractEffect.EffectAssetName);this.bloomCombineEffect=this.scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.BloomCombineEffect,PixelRPG.Base.AdditionalStuff.Effects.BloomCombineEffect.EffectAssetName);this.gaussianBlurEffect=this.scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect,PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect.EffectAssetName);this.SetBloomSettings(this.settings)},SetBloomSettings:function(settings){this.settings=settings;this.bloomExtractEffect.BloomThreshold=this.settings.Threshold;this.bloomCombineEffect.BloomIntensity=this.settings.Intensity;this.bloomCombineEffect.BaseIntensity=this.settings.BaseIntensity;this.bloomCombineEffect.BloomSaturation=this.settings.Saturation;this.bloomCombineEffect.BaseSaturation=this.settings.BaseSaturation;this.gaussianBlurEffect.BlurAmount=this.settings.BlurAmount},UpdateBlurEffectDeltas:function(){this.sceneRenderTarget.Width!==0&&this.sceneRenderTarget.Height!==0&&(this.gaussianBlurEffect.HorizontalBlurDelta=1/(this.sceneRenderTarget.Width*this.renderTargetScale),this.gaussianBlurEffect.VerticalBlurDelta=1/(this.sceneRenderTarget.Height*this.renderTargetScale),this.renderTarget1!=null?this.renderTarget1.Dispose():null,this.renderTarget1=new Microsoft.Xna.Framework.Graphics.RenderTarget2D.$ctor2(SpineEngine.Core.Instance.GraphicsDevice,Bridge.Int.clip32(this.sceneRenderTarget.Width*this.renderTargetScale),Bridge.Int.clip32(this.sceneRenderTarget.Height*this.renderTargetScale),!1,SpineEngine.Core.Instance.Screen.BackBufferFormat,Microsoft.Xna.Framework.Graphics.DepthFormat.None,0,Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents),this.renderTarget2!=null?this.renderTarget2.Dispose():null,this.renderTarget2=new Microsoft.Xna.Framework.Graphics.RenderTarget2D.$ctor2(SpineEngine.Core.Instance.GraphicsDevice,Bridge.Int.clip32(this.sceneRenderTarget.Width*this.renderTargetScale),Bridge.Int.clip32(this.sceneRenderTarget.Height*this.renderTargetScale),!1,SpineEngine.Core.Instance.Screen.BackBufferFormat,Microsoft.Xna.Framework.Graphics.DepthFormat.None,0,Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents))},Render:function(source,destination){this.DrawFullScreenQuad(source,this.renderTarget1,this.bloomExtractEffect);this.gaussianBlurEffect.PrepareForHorizontalBlur();this.DrawFullScreenQuad(this.renderTarget1,this.renderTarget2,this.gaussianBlurEffect);this.gaussianBlurEffect.PrepareForVerticalBlur();this.DrawFullScreenQuad(this.renderTarget2,this.renderTarget1,this.gaussianBlurEffect);SpineEngine.Core.Instance.GraphicsDevice.SamplerStates.setItem(1,Microsoft.Xna.Framework.Graphics.SamplerState.LinearClamp);this.bloomCombineEffect.BaseMap=source;this.DrawFullScreenQuad(this.renderTarget1,destination,this.bloomCombineEffect)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings",{$kind:"nested class",statics:{fields:{PresetSettings:null},ctors:{init:function(){this.PresetSettings=System.Array.init([new PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings(.1,.6,2,1,1,0),new PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings(0,3,1,1,1,1),new PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings(.5,8,2,1,0,1),new PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings(.25,8,1.3,1,1,0),new PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings(0,2,1,.1,1,1),new PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings(.5,2,1,1,1,1)],PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.BloomSettings)}}},fields:{BaseIntensity:0,BaseSaturation:0,BlurAmount:0,Intensity:0,Saturation:0,Threshold:0},ctors:{ctor:function(bloomThreshold,blurAmount,bloomIntensity,baseIntensity,bloomSaturation,baseSaturation){this.$initialize();this.Threshold=bloomThreshold;this.BlurAmount=blurAmount;this.Intensity=bloomIntensity;this.BaseIntensity=baseIntensity;this.Saturation=bloomSaturation;this.BaseSaturation=baseSaturation}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Scenes.LoadingData",{props:{Count:0,Enumerator:null}});Bridge.define("PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1",function(T){return{inherits:[SpineEngine.ECS.Scene],ctors:{ctor:function(loadings,width,height){this.$initialize();SpineEngine.ECS.Scene.ctor.call(this);this.SetDesignResolution(width,height,SpineEngine.Graphics.ResolutionPolicy.SceneResolutionPolicy.None);SpineEngine.Core.Instance.Screen.SetSize(width,height);this.AddRenderer(SpineEngine.Graphics.Renderers.DefaultRenderer,new SpineEngine.Graphics.Renderers.DefaultRenderer);var progress=this.CreateEntity("progress"),progressComponent=progress.AddComponent(PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressComponent(T));progressComponent.Loadings=loadings;progressComponent.TotalItems=System.Linq.Enumerable.from(loadings).sum($asm.$.PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.f1);this.AddEntitySystem(new(PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressUpdateSystem(T)));this.AddEntitySystem(new(PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressMeshGeneratorSystem(T)))}}}});Bridge.ns("PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1",$asm.$);Bridge.apply($asm.$.PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1,{f1:function(a){return a.Count}});Bridge.define("PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressComponent",function(T){return{inherits:[LocomotorECS.Component],$kind:"nested class",fields:{CurrentLoading:0,Loadings:null,TotalItems:0,CurrentItem:0}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressMeshGeneratorSystem",function(T){return{inherits:[LocomotorECS.EntityProcessingSystem],$kind:"nested class",ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressComponent(T)]))}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var progress=entity.GetComponent(PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressComponent(T)),finalRender=entity.GetOrCreateComponent(SpineEngine.ECS.Components.FinalRenderComponent);(finalRender.Batch.Clear(),progress.TotalItems!==0)&&(finalRender.Batch.Draw(SpineEngine.Graphics.Graphic.PixelTexture,new SpineEngine.Maths.RectangleF.$ctor2(99,SpineEngine.Core.Instance.Screen.Height-101|0,SpineEngine.Core.Instance.Screen.Width-198|0,52),SpineEngine.Maths.RectangleF.op_Implicit$1(SpineEngine.Graphics.Graphic.PixelTexture.Bounds.$clone()),Microsoft.Xna.Framework.Color.Black.$clone()),finalRender.Batch.Draw(SpineEngine.Graphics.Graphic.PixelTexture,new SpineEngine.Maths.RectangleF.$ctor2(100,SpineEngine.Core.Instance.Screen.Height-100|0,progress.CurrentItem*(SpineEngine.Core.Instance.Screen.Width-200)/progress.TotalItems,50),SpineEngine.Maths.RectangleF.op_Implicit$1(SpineEngine.Graphics.Graphic.PixelTexture.Bounds.$clone()),Microsoft.Xna.Framework.Color.White.$clone()))}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressUpdateSystem",function(T){return{inherits:[LocomotorECS.EntityProcessingSystem],$kind:"nested class",ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressComponent(T)]))}},methods:{DoAction$1:function(entity,gameTime){var progress,enumerator;if(LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime),progress=entity.GetComponent(PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1.ProgressComponent(T)),!(progress.Loadings.Count<progress.CurrentLoading)){if(progress.Loadings.Count===progress.CurrentLoading){progress.CurrentLoading=progress.CurrentLoading+1|0;SpineEngine.Core.Instance.SwitchScene(Bridge.createInstance(T));return}if(enumerator=progress.Loadings.getItem(progress.CurrentLoading).Enumerator,!enumerator.System$Collections$IEnumerator$moveNext()){progress.CurrentLoading=progress.CurrentLoading+1|0;return}progress.CurrentItem=progress.CurrentItem+1|0}}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.SceneTransitions.CinematicLetterboxTransition",{inherits:[SpineEngine.Graphics.Transitions.SceneTransition],fields:{tmpContentManager:null},props:{Duration:0,Color:{get:function(){return Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.LetterboxEffect).Color.$clone()},set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.LetterboxEffect).Color=value.$clone()}},LetterboxSize:{get:function(){return Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.LetterboxEffect).LetterboxSize},set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.LetterboxEffect).LetterboxSize=value}}},ctors:{init:function(){this.tmpContentManager=new SpineEngine.XnaManagers.GlobalContentManager;this.Duration=2},ctor:function(){this.$initialize();SpineEngine.Graphics.Transitions.SceneTransition.ctor.call(this);this.Effect=this.tmpContentManager.Load(PixelRPG.Base.AdditionalStuff.Effects.LetterboxEffect,PixelRPG.Base.AdditionalStuff.Effects.LetterboxEffect.EffectAssetName)}},methods:{OnBeginTransition:function(){var $step=0,$jumpFromFinally,$returnValue,startAt,elapsed,elapsed1,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:startAt=System.DateTime.getNow();$step=1;continue;case 1:if(System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds()<this.Duration/2){$step=2;continue}$step=4;continue;case 2:return elapsed=System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds(),this.LetterboxSize=SpineEngine.Maths.Easing.Lerps.Ease$8(SpineEngine.Maths.Easing.EaseType.ExpoIn,0,this.PreviousSceneRender.Bounds.Height,elapsed,this.Duration/2),$enumerator.current=null,$step=3,!0;case 3:$step=1;continue;case 4:this.SetNextScene();startAt=System.DateTime.getNow();$step=5;continue;case 5:if(System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds()<this.Duration/2){$step=6;continue}$step=8;continue;case 6:return elapsed1=System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds(),this.LetterboxSize=SpineEngine.Maths.Easing.Lerps.Ease$8(SpineEngine.Maths.Easing.EaseType.ExpoOut,this.PreviousSceneRender.Bounds.Height,0,elapsed1,this.Duration/2),$enumerator.current=null,$step=7,!0;case 7:$step=5;continue;case 8:this.TransitionComplete();this.tmpContentManager.Unload();default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator}}});Bridge.define("PixelRPG.Base.AdditionalStuff.SceneTransitions.FadeTransition",{inherits:[SpineEngine.Graphics.Transitions.SceneTransition],fields:{DelayBeforeFadeInDuration:0,FadeEaseType:0,FadeInDuration:0,FadeOutDuration:0,FadeToColor:null,fromColor:null,toColor:null,color:null},ctors:{init:function(){this.FadeToColor=new Microsoft.Xna.Framework.Color;this.fromColor=new Microsoft.Xna.Framework.Color;this.toColor=new Microsoft.Xna.Framework.Color;this.color=new Microsoft.Xna.Framework.Color;this.DelayBeforeFadeInDuration=.2;this.FadeEaseType=SpineEngine.Maths.Easing.EaseType.Linear;this.FadeInDuration=.8;this.FadeOutDuration=.8;this.FadeToColor=Microsoft.Xna.Framework.Color.Black.$clone();this.fromColor=Microsoft.Xna.Framework.Color.White.$clone();this.toColor=Microsoft.Xna.Framework.Color.Transparent.$clone()}},methods:{OnBeginTransition:function(){var $step=0,$jumpFromFinally,$returnValue,startAt,elapsed,elapsed1,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:startAt=System.DateTime.getNow();$step=1;continue;case 1:if(System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds()<this.FadeOutDuration){$step=2;continue}$step=4;continue;case 2:return elapsed=System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds(),this.color=SpineEngine.Maths.Easing.Lerps.Ease$1(this.FadeEaseType,Bridge.ref(this,"fromColor"),Bridge.ref(this,"toColor"),elapsed,this.FadeOutDuration),$enumerator.current=null,$step=3,!0;case 3:$step=1;continue;case 4:return this.SetNextScene(),$enumerator.current=SpineEngine.GlobalManagers.Coroutines.DefaultCoroutines.Wait(this.DelayBeforeFadeInDuration),$step=5,!0;case 5:startAt=System.DateTime.getNow();$step=6;continue;case 6:if(System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds()<this.FadeInDuration){$step=7;continue}$step=9;continue;case 7:return elapsed1=System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds(),this.color=SpineEngine.Maths.Easing.Lerps.Ease$1(SpineEngine.Maths.Easing.EaseHelper.OppositeEaseType(this.FadeEaseType),Bridge.ref(this,"toColor"),Bridge.ref(this,"fromColor"),elapsed1,this.FadeInDuration),$enumerator.current=null,$step=8,!0;case 8:$step=6;continue;case 9:this.TransitionComplete();default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator},Render:function(){this.Batch.Clear();this.Batch.Draw(this.PreviousSceneRender,SpineEngine.Maths.RectangleF.op_Implicit$1(this.PreviousSceneRender.Bounds.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(this.PreviousSceneRender.Bounds.$clone()),this.color.$clone(),0);this.Material.Effect=this.Effect;SpineEngine.Graphics.Graphic.Draw(null,Microsoft.Xna.Framework.Color.Black.$clone(),this.Batch,this.Material)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.SceneTransitions.SquaresTransition",{inherits:[SpineEngine.Graphics.Transitions.SceneTransition],fields:{tmpContentManager:null,DelayBeforeSquaresInDuration:0,EaseType:0,SquaresInDuration:0,SquaresOutDuration:0},props:{SquareColor:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect).Color=value.$clone()}},Smoothness:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect).Smoothness=value}},Size:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect).Size=value.$clone()}}},ctors:{init:function(){this.tmpContentManager=new SpineEngine.XnaManagers.GlobalContentManager;this.DelayBeforeSquaresInDuration=0;this.EaseType=SpineEngine.Maths.Easing.EaseType.QuartOut;this.SquaresInDuration=.6;this.SquaresOutDuration=.6},ctor:function(){this.$initialize();SpineEngine.Graphics.Transitions.SceneTransition.ctor.call(this);this.Effect=this.tmpContentManager.Load(PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect,PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect.EffectAssetName);this.SquareColor=Microsoft.Xna.Framework.Color.Black.$clone();this.Smoothness=.5;var aspectRatio=SpineEngine.Core.Instance.Screen.Width/SpineEngine.Core.Instance.Screen.Height;this.Size=new Microsoft.Xna.Framework.Vector2.$ctor2(30,30/aspectRatio)}},methods:{OnBeginTransition:function(){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:return $enumerator.current=this.TickEffectProgressProperty(Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect),this.SquaresInDuration,this.EaseType),$step=1,!0;case 1:return this.SetNextScene(),$enumerator.current=SpineEngine.GlobalManagers.Coroutines.DefaultCoroutines.Wait(this.DelayBeforeSquaresInDuration),$step=2,!0;case 2:return $enumerator.current=this.TickEffectProgressProperty(Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.SquaresEffect),this.SquaresOutDuration,SpineEngine.Maths.Easing.EaseHelper.OppositeEaseType(this.EaseType),!0),$step=3,!0;case 3:this.TransitionComplete();this.Effect.Dispose();this.tmpContentManager.Unload();default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator}}});Bridge.define("PixelRPG.Base.AdditionalStuff.SceneTransitions.TextureWipeTransition",{inherits:[SpineEngine.Graphics.Transitions.SceneTransition],fields:{tmpContentManager:null,Duration:0,EaseType:0},props:{Opacity:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.TextureWipeEffect).Opacity=value}},WipeColor:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.TextureWipeEffect).Color=value.$clone()}},TransitionTexture:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.TextureWipeEffect).Texture=value}},UseRedGreenChannelsForDistortion:{set:function(value){this.Effect.CurrentTechnique=this.Effect.Techniques.getItem$1(value?"TextureWipeWithDistort":"TextureWipe")}}},ctors:{init:function(){this.tmpContentManager=new SpineEngine.XnaManagers.GlobalContentManager;this.Duration=1;this.EaseType=SpineEngine.Maths.Easing.EaseType.Linear},ctor:function(transitionTexture){this.$initialize();SpineEngine.Graphics.Transitions.SceneTransition.ctor.call(this);this.Effect=this.tmpContentManager.Load(PixelRPG.Base.AdditionalStuff.Effects.TextureWipeEffect,PixelRPG.Base.AdditionalStuff.Effects.TextureWipeEffect.EffectAssetName);this.Opacity=1;this.WipeColor=Microsoft.Xna.Framework.Color.Black.$clone();this.TransitionTexture=transitionTexture}},methods:{OnBeginTransition:function(){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:return $enumerator.current=this.TickEffectProgressProperty(Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.TextureWipeEffect),this.Duration,this.EaseType),$step=1,!0;case 1:this.SetNextScene();this.TransitionComplete();this.tmpContentManager.Unload();default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator}}});Bridge.define("PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition",{inherits:[SpineEngine.Graphics.Transitions.SceneTransition],fields:{destinationRect:null,Duration:0,finalRenderRect:null,TransitionEaseType:0},ctors:{init:function(){this.destinationRect=new Microsoft.Xna.Framework.Rectangle;this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle;this.Duration=1;this.TransitionEaseType=SpineEngine.Maths.Easing.EaseType.QuartIn},ctor:function(transitionType){transitionType===void 0&&(transitionType=0);this.$initialize();SpineEngine.Graphics.Transitions.SceneTransition.ctor.call(this);this.destinationRect=this.PreviousSceneRender.Bounds.$clone();switch(transitionType){case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.ZoomOut:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(Bridge.Int.div(SpineEngine.Core.Instance.Screen.Width,2)|0,Bridge.Int.div(SpineEngine.Core.Instance.Screen.Height,2)|0,0,0);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.ZoomIn:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(Bridge.Int.mul(-SpineEngine.Core.Instance.Screen.Width|0,5),Bridge.Int.mul(-SpineEngine.Core.Instance.Screen.Height|0,5),Bridge.Int.mul(this.destinationRect.Width,10),Bridge.Int.mul(this.destinationRect.Height,10));break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideRight:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(SpineEngine.Core.Instance.Screen.Width,0,this.destinationRect.Width,this.destinationRect.Height);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideLeft:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(-SpineEngine.Core.Instance.Screen.Width|0,0,this.destinationRect.Width,this.destinationRect.Height);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideUp:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(0,-SpineEngine.Core.Instance.Screen.Height|0,this.destinationRect.Width,this.destinationRect.Height);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideDown:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(0,SpineEngine.Core.Instance.Screen.Height,this.destinationRect.Width,this.destinationRect.Height);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideBottomRight:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(SpineEngine.Core.Instance.Screen.Width,SpineEngine.Core.Instance.Screen.Height,this.destinationRect.Width,this.destinationRect.Height);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideBottomLeft:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(-SpineEngine.Core.Instance.Screen.Width|0,SpineEngine.Core.Instance.Screen.Height,this.destinationRect.Width,this.destinationRect.Height);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideTopRight:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(SpineEngine.Core.Instance.Screen.Width,-SpineEngine.Core.Instance.Screen.Height|0,this.destinationRect.Width,this.destinationRect.Height);break;case PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType.SlideTopLeft:this.finalRenderRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(-SpineEngine.Core.Instance.Screen.Width|0,-SpineEngine.Core.Instance.Screen.Height|0,this.destinationRect.Width,this.destinationRect.Height);break}}},methods:{OnBeginTransition:function(){var $step=0,$jumpFromFinally,$returnValue,startAt,elapsed,elapsed1,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:return $enumerator.current=null,$step=1,!0;case 1:startAt=System.DateTime.getNow();$step=2;continue;case 2:if(System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds()<this.Duration){$step=3;continue}$step=5;continue;case 3:return elapsed=System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds(),this.destinationRect=SpineEngine.Maths.Easing.Lerps.Ease$3(this.TransitionEaseType,this.PreviousSceneRender.Bounds.$clone(),this.finalRenderRect.$clone(),elapsed,this.Duration),$enumerator.current=null,$step=4,!0;case 4:$step=2;continue;case 5:this.SetNextScene();startAt=System.DateTime.getNow();$step=6;continue;case 6:if(System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds()<this.Duration){$step=7;continue}$step=9;continue;case 7:return elapsed1=System.DateTime.subdd(System.DateTime.getNow(),startAt).getTotalSeconds(),this.destinationRect=SpineEngine.Maths.Easing.Lerps.Ease$3(this.TransitionEaseType,this.finalRenderRect.$clone(),this.PreviousSceneRender.Bounds.$clone(),elapsed1,this.Duration),$enumerator.current=null,$step=8,!0;case 8:$step=6;continue;case 9:this.TransitionComplete();default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator},Render:function(){this.Batch.Clear();this.Batch.Draw(this.PreviousSceneRender,SpineEngine.Maths.RectangleF.op_Implicit$1(this.destinationRect.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(this.PreviousSceneRender.Bounds.$clone()),Microsoft.Xna.Framework.Color.White.$clone(),0);this.Material.Effect=this.Effect;SpineEngine.Graphics.Graphic.Draw(null,Microsoft.Xna.Framework.Color.Black.$clone(),this.Batch,this.Material)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.SceneTransitions.TransformTransition.TransformTransitionType",{$kind:"nested enum",statics:{fields:{ZoomOut:0,ZoomIn:1,SlideRight:2,SlideLeft:3,SlideUp:4,SlideDown:5,SlideBottomRight:6,SlideBottomLeft:7,SlideTopRight:8,SlideTopLeft:9}}});Bridge.define("PixelRPG.Base.AdditionalStuff.SceneTransitions.WindTransition",{inherits:[SpineEngine.Graphics.Transitions.SceneTransition],fields:{tmpContentManager:null,Duration:0,EaseType:0},props:{WindSegments:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.WindEffect).Segments=value}},Size:{set:function(value){Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.WindEffect).Size=value}}},ctors:{init:function(){this.tmpContentManager=new SpineEngine.XnaManagers.GlobalContentManager;this.Duration=1;this.EaseType=SpineEngine.Maths.Easing.EaseType.QuartOut},ctor:function(){this.$initialize();SpineEngine.Graphics.Transitions.SceneTransition.ctor.call(this);this.Effect=this.tmpContentManager.Load(PixelRPG.Base.AdditionalStuff.Effects.WindEffect,PixelRPG.Base.AdditionalStuff.Effects.WindEffect.EffectAssetName);this.Size=.3;this.WindSegments=100}},methods:{OnBeginTransition:function(){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:return $enumerator.current=this.TickEffectProgressProperty(Bridge.cast(this.Effect,PixelRPG.Base.AdditionalStuff.Effects.WindEffect),this.Duration,this.EaseType),$step=1,!0;case 1:this.SetNextScene();this.TransitionComplete();this.tmpContentManager.Unload();default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent",{inherits:[LocomotorECS.Component],fields:{LayerIndicesToRender:null},props:{TiledMap:null},ctors:{ctor:function(tiledMap){this.$initialize();LocomotorECS.Component.ctor.call(this);this.TiledMap=tiledMap}},methods:{SetLayerToRender:function(layerName){this.LayerIndicesToRender=System.Array.init(1,0,System.Int32);this.LayerIndicesToRender[System.Array.index(0,this.LayerIndicesToRender)]=this.TiledMap.GetLayerIndex(layerName)},SetLayersToRender:function(layerNames){layerNames===void 0&&(layerNames=[]);this.LayerIndicesToRender=System.Array.init(layerNames.length,0,System.Int32);for(var i=0;i<layerNames.length;i=i+1|0)this.LayerIndicesToRender[System.Array.index(i,this.LayerIndicesToRender)]=this.TiledMap.GetLayerIndex(layerNames[System.Array.index(i,layerNames)])}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.ECS.EntitySystems.TiledMapMeshGeneratorSystem",{inherits:[LocomotorECS.EntityProcessingSystem],fields:{scene:null},ctors:{ctor:function(scene){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent]));this.scene=scene}},methods:{DoAction$1:function(entity,gameTime){var $t,$t1,transformMatrix;LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var map=entity.GetComponent(PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent),depth=($t=($t1=entity.GetComponent(SpineEngine.ECS.Components.DepthLayerComponent))!=null?$t1.Depth:null,$t!=null?$t:0),finalRender=entity.GetComponent(SpineEngine.ECS.Components.FinalRenderComponent);finalRender==null&&(finalRender=entity.AddComponent(SpineEngine.ECS.Components.FinalRenderComponent));finalRender.Batch.Clear();transformMatrix=SpineEngine.Maths.TransformationUtils.GetTransformation(entity).LocalTransformMatrix.$clone();this.Draw(map,depth,finalRender.Batch,transformMatrix.$clone())},Draw:function(map,layerDepth,batch,transformMatrix){var i,layer,y,x,tile,destRect,meshItem;if(map.TiledMap.Orientation!==PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledMapOrientation.Orthogonal)throw new System.NotImplementedException.ctor;for(i=0;i<map.TiledMap.Layers.Count;i=i+1|0)if(map.TiledMap.Layers.getItem(i).Visible&&(map.LayerIndicesToRender==null||System.Array.contains(map.LayerIndicesToRender,i,System.Int32)))for(layer=Bridge.cast(map.TiledMap.Layers.getItem(i),PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer),y=0;y<layer.Height;y=y+1|0)for(x=0;x<layer.Width;x=x+1|0)if(tile={v:layer.GetTile(x,y)},tile.v!=null){(tile.v.TileSet==null||tile.v.TileSetTile==null||tile.v.OldId!==tile.v.Id)&&(tile.v.OldId=tile.v.Id,tile.v.TileSet=System.Linq.Enumerable.from(map.TiledMap.TileSets).first(function($me,tile){return function(a){return System.Linq.Enumerable.from(a.Tiles).any(function(b){return(b.Id+a.FirstGid|0)===tile.v.Id})}}(this,tile)),tile.v.TileSetTile=System.Linq.Enumerable.from(tile.v.TileSet.Tiles).first(function($me,tile){return function(b){return(b.Id+tile.v.TileSet.FirstGid|0)===tile.v.Id}}(this,tile)),tile.v.RenderTileSetTile=tile.v.TileSetTile,tile.v.CurrentFrame=0,tile.v.ElapsedTime=0);var tx=Bridge.Int.mul(x,map.TiledMap.TileWidth),ty=Bridge.Int.mul(y,map.TiledMap.TileHeight),rotation=0,spriteEffects=Microsoft.Xna.Framework.Graphics.SpriteEffects.None;tile.v.FlippedHorizonally&&(spriteEffects|=Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally);tile.v.FlippedVertically&&(spriteEffects|=Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically);tile.v.FlippedDiagonally&&(tile.v.FlippedHorizonally&&tile.v.FlippedVertically?(spriteEffects^=Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically,rotation=Microsoft.Xna.Framework.MathHelper.PiOver2,tx=tx+(map.TiledMap.TileHeight+(tile.v.RenderTileSetTile.SourceRect.Height-map.TiledMap.TileHeight|0)|0)|0,ty=ty-(tile.v.RenderTileSetTile.SourceRect.Width-map.TiledMap.TileWidth|0)|0):tile.v.FlippedHorizonally?(spriteEffects^=Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically,rotation=-1.57079637,ty=ty+map.TiledMap.TileHeight|0):tile.v.FlippedVertically?(spriteEffects^=Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally,rotation=Microsoft.Xna.Framework.MathHelper.PiOver2,tx=tx+(map.TiledMap.TileWidth+(tile.v.RenderTileSetTile.SourceRect.Height-map.TiledMap.TileHeight|0)|0)|0,ty=ty+(map.TiledMap.TileWidth-tile.v.RenderTileSetTile.SourceRect.Width|0)|0):(spriteEffects^=Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally,rotation=-1.57079637,ty=ty+map.TiledMap.TileHeight|0));rotation===0&&(ty=ty+(map.TiledMap.TileHeight-tile.v.RenderTileSetTile.SourceRect.Height|0)|0);destRect=tile.v.RenderTileSetTile.SourceRect.$clone();destRect.Location=new Microsoft.Xna.Framework.Point.$ctor2(0,0);meshItem=batch.Draw(tile.v.TileSet.ImageTexture,SpineEngine.Maths.RectangleF.op_Implicit$1(destRect.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(tile.v.RenderTileSetTile.SourceRect.$clone()),Microsoft.Xna.Framework.Color.White.$clone(),layerDepth);meshItem.RotateMesh$1(rotation);meshItem.ApplyEffectToMesh(spriteEffects);meshItem.MoveMesh(new Microsoft.Xna.Framework.Vector3.$ctor3(tx+layer.Offset.X,ty+layer.Offset.Y,0));meshItem.ApplyTransformMesh(transformMatrix.$clone())}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.ECS.EntitySystems.TiledMapUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent]))}},methods:{DoAction$1:function(entity,gameTime){var $t,map,i,layer,j,tile,tileId;for(LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime),map=entity.GetComponent(PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent),i=0;i<map.TiledMap.Layers.Count;i=i+1|0)for(layer=Bridge.cast(map.TiledMap.Layers.getItem(i),PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer),j=0;j<layer.Tiles.length;j=j+1|0)(tile=layer.Tiles[System.Array.index(j,layer.Tiles)],(tile!=null&&($t=tile.TileSetTile)!=null?$t.AnimationFrames:null)!=null&&tile.TileSet!=null)&&(tile.ElapsedTime+=gameTime.getMilliseconds(),tile.ElapsedTime>tile.TileSetTile.AnimationFrames.getItem(tile.CurrentFrame).Duration)&&(tile.CurrentFrame=SpineEngine.Maths.Mathf.IncrementWithWrap(tile.CurrentFrame,tile.TileSetTile.AnimationFrames.Count),tile.ElapsedTime=0,tileId={v:tile.TileSetTile.AnimationFrames.getItem(tile.CurrentFrame).TileId},tile.RenderTileSetTile=System.Linq.Enumerable.from(tile.TileSet.Tiles).first(function($me,tileId){return function(a){return a.Id===tileId.v}}(this,tileId)))}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledLayer",{fields:{Offset:null,Name:null,Properties:null,Visible:!1,Opacity:0},ctors:{init:function(){this.Offset=new Microsoft.Xna.Framework.Vector2;this.Properties=new(System.Collections.Generic.Dictionary$2(System.String,System.String));this.Visible=!0}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledLayerType",{$kind:"enum",statics:{fields:{Tile:0,Image:1}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledMap",{fields:{FirstGid:0,Width:0,Height:0,TileWidth:0,TileHeight:0,BackgroundColor:null,RenderOrder:0,Orientation:0,Properties:null,Layers:null,ObjectGroups:null,TileSets:null},ctors:{init:function(){this.Properties=new(System.Collections.Generic.Dictionary$2(System.String,System.String));this.Layers=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledLayer).ctor);this.ObjectGroups=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObjectGroup).ctor);this.TileSets=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSet).ctor)}},methods:{GetLayerIndex:function(name){for(var i=0;i<this.Layers.Count;i=i+1|0)if(Bridge.referenceEquals(this.Layers.getItem(i).Name,name))return i;throw new System.Exception("could not find the layer: "+(name||""));},GetLayer:function(name){for(var i=0;i<this.Layers.Count;i=i+1|0)if(Bridge.referenceEquals(this.Layers.getItem(i).Name,name))return this.Layers.getItem(i);return null},GetObjectGroup:function(name){for(var i=0;i<this.ObjectGroups.Count;i=i+1|0)if(Bridge.referenceEquals(this.ObjectGroups.getItem(i).Name,name))return this.ObjectGroups.getItem(i);return null},WorldToTilePosition:function(pos,clampToTilemapBounds){return clampToTilemapBounds===void 0&&(clampToTilemapBounds=!0),new Microsoft.Xna.Framework.Point.$ctor2(this.WorldToTilePositionX(pos.X,clampToTilemapBounds),this.WorldToTilePositionY(pos.Y,clampToTilemapBounds))},WorldToTilePositionX:function(x,clampToTilemapBounds){clampToTilemapBounds===void 0&&(clampToTilemapBounds=!0);var tileX=SpineEngine.Maths.Mathf.FastFloorToInt(x/this.TileWidth);return clampToTilemapBounds?SpineEngine.Maths.Mathf.Clamp(tileX,0,this.Width-1|0):tileX},WorldToTilePositionY:function(y,clampToTilemapBounds){clampToTilemapBounds===void 0&&(clampToTilemapBounds=!0);var tileY=SpineEngine.Maths.Mathf.FastFloorToInt(y/this.TileHeight);return clampToTilemapBounds?SpineEngine.Maths.Mathf.Clamp(tileY,0,this.Height-1|0):tileY},TileToWorldPositionX:function(x){return Bridge.Int.mul(x,this.TileWidth)},TileToWorldPositionY:function(y){return Bridge.Int.mul(y,this.TileHeight)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledMapOrientation",{$kind:"enum",statics:{fields:{Orthogonal:1,Isometric:2,Staggered:3}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObject",{fields:{Id:0,Name:null,Type:null,X:0,Y:0,Width:0,Height:0,Rotation:0,Gid:0,Visible:!1,TiledObjectType:0,ObjectType:null,PolyPoints:null,Properties:null},ctors:{init:function(){this.PolyPoints=new(System.Collections.Generic.List$1(Microsoft.Xna.Framework.Vector2).ctor);this.Properties=new(System.Collections.Generic.Dictionary$2(System.String,System.String))}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObject.TiledObjectTypes",{$kind:"nested enum",statics:{fields:{None:0,Ellipse:1,Image:2,Polygon:3,Polyline:4}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObjectGroup",{fields:{Name:null,Color:null,Opacity:0,Visible:!1,Properties:null,Objects:null},ctors:{init:function(){this.Color=new Microsoft.Xna.Framework.Color;this.Properties=new(System.Collections.Generic.Dictionary$2(System.String,System.String))}},methods:{ObjectWithName:function(name){for(var i=0;i<this.Objects.Count;i=i+1|0)if(Bridge.referenceEquals(this.Objects.getItem(i).Name,name))return this.Objects.getItem(i);return null},ObjectsWithName:function(name){for(var list=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObject).ctor),i=0;i<this.Objects.Count;i=i+1|0)Bridge.referenceEquals(this.Objects.getItem(i).Name,name)&&list.add(this.Objects.getItem(i));return list},ObjectsWithType:function(type){for(var list=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObject).ctor),i=0;i<this.Objects.Count;i=i+1|0)Bridge.referenceEquals(this.Objects.getItem(i).Type,type)&&list.add(this.Objects.getItem(i));return list}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledRenderOrder",{$kind:"enum",statics:{fields:{RightDown:0,RightUp:1,LeftDown:2,LeftUp:3}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile",{fields:{Id:0,FlippedHorizonally:!1,FlippedVertically:!1,FlippedDiagonally:!1,OldId:0,RenderTileSetTile:null,ElapsedTime:0,CurrentFrame:0},props:{TileSet:null,TileSetTile:null}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSet",{statics:{methods:{Build:function(imageWidth,imageHeight,tileWidth,tileHeight,spacing,margin,columns){var $t,tileSet,id,y,column,x;for(spacing===void 0&&(spacing=2),margin===void 0&&(margin=2),columns===void 0&&(columns=2),tileSet=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSet,tileSet.Spacing=spacing,tileSet.Margin=margin,id=0,y=margin;y<(imageHeight-margin|0);y=y+(tileHeight+spacing|0)|0)for(column=0,x=margin;x<(imageWidth-margin|0);x=x+(tileWidth+spacing|0)|0)if(tileSet.Tiles.add(($t=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSetTile,$t.Id=id,$t.SourceRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(x,y,tileWidth,tileHeight),$t)),id=id+1|0,(column=column+1|0)>=columns)break;return tileSet}}},fields:{Spacing:0,Margin:0,Properties:null,Tiles:null,FirstGid:0,Image:null,ImageTexture:null},ctors:{init:function(){this.Properties=new(System.Collections.Generic.Dictionary$2(System.String,System.String));this.Tiles=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSetTile).ctor)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSetAnimationFrame",{fields:{TileId:0,Duration:0}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSetTile",{fields:{Id:0,AnimationFrames:null,Properties:null,SourceRect:null},ctors:{init:function(){this.SourceRect=new Microsoft.Xna.Framework.Rectangle;this.Properties=new(System.Collections.Generic.Dictionary$2(System.String,System.String))}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TurnBase.Components.ApplyTurnComponent",{inherits:[LocomotorECS.Component],fields:{TurnsData:null,TurnApplied:!1},ctors:{init:function(){this.TurnsData=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TurnBase.ITurnData).ctor);this.TurnApplied=!0}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent",{inherits:[LocomotorECS.Component],fields:{Players:null,SwitchType:0,CurrentPlayer:0,WaitingForTurnApply:!1},ctors:{ctor:function(switchType,players){players===void 0&&(players=[]);this.$initialize();LocomotorECS.Component.ctor.call(this);this.SwitchType=switchType;this.Players=players;this.Players[System.Array.index(0,this.Players)].TurnMade=!1;for(var i=1;i<this.Players.length;i=i+1|0)this.Players[System.Array.index(i,this.Players)].TurnMade=this.SwitchType===PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent.PlayerSwitchType.OneByOne}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent.PlayerSwitchType",{$kind:"nested enum",statics:{fields:{OneByOne:0,AllAtOnce:1}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerTurnComponent",{inherits:[LocomotorECS.Component],fields:{TurnData:null,TurnMade:!1}});Bridge.define("PixelRPG.Base.AdditionalStuff.TurnBase.EntitySystems.TurnSelectorUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.TurnBase.Components.ApplyTurnComponent,PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent]))}},methods:{DoAction$1:function(entity,gameTime){var applyTurn,switcher,i,playerTurn;if(LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime),applyTurn=entity.GetComponent(PixelRPG.Base.AdditionalStuff.TurnBase.Components.ApplyTurnComponent),applyTurn.TurnApplied){if(switcher=entity.GetComponent(PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent),switcher.WaitingForTurnApply){switcher.WaitingForTurnApply=!1;applyTurn.TurnsData.clear();switch(switcher.SwitchType){case PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent.PlayerSwitchType.OneByOne:switcher.Players[System.Array.index(switcher.CurrentPlayer,switcher.Players)].TurnMade=!1;break;case PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent.PlayerSwitchType.AllAtOnce:for(i=0;i<switcher.Players.length;i=i+1|0)switcher.Players[System.Array.index(i,switcher.Players)].TurnMade=!1;break}}if(playerTurn=switcher.Players[System.Array.index(switcher.CurrentPlayer,switcher.Players)],playerTurn.TurnMade){switch(switcher.SwitchType){case PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent.PlayerSwitchType.OneByOne:applyTurn.TurnApplied=!1;switcher.WaitingForTurnApply=!0;break;case PixelRPG.Base.AdditionalStuff.TurnBase.Components.PlayerSwitcherComponent.PlayerSwitchType.AllAtOnce:switcher.CurrentPlayer===(switcher.Players.length-1|0)&&(applyTurn.TurnApplied=!1,switcher.WaitingForTurnApply=!0);break}applyTurn.TurnsData.add(playerTurn.TurnData);switcher.CurrentPlayer=(switcher.CurrentPlayer+1|0)%switcher.Players.length}}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TurnBase.ITurnData",{$kind:"interface"});Bridge.define("PixelRPG.Base.Assets.ItemSprite",{fields:{Sprite:null},ctors:{ctor:function(content,itemType){this.$initialize();var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.items),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Sprite=frames.getItem(itemType)}}});Bridge.define("PixelRPG.Base.Assets.ItemSpriteSheet",{$kind:"enum",statics:{fields:{WEAPON:5,ARMOR:6,RING:7,SMTH:127,SKELETON_KEY:8,IRON_KEY:9,GOLDEN_KEY:10,SHORT_SWORD:2,KNUCKLEDUSTER:16,QUARTERSTAFF:17,MACE:18,DAGGER:19,SWORD:20,LONG_SWORD:21,BATTLE_AXE:22,WAR_HAMMER:23,SPEAR:29,GLAIVE:30,SHURIKEN:15,DART:31,BOOMERANG:106,TOMAHAWK:107,INCENDIARY_DART:108,CURARE_DART:109,JAVELIN:110,ARMOR_CLOTH:24,ARMOR_LEATHER:25,ARMOR_MAIL:26,ARMOR_SCALE:27,ARMOR_PLATE:28,ARMOR_ROGUE:96,ARMOR_WARRIOR:97,ARMOR_MAGE:98,ARMOR_HUNTRESS:99,WAND_MAGIC_MISSILE:3,WAND_HOLLY:48,WAND_YEW:49,WAND_EBONY:50,WAND_CHERRY:51,WAND_TEAK:52,WAND_ROWAN:53,WAND_WILLOW:54,WAND_MAHOGANY:55,WAND_BAMBOO:68,WAND_PURPLEHEART:69,WAND_OAK:70,WAND_BIRCH:71,RING_DIAMOND:32,RING_OPAL:33,RING_GARNET:34,RING_RUBY:35,RING_AMETHYST:36,RING_TOPAZ:37,RING_ONYX:38,RING_TOURMALINE:39,RING_EMERALD:72,RING_SAPPHIRE:73,RING_QUARTZ:74,RING_AGATE:75,POTION_TURQUOISE:56,POTION_CRIMSON:57,POTION_AZURE:58,POTION_JADE:59,POTION_GOLDEN:60,POTION_MAGENTA:61,POTION_CHARCOAL:62,POTION_IVORY:63,POTION_AMBER:64,POTION_BISTRE:65,POTION_INDIGO:66,POTION_SILVER:67,SCROLL_KAUNAN:40,SCROLL_SOWILO:41,SCROLL_LAGUZ:42,SCROLL_YNGVI:43,SCROLL_GYFU:44,SCROLL_RAIDO:45,SCROLL_ISAZ:46,SCROLL_MANNAZ:47,SCROLL_NAUDIZ:76,SCROLL_BERKANAN:77,SCROLL_ODAL:78,SCROLL_TIWAZ:79,SCROLL_WIPE_OUT:117,SEED_FIREBLOOM:88,SEED_ICECAP:89,SEED_SORROWMOSS:90,SEED_DREAMWEED:91,SEED_SUNGRASS:92,SEED_EARTHROOT:93,SEED_FADELEAF:94,SEED_ROTBERRY:95,ROSE:100,PICKAXE:101,ORE:102,SKULL:103,PHANTOM:118,DUST:121,TOKEN:122,BONES:0,CHEST:11,LOCKED_CHEST:12,TOMB:13,CRYSTAL_CHEST:105,HIDDEN:119,RATION:4,PASTY:112,MEAT:113,STEAK:114,OVERPRICED:115,CARPACCIO:116,POUCH:83,HOLDER:104,HOLSTER:111,KEYRING:126,SPARK_UPGRADE:117,SPARK_ENCHANT:118,ANKH:1,GOLD:14,STYLUS:80,DEWDROP:81,MASTERY:82,TORCH:84,BEACON:85,KIT:86,AMULET:87,VIAL:120,WEIGHT:123,BOMB:124,HONEYPOT:125}}});Bridge.define("PixelRPG.Base.Assets.UnitState",{$kind:"enum",statics:{fields:{Idle:0,Run:1,Dead:2}}});Bridge.define("PixelRPG.Base.Components.GameState.ISkill",{$kind:"interface"});Bridge.define("PixelRPG.Base.Components.GameState.Player",{fields:{PlayerId:0,Units:null,PlayerName:null,LevelScore:0,TotalScore:0}});Bridge.define("PixelRPG.Base.Components.GameState.Unit",{fields:{UnitType:0,UnitId:0,Position:null,VisionRange:0,MoveRange:0,MaxHp:0,Hp:0,AttackDistance:0,AttackRadius:0,AttackDamage:0,AttackFriendlyFire:!1},ctors:{init:function(){this.Position=new Microsoft.Xna.Framework.Point;this.VisionRange=5;this.MoveRange=2;this.MaxHp=10;this.Hp=10;this.AttackDistance=0;this.AttackRadius=1;this.AttackDamage=2;this.AttackFriendlyFire=!1}}});Bridge.define("PixelRPG.Base.Components.GameState.UnitUtils",{statics:{fields:{UnitTypeTemplates:null,UnitTypeTemplateList:null,SupporteSkills:null},ctors:{init:function(){this.UnitTypeTemplates=$asm.$.PixelRPG.Base.Components.GameState.UnitUtils.f1(new(System.Collections.Generic.Dictionary$2(PixelRPG.Base.Components.GameState.UnitUtils.UnitType,PixelRPG.Base.Components.GameState.Unit)));this.UnitTypeTemplateList=new(System.Collections.Generic.List$1(PixelRPG.Base.Components.GameState.UnitUtils.UnitType).ctor);this.SupporteSkills=$asm.$.PixelRPG.Base.Components.GameState.UnitUtils.f2(new(System.Collections.Generic.Dictionary$2(PixelRPG.Base.Components.GameState.UnitUtils.Skill,PixelRPG.Base.Components.GameState.ISkill)))},ctor:function(){PixelRPG.Base.Components.GameState.UnitUtils.UnitTypeTemplateList.AddRange(PixelRPG.Base.Components.GameState.UnitUtils.UnitTypeTemplates.getKeys())}},methods:{BuildUnit:function(unitType){var unit=new PixelRPG.Base.Components.GameState.Unit,template=PixelRPG.Base.Components.GameState.UnitUtils.UnitTypeTemplates.get(unitType);return unit.UnitType=unitType,unit.UnitId=template.UnitId,unit.Position=template.Position.$clone(),unit.VisionRange=template.VisionRange,unit.MoveRange=template.MoveRange,unit.MaxHp=template.MaxHp,unit.Hp=template.Hp,unit.AttackDistance=template.AttackDistance,unit.AttackRadius=template.AttackRadius,unit.AttackDamage=template.AttackDamage,unit.AttackFriendlyFire=template.AttackFriendlyFire,unit},GetRandomUnit:function(){return PixelRPG.Base.Components.GameState.UnitUtils.BuildUnit(FateRandom.Fate.GlobalFate.Choose$3(PixelRPG.Base.Components.GameState.UnitUtils.UnitType,PixelRPG.Base.Components.GameState.UnitUtils.UnitTypeTemplateList))},ApplySkill:function(player,unit,skill){PixelRPG.Base.Components.GameState.UnitUtils.SupporteSkills.get(skill).PixelRPG$Base$Components$GameState$ISkill$Apply(player,unit)}}}});Bridge.ns("PixelRPG.Base.Components.GameState.UnitUtils",$asm.$);Bridge.apply($asm.$.PixelRPG.Base.Components.GameState.UnitUtils,{f1:function(_o1){var $t;return _o1.add(PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Warrior,($t=new PixelRPG.Base.Components.GameState.Unit,$t.MaxHp=20,$t.Hp=20,$t.AttackDamage=3,$t)),_o1.add(PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Rogue,($t=new PixelRPG.Base.Components.GameState.Unit,$t.AttackRadius=2,$t)),_o1.add(PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Mage,($t=new PixelRPG.Base.Components.GameState.Unit,$t.AttackDistance=3,$t.AttackRadius=2,$t.AttackFriendlyFire=!0,$t)),_o1.add(PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Ranger,($t=new PixelRPG.Base.Components.GameState.Unit,$t.VisionRange=7,$t.AttackDistance=3,$t)),_o1.add(PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Bat,($t=new PixelRPG.Base.Components.GameState.Unit,$t.MoveRange=3,$t.MaxHp=5,$t.Hp=5,$t)),_o1},f2:function(_o2){return _o2.add(PixelRPG.Base.Components.GameState.UnitUtils.Skill.VisionRange,new PixelRPG.Base.Components.GameState.Skills.VisionRangeSkill),_o2.add(PixelRPG.Base.Components.GameState.UnitUtils.Skill.MoveRange,new PixelRPG.Base.Components.GameState.Skills.MoveRangeSkill),_o2}});Bridge.define("PixelRPG.Base.Components.GameState.UnitUtils.Skill",{$kind:"nested enum",statics:{fields:{VisionRange:0,MoveRange:1}}});Bridge.define("PixelRPG.Base.Components.GameState.UnitUtils.UnitType",{$kind:"nested enum",statics:{fields:{Warrior:0,Rogue:1,Mage:2,Ranger:3,Bat:4}}});Bridge.define("PixelRPG.Base.Components.GameStateComponent",{inherits:[LocomotorECS.Component],fields:{Map:null,Doors:null,Players:null,Exit:null,MaxPlayersCount:0,MaxUnitsCount:0,MaxSkillsCount:0,CurrentTurn:null,AtEnd:null},ctors:{init:function(){this.Exit=new Microsoft.Xna.Framework.Point;this.Players=new(System.Collections.Generic.Dictionary$2(System.Int32,PixelRPG.Base.Components.GameState.Player));this.MaxUnitsCount=4;this.MaxSkillsCount=1;this.CurrentTurn=new(System.Collections.Generic.Dictionary$2(System.Int32,System.Collections.Generic.Dictionary$2(System.Int32,PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage)));this.AtEnd=new(System.Collections.Generic.HashSet$1(System.Int64).ctor)}}});Bridge.define("PixelRPG.Base.Components.UnitComponent",{inherits:[LocomotorECS.Component],props:{UnitAnimations:null,State:0}});Bridge.define("PixelRPG.Base.Components.VisiblePlayerComponent",{inherits:[LocomotorECS.Component],fields:{MapEntityName:null,KnownPlayers:null},ctors:{init:function(){this.KnownPlayers=new(System.Collections.Generic.List$1(LocomotorECS.Entity).ctor)},ctor:function(mapEntityName){this.$initialize();LocomotorECS.Component.ctor.call(this);this.MapEntityName=mapEntityName}}});Bridge.define("PixelRPG.Base.ContentPaths",{statics:{fields:{content:null},ctors:{init:function(){this.content="Content"}}}});Bridge.define("PixelRPG.Base.ContentPaths.Assets",{$kind:"nested class",statics:{fields:{amulet:null,arcs1:null,arcs2:null,avatars:null,badges:null,banners:null,buffs:null,chrome:null,dashboard:null,effects:null,exp_bar:null,fireball:null,font15x:null,font1x:null,font25x:null,font2x:null,font3x:null,hp_bar:null,icons:null,items:null,large_buffs:null,locked_badge:null,plants:null,shadow:null,specks:null,spell_icons:null,status_pane:null,surface:null,template:null,test:null,tiles0:null,tiles1:null,tiles2:null,tiles3:null,tiles4:null,tileSetLayer1:null,tileSetWater1:null,toolbar:null,water0:null,water1:null,water2:null,water3:null,water4:null},ctors:{init:function(){this.amulet="assets/amulet";this.arcs1="assets/arcs1";this.arcs2="assets/arcs2";this.avatars="assets/avatars";this.badges="assets/badges";this.banners="assets/banners";this.buffs="assets/buffs";this.chrome="assets/chrome";this.dashboard="assets/dashboard";this.effects="assets/effects";this.exp_bar="assets/exp_bar";this.fireball="assets/fireball";this.font15x="assets/font15x";this.font1x="assets/font1x";this.font25x="assets/font25x";this.font2x="assets/font2x";this.font3x="assets/font3x";this.hp_bar="assets/hp_bar";this.icons="assets/icons";this.items="assets/items";this.large_buffs="assets/large_buffs";this.locked_badge="assets/locked_badge";this.plants="assets/plants";this.shadow="assets/shadow";this.specks="assets/specks";this.spell_icons="assets/spell_icons";this.status_pane="assets/status_pane";this.surface="assets/surface";this.template="assets/template";this.test="assets/test";this.tiles0="assets/tiles0";this.tiles1="assets/tiles1";this.tiles2="assets/tiles2";this.tiles3="assets/tiles3";this.tiles4="assets/tiles4";this.tileSetLayer1="assets/tileSetLayer1";this.tileSetWater1="assets/tileSetWater1";this.toolbar="assets/toolbar";this.water0="assets/water0";this.water1="assets/water1";this.water2="assets/water2";this.water3="assets/water3";this.water4="assets/water4"}}}});Bridge.define("PixelRPG.Base.ContentPaths.Assets.Characters",{$kind:"nested class",statics:{fields:{mage:null,ranger:null,rogue:null,warrior:null},ctors:{init:function(){this.mage="assets/characters/mage";this.ranger="assets/characters/ranger";this.rogue="assets/characters/rogue";this.warrior="assets/characters/warrior"}}}});Bridge.define("PixelRPG.Base.ContentPaths.Assets.Enemy",{$kind:"nested class",statics:{fields:{bat:null,bee:null,brute:null,burning_fist:null,crab:null,dm300:null,elemental:null,eye:null,gnoll:null,golem:null,goo:null,king:null,larva:null,mimic:null,monk:null,pet:null,piranha:null,rat:null,ratking:null,rotting_fist:null,scorpio:null,shaman:null,skeleton:null,spinner:null,statue:null,succubus:null,swarm:null,tengu:null,thief:null,undead:null,warlock:null,wraith:null,yog:null},ctors:{init:function(){this.bat="assets/enemy/bat";this.bee="assets/enemy/bee";this.brute="assets/enemy/brute";this.burning_fist="assets/enemy/burning_fist";this.crab="assets/enemy/crab";this.dm300="assets/enemy/dm300";this.elemental="assets/enemy/elemental";this.eye="assets/enemy/eye";this.gnoll="assets/enemy/gnoll";this.golem="assets/enemy/golem";this.goo="assets/enemy/goo";this.king="assets/enemy/king";this.larva="assets/enemy/larva";this.mimic="assets/enemy/mimic";this.monk="assets/enemy/monk";this.pet="assets/enemy/pet";this.piranha="assets/enemy/piranha";this.rat="assets/enemy/rat";this.ratking="assets/enemy/ratking";this.rotting_fist="assets/enemy/rotting_fist";this.scorpio="assets/enemy/scorpio";this.shaman="assets/enemy/shaman";this.skeleton="assets/enemy/skeleton";this.spinner="assets/enemy/spinner";this.statue="assets/enemy/statue";this.succubus="assets/enemy/succubus";this.swarm="assets/enemy/swarm";this.tengu="assets/enemy/tengu";this.thief="assets/enemy/thief";this.undead="assets/enemy/undead";this.warlock="assets/enemy/warlock";this.wraith="assets/enemy/wraith";this.yog="assets/enemy/yog"}}}});Bridge.define("PixelRPG.Base.ContentPaths.Assets.Neutral",{$kind:"nested class",statics:{fields:{blacksmith:null,demon:null,ghost:null,sheep:null,shopkeeper:null,wandmaker:null},ctors:{init:function(){this.blacksmith="assets/neutral/blacksmith";this.demon="assets/neutral/demon";this.ghost="assets/neutral/ghost";this.sheep="assets/neutral/sheep";this.shopkeeper="assets/neutral/shopkeeper";this.wandmaker="assets/neutral/wandmaker"}}}});Bridge.define("PixelRPG.Base.ContentPaths.Assets.Sounds",{$kind:"nested class",statics:{fields:{snd_alert:null,snd_badge:null,snd_beacon:null,snd_bee:null,snd_blast:null,snd_bones:null,snd_boss:null,snd_burning:null,snd_challenge:null,snd_charms:null,snd_click:null,snd_cursed:null,snd_death:null,snd_degrade:null,snd_descend:null,snd_dewdrop:null,snd_door_open:null,snd_drink:null,snd_eat:null,snd_evoke:null,snd_falling:null,snd_game:null,snd_ghost:null,snd_gold:null,snd_hit:null,snd_item:null,snd_levelup:null,snd_lightning:null,snd_lullaby:null,snd_mastery:null,snd_meld:null,snd_mimic:null,snd_miss:null,snd_plant:null,snd_puff:null,snd_ray:null,snd_read:null,snd_rocks:null,snd_secret:null,snd_shatter:null,snd_step:null,snd_surface:null,snd_teleport:null,snd_theme:null,snd_tomb:null,snd_trap:null,snd_unlock:null,snd_water:null,snd_zap:null},ctors:{init:function(){this.snd_alert="assets/sounds/snd_alert";this.snd_badge="assets/sounds/snd_badge";this.snd_beacon="assets/sounds/snd_beacon";this.snd_bee="assets/sounds/snd_bee";this.snd_blast="assets/sounds/snd_blast";this.snd_bones="assets/sounds/snd_bones";this.snd_boss="assets/sounds/snd_boss";this.snd_burning="assets/sounds/snd_burning";this.snd_challenge="assets/sounds/snd_challenge";this.snd_charms="assets/sounds/snd_charms";this.snd_click="assets/sounds/snd_click";this.snd_cursed="assets/sounds/snd_cursed";this.snd_death="assets/sounds/snd_death";this.snd_degrade="assets/sounds/snd_degrade";this.snd_descend="assets/sounds/snd_descend";this.snd_dewdrop="assets/sounds/snd_dewdrop";this.snd_door_open="assets/sounds/snd_door_open";this.snd_drink="assets/sounds/snd_drink";this.snd_eat="assets/sounds/snd_eat";this.snd_evoke="assets/sounds/snd_evoke";this.snd_falling="assets/sounds/snd_falling";this.snd_game="assets/sounds/snd_game";this.snd_ghost="assets/sounds/snd_ghost";this.snd_gold="assets/sounds/snd_gold";this.snd_hit="assets/sounds/snd_hit";this.snd_item="assets/sounds/snd_item";this.snd_levelup="assets/sounds/snd_levelup";this.snd_lightning="assets/sounds/snd_lightning";this.snd_lullaby="assets/sounds/snd_lullaby";this.snd_mastery="assets/sounds/snd_mastery";this.snd_meld="assets/sounds/snd_meld";this.snd_mimic="assets/sounds/snd_mimic";this.snd_miss="assets/sounds/snd_miss";this.snd_plant="assets/sounds/snd_plant";this.snd_puff="assets/sounds/snd_puff";this.snd_ray="assets/sounds/snd_ray";this.snd_read="assets/sounds/snd_read";this.snd_rocks="assets/sounds/snd_rocks";this.snd_secret="assets/sounds/snd_secret";this.snd_shatter="assets/sounds/snd_shatter";this.snd_step="assets/sounds/snd_step";this.snd_surface="assets/sounds/snd_surface";this.snd_teleport="assets/sounds/snd_teleport";this.snd_theme="assets/sounds/snd_theme";this.snd_tomb="assets/sounds/snd_tomb";this.snd_trap="assets/sounds/snd_trap";this.snd_unlock="assets/sounds/snd_unlock";this.snd_water="assets/sounds/snd_water";this.snd_zap="assets/sounds/snd_zap"}}}});Bridge.define("PixelRPG.Base.EntitySystems.CharSpriteUpdateSystem",{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.Components.UnitComponent]))}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var animation=entity.GetOrCreateComponent(SpineEngine.ECS.Components.AnimationSpriteComponent),charSprites=entity.GetComponent(PixelRPG.Base.Components.UnitComponent);if(!animation.IsPlaying){switch(charSprites.State){case PixelRPG.Base.Assets.UnitState.Idle:animation.Animation=charSprites.UnitAnimations.Idle;animation.Animation.Loop=!1;animation.IsPlaying=!0;break;case PixelRPG.Base.Assets.UnitState.Run:animation.Animation=charSprites.UnitAnimations.Run;animation.Animation.Loop=!1;animation.IsPlaying=!0;break;case PixelRPG.Base.Assets.UnitState.Dead:if(Bridge.referenceEquals(animation.Animation,charSprites.UnitAnimations.Die))return;animation.Animation=charSprites.UnitAnimations.Die;animation.Animation.Loop=!1;animation.IsPlaying=!0;break}animation.IsPlaying=!0}},OnMatchedEntityAdded:function(entity){LocomotorECS.EntityProcessingSystem.prototype.OnMatchedEntityAdded.call(this,entity);var charSprites=entity.GetComponent(PixelRPG.Base.Components.UnitComponent),animation=entity.GetOrCreateComponent(SpineEngine.ECS.Components.AnimationSpriteComponent),sprite=entity.GetOrCreateComponent(SpineEngine.ECS.Components.SpriteComponent);animation.Animation=animation.Animation||charSprites.UnitAnimations.Idle;animation.Animation.Loop=!1;animation.IsPlaying=!0;sprite.Drawable=animation.Animation.Frames.getItem(animation.StartFrame)}}});Bridge.define("PixelRPG.Base.EntitySystems.ServerLogic",{statics:{methods:{BuildCurrentStateForPlayer:function(gameState,player){for(var y,idx,statePlayer,j,b,i,door,$t,result=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.Create(),width=System.Array.getLength(gameState.Map,0),height=System.Array.getLength(gameState.Map,1),x=0;x<width;x=x+1|0)for(y=0;y<height;y=y+1|0)result.Map.add(PixelRPG.Base.EntitySystems.ServerLogic.IsVisible(player,gameState.Exit.X,gameState.Exit.Y,x,y)?gameState.Map.get([x,y]):null);idx=0;$t=Bridge.getEnumerator(gameState.Players.getValues(),PixelRPG.Base.Components.GameState.Player);try{while($t.moveNext()){for(statePlayer=$t.Current,result.AddPlayer(statePlayer.PlayerId,statePlayer.LevelScore,statePlayer.TotalScore),j=0;j<statePlayer.Units.Count;j=j+1|0)(b=statePlayer.Units.getItem(j),PixelRPG.Base.EntitySystems.ServerLogic.IsVisible(player,gameState.Exit.X,gameState.Exit.Y,b.Position.X,b.Position.Y)||player.PlayerId===statePlayer.PlayerId)&&result.AddUnit(idx,b.UnitId,b.Position.X,b.Position.Y,b.Hp);idx=idx+1|0}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}for(PixelRPG.Base.EntitySystems.ServerLogic.IsVisible(player,gameState.Exit.X,gameState.Exit.Y,gameState.Exit.X,gameState.Exit.Y)&&result.SetExit(gameState.Exit.X,gameState.Exit.Y),i=0;i<gameState.Doors.Count;i=i+1|0)(door=gameState.Doors.getItem(i).$clone(),PixelRPG.Base.EntitySystems.ServerLogic.IsVisible(player,gameState.Exit.X,gameState.Exit.Y,door.X,door.Y))&&result.AddDoor(door.X,door.Y);return result},IsVisible:function(fromPlayer,exitX,exitY,x,y){for(var unit,i1,unit1,allDead=!0,i=0;i<fromPlayer.Units.Count;i=i+1|0)(unit=fromPlayer.Units.getItem(i),unit.Hp<=0)||(allDead=!1);if(allDead)return!0;for(i1=0;i1<fromPlayer.Units.Count;i1=i1+1|0)if((unit1=fromPlayer.Units.getItem(i1),!(unit1.Hp<=0))&&(unit1.Position.X===exitX&&unit1.Position.Y===exitY||(Math.abs(x-unit1.Position.X|0)+Math.abs(y-unit1.Position.Y|0)|0)<unit1.VisionRange))return!0;return!1},StartNewGame:function(gameState){var $t,maze,x,y,roomIdx,player,room,i;for(gameState.AtEnd.clear(),maze=(new MazeGenerators.RoomMazeGenerator).Generate(($t=new MazeGenerators.RoomMazeGenerator.Settings,$t.Width=71,$t.Height=41,$t.AdditionalPassages=20,$t.WindingPercent=50,$t.RoomSize=3,$t)),gameState.Map=maze.Regions,gameState.Doors=System.Linq.Enumerable.from(maze.Junctions).select($asm.$.PixelRPG.Base.EntitySystems.ServerLogic.f1).toList(Microsoft.Xna.Framework.Point),x=0;x<System.Array.getLength(gameState.Map,0);x=x+1|0)for(y=0;y<System.Array.getLength(gameState.Map,1);y=y+1|0)gameState.Map.set([x,y],gameState.Map.get([x,y])==null?PixelRPG.Base.Screens.GameSceneConfig.WallRegionValue:PixelRPG.Base.Screens.GameSceneConfig.PathRegionValue);roomIdx=0;$t=Bridge.getEnumerator(gameState.Players);try{while($t.moveNext())for(player=$t.Current,room=maze.Rooms.getItem(roomIdx).$clone(),roomIdx=roomIdx+1|0,player.value.Units.getItem(0).Position=new Microsoft.Xna.Framework.Point.$ctor2((room.X+(Bridge.Int.div(room.Width,2)|0)|0)-1|0,room.Y+(Bridge.Int.div(room.Height,2)|0)|0),player.value.Units.getItem(1).Position=new Microsoft.Xna.Framework.Point.$ctor2((room.X+(Bridge.Int.div(room.Width,2)|0)|0)+1|0,room.Y+(Bridge.Int.div(room.Height,2)|0)|0),player.value.Units.getItem(2).Position=new Microsoft.Xna.Framework.Point.$ctor2(room.X+(Bridge.Int.div(room.Width,2)|0)|0,(room.Y+(Bridge.Int.div(room.Height,2)|0)|0)-1|0),player.value.Units.getItem(3).Position=new Microsoft.Xna.Framework.Point.$ctor2(room.X+(Bridge.Int.div(room.Width,2)|0)|0,(room.Y+(Bridge.Int.div(room.Height,2)|0)|0)+1|0),player.value.LevelScore=0,i=0;i<player.value.Units.Count;i=i+1|0)player.value.Units.getItem(i).Hp=player.value.Units.getItem(i).MaxHp}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}gameState.Exit=new Microsoft.Xna.Framework.Point.$ctor2(maze.Rooms.getItem(maze.Rooms.Count-1|0).$clone().X+(Bridge.Int.div(maze.Rooms.getItem(maze.Rooms.Count-1|0).$clone().Width,2)|0)|0,maze.Rooms.getItem(maze.Rooms.Count-1|0).$clone().Y+(Bridge.Int.div(maze.Rooms.getItem(maze.Rooms.Count-1|0).$clone().Height,2)|0)|0)},GetFullUnitId:function(player,unit){return PixelRPG.Base.EntitySystems.ServerLogic.GetFullUnitId$1(player.PlayerId,unit.UnitId)},GetFullUnitId$1:function(playerId,unitId){return System.Int64(playerId).shl(32).or(System.Int64(unitId).and(System.Int64([-1,0])))}}}});Bridge.ns("PixelRPG.Base.EntitySystems.ServerLogic",$asm.$);Bridge.apply($asm.$.PixelRPG.Base.EntitySystems.ServerLogic,{f1:function(a){return new Microsoft.Xna.Framework.Point.$ctor2(a.X,a.Y)}});Bridge.define("PixelRPG.Base.Game1",{inherits:[SpineEngine.Core],ctors:{ctor:function(){this.$initialize();SpineEngine.Core.ctor.call(this,650,800);this.Window.AllowUserResizing=!0;this.IsMouseVisible=!0}},methods:{Initialize:function(){SpineEngine.Core.prototype.Initialize.call(this);SpineEngine.Core.Instance.SwitchScene(new(PixelRPG.Base.AdditionalStuff.Scenes.LoadingScene$1(PixelRPG.Base.Screens.BasicScene))(Bridge.fn.bind(this,$asm.$.PixelRPG.Base.Game1.f1)(new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.Scenes.LoadingData).ctor)),1200,600))},GetEnumerator:function(content){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new Bridge.GeneratorEnumerator(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:return content.Load(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledMap,PixelRPG.Base.ContentPaths.Assets.template),$enumerator.current=Bridge.box(0,System.Int32),$step=1,!0;case 1:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Characters.warrior),$enumerator.current=Bridge.box(0,System.Int32),$step=2,!0;case 2:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Characters.mage),$enumerator.current=Bridge.box(0,System.Int32),$step=3,!0;case 3:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Characters.ranger),$enumerator.current=Bridge.box(0,System.Int32),$step=4,!0;case 4:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Characters.rogue),$enumerator.current=Bridge.box(0,System.Int32),$step=5,!0;case 5:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.tiles0),$enumerator.current=Bridge.box(0,System.Int32),$step=6,!0;case 6:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.tiles1),$enumerator.current=Bridge.box(0,System.Int32),$step=7,!0;case 7:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.tiles2),$enumerator.current=Bridge.box(0,System.Int32),$step=8,!0;case 8:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.tiles3),$enumerator.current=Bridge.box(0,System.Int32),$step=9,!0;case 9:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.tiles4),$enumerator.current=Bridge.box(0,System.Int32),$step=10,!0;case 10:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.water0),$enumerator.current=Bridge.box(0,System.Int32),$step=11,!0;case 11:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.water1),$enumerator.current=Bridge.box(0,System.Int32),$step=12,!0;case 12:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.water2),$enumerator.current=Bridge.box(0,System.Int32),$step=13,!0;case 13:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.water3),$enumerator.current=Bridge.box(0,System.Int32),$step=14,!0;case 14:return content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.water4),$enumerator.current=Bridge.box(0,System.Int32),$step=15,!0;case 15:default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator}}});Bridge.ns("PixelRPG.Base.Game1",$asm.$);Bridge.apply($asm.$.PixelRPG.Base.Game1,{f1:function(_o1){var $t;return _o1.add(($t=new PixelRPG.Base.AdditionalStuff.Scenes.LoadingData,$t.Count=15,$t.Enumerator=this.GetEnumerator(this.Content),$t)),_o1.add(($t=new PixelRPG.Base.AdditionalStuff.Scenes.LoadingData,$t.Count=47,$t.Enumerator=PixelRPG.Base.AdditionalStuff.FaceUI.Utils.GeonBitUIResources.GetEnumerator(this.Content,"hd"),$t)),_o1}});Bridge.define("PixelRPG.Base.Screens.BasicScene",{inherits:[SpineEngine.ECS.Scene],ctors:{ctor:function(){var $t,uiEntity,ui,panel,totalPlayersCount,networkPlayersCount;this.$initialize();SpineEngine.ECS.Scene.ctor.call(this);this.SetDesignResolution(1280,720,SpineEngine.Graphics.ResolutionPolicy.SceneResolutionPolicy.None);SpineEngine.Core.Instance.Screen.SetSize(1280,720);this.AddRenderer(SpineEngine.Graphics.Renderers.DefaultRenderer,new SpineEngine.Graphics.Renderers.DefaultRenderer);FaceUI.UserInterface.Initialize(SpineEngine.Core.Instance.Content,FaceUI.BuiltinThemes.hd);this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.FaceUI.ECS.EntitySystems.UIUpdateSystem);uiEntity=this.CreateEntity("UI");ui=uiEntity.AddComponent(PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.UIComponent);ui.UserInterface.ShowCursor=!1;panel=new FaceUI.Entities.Panel.$ctor1(new Microsoft.Xna.Framework.Vector2.$ctor2(500,500));panel.AddChild(new FaceUI.Entities.Label.$ctor1("Server"));panel.AddChild(new FaceUI.Entities.Label.$ctor1("Total Players"));totalPlayersCount=($t=new FaceUI.Entities.TextInput.ctor,$t.Value="4",$t);panel.AddChild(totalPlayersCount);panel.AddChild(new FaceUI.Entities.Button.$ctor1("Start")).OnClick=function(b){var $t1;SpineEngine.Core.Instance.SwitchScene(new PixelRPG.Base.Screens.GameScene(($t1=new PixelRPG.Base.Screens.GameSceneConfig,$t1.IsServer=!0,$t1.ClientsCount=System.Int32.parse(totalPlayersCount.Value),$t1.TotalPlayers=System.Int32.parse(totalPlayersCount.Value),$t1)))};panel.AddChild(new FaceUI.Entities.Label.$ctor1("Client"));panel.AddChild(new FaceUI.Entities.Label.$ctor1("Network Players"));networkPlayersCount=($t=new FaceUI.Entities.TextInput.ctor,$t.Value="1",$t);panel.AddChild(networkPlayersCount);panel.AddChild(new FaceUI.Entities.Button.$ctor1("Start")).OnClick=function(b){var $t1;SpineEngine.Core.Instance.SwitchScene(new PixelRPG.Base.Screens.GameScene(($t1=new PixelRPG.Base.Screens.GameSceneConfig,$t1.IsServer=!1,$t1.ClientsCount=System.Int32.parse(networkPlayersCount.Value),$t1)))};ui.UserInterface.AddEntity(panel)}}});Bridge.define("PixelRPG.Base.Screens.GameScene",{inherits:[SpineEngine.ECS.Scene],ctors:{ctor:function(config){var map,stat,server,i,player,i1,player1;if(this.$initialize(),SpineEngine.ECS.Scene.ctor.call(this),this.SetDesignResolution(1280,720,SpineEngine.Graphics.ResolutionPolicy.SceneResolutionPolicy.None),SpineEngine.Core.Instance.Screen.SetSize(1280,720),this.AddRenderer(SpineEngine.Graphics.Renderers.DefaultRenderer,new SpineEngine.Graphics.Renderers.DefaultRenderer),map=this.CreateEntity("Map"),map.AddComponent$1(PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent,new PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent(SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledMap,PixelRPG.Base.ContentPaths.Assets.template))),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem([new PixelRPG.Base.EntitySystems.ServerReceiveClientConnectHandler,new PixelRPG.Base.EntitySystems.ServerRecieveClientTurnDoneHandler])),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.LocalServerCommunicatorSystem),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.NetworkServerCommunicatorSystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientReceiveServerGameStartedVisibleSystem(this)),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.LocalClientCommunicatorSystem(this)),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientReceiveServerGameStartedAISystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientRecieveServerYourTurnAISystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientRecieveServerYouConnectedAISystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientSendClientConnectDoneAISystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientSendClientTurnDoneAISystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientReceiveServerCurrentStateAISystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientReceiveServerCurrentStateVisibleSystem(this)),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.ClientReceiveServerClientConnectedVisibleSystem(this)),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.BrainAI.EntitySystems.AIUpdateSystem),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.TiledMap.ECS.EntitySystems.TiledMapUpdateSystem),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.TiledMap.ECS.EntitySystems.TiledMapMeshGeneratorSystem(this)),this.AddEntitySystem(new SpineEngine.ECS.EntitySystems.AnimationSpriteUpdateSystem),this.AddEntitySystem(new PixelRPG.Base.EntitySystems.CharSpriteUpdateSystem),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.NetworkClientCommunicatorSystem),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.FaceUI.ECS.EntitySystems.UIUpdateSystem),this.AddEntitySystem(new PixelRPG.Base.AdditionalStuff.FaceUI.ECS.EntitySystems.TextUIUpdateSystem),stat=this.CreateEntity("Stat"),stat.AddComponent(PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.TextComponent).Text="text",config.IsServer)for(server=this.CreateEntity("Server"),server.AddComponent(PixelRPG.Base.Components.GameStateComponent).MaxPlayersCount=config.TotalPlayers,server.AddComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ServerComponent),server.AddComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalServerComponent),server.AddComponent$1(PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkServerComponent,new PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkServerComponent("127.0.0.1",8085)),i=0;i<config.ClientsCount;i=i+1|0)player=this.CreateEntity(),player.AddComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent),player.AddComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent).AIBot=new PixelRPG.Base.Screens.SimpleAI,i===0&&player.AddComponent$1(PixelRPG.Base.Components.VisiblePlayerComponent,new PixelRPG.Base.Components.VisiblePlayerComponent(map.Name)),player.AddComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.LocalClientComponent).ServerEntity=server.Name;else for(i1=0;i1<config.ClientsCount;i1=i1+1|0)player1=this.CreateEntity(),player1.AddComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent),player1.AddComponent$1(PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkClientComponent,new PixelRPG.Base.AdditionalStuff.ClientServer.Components.NetworkClientComponent(new System.Uri("ws://127.0.0.1:8085"))),player1.AddComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent).AIBot=new PixelRPG.Base.Screens.SimpleAI,i1===0&&player1.AddComponent$1(PixelRPG.Base.Components.VisiblePlayerComponent,new PixelRPG.Base.Components.VisiblePlayerComponent(map.Name))}}});Bridge.define("PixelRPG.Base.Screens.GameSceneConfig",{statics:{fields:{WallRegionValue:null,PathRegionValue:null,UnknownRegionValue:null},ctors:{init:function(){this.WallRegionValue=1;this.PathRegionValue=0}}},fields:{IsServer:!1,ClientsCount:0,TotalPlayers:0},ctors:{init:function(){this.ClientsCount=1;this.TotalPlayers=2}}});Bridge.define("PixelRPG.Base.Screens.SimpleAI",{inherits:[BrainAI.AI.IAITurn],fields:{MePlayerId:0,Regions:null,Players:null,Exit:null,SearchPoint:null,Pathfinding:null,NeedAction:!1,UnitDesription:null,Connected:!1,PlayerName:null},alias:["Tick","BrainAI$AI$IAITurn$Tick"],ctors:{init:function(){this.SearchPoint=new(System.Collections.Generic.Dictionary$2(System.Int32,PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage));this.PlayerName=System.String.format("Player Bot.",null)}},methods:{Tick:function(){},GetNextTurn:function(){for(var pathToGo,path,j,unitDescription,distance,$t,me=this.FindMe(),result=PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.Create(),i=0;i<me.Units.Count;i=i+1|0){if(this.SearchPoint.containsKey(me.Units.getItem(i).UnitId)&&this.SearchPoint.get(me.Units.getItem(i).UnitId)!=null&&(this.SearchPoint.get(me.Units.getItem(i).UnitId).X!==me.Units.getItem(i).Position.X||this.SearchPoint.get(me.Units.getItem(i).UnitId).Y!==me.Units.getItem(i).Position.Y)||this.SearchPoint.set(me.Units.getItem(i).UnitId,($t=new PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage,$t.X=FateRandom.Fate.GlobalFate.NextInt(System.Array.getLength(this.Regions,0)),$t.Y=FateRandom.Fate.GlobalFate.NextInt(System.Array.getLength(this.Regions,1)),$t)),pathToGo=this.Exit||this.SearchPoint.get(me.Units.getItem(i).UnitId),path=BrainAI.Pathfinding.AStar.AStarPathfinder.Search$1(BrainAI.Pathfinding.Point,this.Pathfinding,new BrainAI.Pathfinding.Point.$ctor1(me.Units.getItem(i).Position.X,me.Units.getItem(i).Position.Y),new BrainAI.Pathfinding.Point.$ctor1(pathToGo.X,pathToGo.Y)),path==null||path.Count<2){this.SearchPoint.set(me.Units.getItem(i).UnitId,null);continue}for(j=0;j<me.Units.Count;j=j+1|0)me.Units.getItem(j).Position.X===path.getItem(1).$clone().X&&me.Units.getItem(j).Position.Y===path.getItem(1).$clone().Y&&this.SearchPoint.set(me.Units.getItem(i).UnitId,null);unitDescription=this.UnitDesription.get(me.Units.getItem(i).UnitId);distance=Math.min(unitDescription.MoveRange,path.Count-1|0);result.SetNewPosition(me.Units.getItem(i).UnitId,path.getItem(distance).$clone().X,path.getItem(distance).$clone().Y);unitDescription.AttackFriendlyFire||result.SetAttackDirection(me.Units.getItem(i).UnitId,0,0)}return result},GetPlayerData:function(){return PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.Create().SetPlayerName(this.PlayerName).AddUnitType(PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Ranger).AddUnitType(PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Rogue).AddSkill(0,PixelRPG.Base.Components.GameState.UnitUtils.Skill.VisionRange).AddSkill(1,PixelRPG.Base.Components.GameState.UnitUtils.Skill.MoveRange)},FindMe:function(){for(var i=0;i<this.Players.Count;i=i+1|0)if(this.Players.getItem(i).PlayerId===this.MePlayerId)return this.Players.getItem(i);return null}}});Bridge.define("PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.UnitSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.UnitSubMessage).Obtain()}}},fields:{Skills:null,UnitType:0},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],ctors:{init:function(){this.Skills=new(System.Collections.Generic.List$1(PixelRPG.Base.Components.GameState.UnitUtils.Skill).ctor)}},methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.UnitSubMessage).Free(this)},Reset:function(){var thisSkillsIndex,thisSkillsListValue;if(this!=null){if(this.Skills!=null)for(thisSkillsIndex=0;thisSkillsIndex<this.Skills.Count;thisSkillsIndex=thisSkillsIndex+1|0)thisSkillsListValue=this.Skills.getItem(thisSkillsIndex),thisSkillsListValue=0;this.Skills.clear();this.UnitType=0}}}});Bridge.define("PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.PointSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.PointSubMessage).Obtain()}}},fields:{X:0,Y:0},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.PointSubMessage).Free(this)},Reset:function(){this!=null&&(this.X=0,this.Y=0)}}});Bridge.define("PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage).Obtain()}}},fields:{NewPosition:null,AttackDirection:null},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage).Free(this)},Reset:function(){this!=null&&(this.AttackDirection!=null?this.AttackDirection.Free():null,this.AttackDirection=null,this.NewPosition!=null?this.NewPosition.Free():null,this.NewPosition=null)}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.UnitSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.UnitSubMessage).Obtain()}}},fields:{UnitType:0,UnitId:0},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.UnitSubMessage).Free(this)},Reset:function(){this!=null&&(this.UnitId=0,this.UnitType=0)}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PlayerSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PlayerSubMessage).Obtain()}}},fields:{PlayerId:0,Units:null,LevelScore:0,TotalScore:0},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],ctors:{init:function(){this.Units=new(System.Collections.Generic.List$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.UnitSubMessage).ctor)}},methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PlayerSubMessage).Free(this)},Reset:function(){var thisUnitsIndex,thisUnitsListValue;if(this!=null){if(this.LevelScore=0,this.PlayerId=0,this.TotalScore=0,this.Units!=null)for(thisUnitsIndex=0;thisUnitsIndex<this.Units.Count;thisUnitsIndex=thisUnitsIndex+1|0)thisUnitsListValue={v:this.Units.getItem(thisUnitsIndex)},thisUnitsListValue.v!=null?thisUnitsListValue.v.Free():null,thisUnitsListValue.v=null;this.Units.clear()}}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage).Obtain()}}},fields:{X:0,Y:0},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage).Free(this)},Reset:function(){this!=null&&(this.X=0,this.Y=0)}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.UnitSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.UnitSubMessage).Obtain()}}},fields:{UnitId:0,Position:null,Hp:0},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.UnitSubMessage).Free(this)},Reset:function(){this!=null&&(this.Hp=0,this.Position!=null?this.Position.Free():null,this.Position=null,this.UnitId=0)}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.UnitSubMessage",{inherits:[SpineEngine.Utils.Collections.IPoolable],$kind:"nested class",statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.UnitSubMessage).Obtain()}}},fields:{UnitType:0,UnitId:0,VisionRange:0,MoveRange:0,MaxHp:0,Hp:0,AttackDistance:0,AttackRadius:0,AttackDamage:0,AttackFriendlyFire:!1},alias:["Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.UnitSubMessage).Free(this)},Reset:function(){this!=null&&(this.AttackDamage=0,this.AttackDistance=0,this.AttackFriendlyFire=!1,this.AttackRadius=0,this.Hp=0,this.MaxHp=0,this.MoveRange=0,this.UnitId=0,this.UnitType=0,this.VisionRange=0)}}});Bridge.define("BanditSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.thief),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,13);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[21,21,21,22,21,21,21,21,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[21,21,23,24,24,25]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[31,32,33]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[25,27,28,29,30])}}});Bridge.define("BatSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.bat),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,15,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,0,1]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6])}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1",function(T){return{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessageParser],fields:{ms:null,reader:null,writer:null},alias:["IsReadable","PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$IsReadable","IsWritable","PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$IsWritable","Write","PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Write","Read","PixelRPG$Base$AdditionalStuff$ClientServer$ITransferMessageParser$Read"],ctors:{ctor:function(){this.$initialize();this.ms=new System.IO.MemoryStream.ctor;this.reader=new System.IO.BinaryReader.ctor(this.ms);this.writer=new System.IO.BinaryWriter.$ctor1(this.ms)}},methods:{IsReadable:function(data){var baseData=System.Convert.fromBase64String(data);return this.ms.Seek(System.Int64(0),0),this.ms.SetLength(System.Int64(0)),this.ms.Write(baseData,0,baseData.length),this.ms.Seek(System.Int64(0),0),this.reader.ReadInt32()===this.Identifier},IsWritable:function(transferModel){return Bridge.is(transferModel,T)},Write:function(transferModel){return this.ms.Seek(System.Int64(0),0),this.ms.SetLength(System.Int64(0)),this.writer.Write$10(this.Identifier),this.InternalWrite(Bridge.cast(Bridge.unbox(transferModel,T),T),this.writer),this.writer.Flush(),this.ms.Seek(System.Int64(0),0),System.Convert.toBase64String(this.ms.ToArray(),null,null,null)},Read:function(data){var baseData=System.Convert.fromBase64String(data);return this.ms.Seek(System.Int64(0),0),this.ms.SetLength(System.Int64(0)),this.ms.Write(baseData,0,baseData.length),this.ms.Seek(System.Int64(0),0),this.reader.ReadInt32(),this.InternalRead(this.reader)}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1",function(T){return{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(matcher){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,matcher.All([PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent]))}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var client=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent);client.Response!=null&&Bridge.referenceEquals(Bridge.getType(client.Response),T)&&this.DoAction$2(Bridge.cast(Bridge.unbox(client.Response,T),T),entity,gameTime)}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientSendHandlerSystem$1",function(T){return{inherits:[LocomotorECS.EntityProcessingSystem],ctors:{ctor:function(matcher){this.$initialize();LocomotorECS.EntityProcessingSystem.ctor.call(this,matcher.All([PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent]))}},methods:{DoAction$1:function(entity,gameTime){LocomotorECS.EntityProcessingSystem.prototype.DoAction$1.call(this,entity,gameTime);var client=entity.GetComponent(PixelRPG.Base.AdditionalStuff.ClientServer.Components.ClientComponent),data=this.PrepareSendData(entity,gameTime);data!=null&&(client.Message=data)}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem.Handler$1",function(TMessage){return{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem.IHandler],$kind:"nested class",props:{MessageType:{get:function(){return TMessage}}},alias:["MessageType","PixelRPG$Base$AdditionalStuff$ClientServer$EntitySystems$ServerReceiveHandlerSystem$IHandler$MessageType","Handle","PixelRPG$Base$AdditionalStuff$ClientServer$EntitySystems$ServerReceiveHandlerSystem$IHandler$Handle"],methods:{Handle:function(server,connectionKey,message){this.Handle$1(server,connectionKey,Bridge.cast(Bridge.unbox(message,TMessage),TMessage))}}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Effects.WaterReflectionEffect",{inherits:[PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect],fields:{firstDisplacementSpeedParam:null,perspectiveCorrectionIntensityParam:null,screenSpaceVerticalOffsetParam:null,secondDisplacementScaleParam:null,secondDisplacementSpeedParam:null,sparkleColorParam:null,sparkleIntensityParam:null,timeParam:null},props:{SparkleIntensity:{get:function(){return this.sparkleIntensityParam.GetValueSingle()},set:function(value){this.sparkleIntensityParam.SetValue$12(value)}},SparkleColor:{get:function(){return new Microsoft.Xna.Framework.Color.$ctor3(this.sparkleColorParam.GetValueVector3())},set:function(value){this.sparkleColorParam.SetValue$6(value.ToVector3())}},ScreenSpaceVerticalOffset:{get:function(){return this.screenSpaceVerticalOffsetParam.GetValueSingle()},set:function(value){this.screenSpaceVerticalOffsetParam.SetValue$12(value)}},PerspectiveCorrectionIntensity:{get:function(){return this.perspectiveCorrectionIntensityParam.GetValueSingle()},set:function(value){this.perspectiveCorrectionIntensityParam.SetValue$12(value)}},FirstDisplacementSpeed:{get:function(){return this.firstDisplacementSpeedParam.GetValueSingle()},set:function(value){this.firstDisplacementSpeedParam.SetValue$12(value)}},SecondDisplacementSpeed:{get:function(){return this.secondDisplacementSpeedParam.GetValueSingle()},set:function(value){this.secondDisplacementSpeedParam.SetValue$12(value)}},SecondDisplacementScale:{get:function(){return this.secondDisplacementScaleParam.GetValueSingle()},set:function(value){this.secondDisplacementScaleParam.SetValue$12(value)}},Time:{get:function(){return this.timeParam.GetValueSingle()},set:function(value){this.timeParam.SetValue$12(value)}}},ctors:{ctor:function(effect){this.$initialize();PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect.ctor.call(this,effect);this.CurrentTechnique=this.Techniques.getItem$1("WaterReflectionTechnique");this.timeParam=this.Parameters.getItem$1("_time");this.sparkleIntensityParam=this.Parameters.getItem$1("_sparkleIntensity");this.sparkleColorParam=this.Parameters.getItem$1("_sparkleColor");this.screenSpaceVerticalOffsetParam=this.Parameters.getItem$1("_screenSpaceVerticalOffset");this.perspectiveCorrectionIntensityParam=this.Parameters.getItem$1("_perspectiveCorrectionIntensity");this.firstDisplacementSpeedParam=this.Parameters.getItem$1("_firstDisplacementSpeed");this.secondDisplacementSpeedParam=this.Parameters.getItem$1("_secondDisplacementSpeed");this.secondDisplacementScaleParam=this.Parameters.getItem$1("_secondDisplacementScale");this.SparkleIntensity=.015;this.SparkleColor=Microsoft.Xna.Framework.Color.White.$clone();this.PerspectiveCorrectionIntensity=.3;this.FirstDisplacementSpeed=.06;this.SecondDisplacementSpeed=.02;this.SecondDisplacementScale=3;this.ReflectionIntensity=.85;this.NormalMagnitude=.03}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Materials.PaletteCyclerMaterial",{inherits:[SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.PaletteCyclerEffect)],ctors:{ctor:function(){this.$initialize();SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.PaletteCyclerEffect).$ctor1.call(this,SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.PaletteCyclerEffect,PixelRPG.Base.AdditionalStuff.Effects.PaletteCyclerEffect.EffectAssetName))}},methods:{Update:function(gameTime){SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.PaletteCyclerEffect).prototype.Update.call(this,gameTime);this.TypedEffect.Time=gameTime.getTotalSeconds()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Materials.ReflectionMaterial",{inherits:[SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect)],fields:{renderTarget:null,RenderTexture:null},ctors:{ctor:function(reflectionRenderer){this.$initialize();SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect).$ctor1.call(this,SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect,PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect.EffectAssetName));this.RenderTexture=reflectionRenderer.RenderTexture}},methods:{OnPreRender:function(camera,entity){SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect).prototype.OnPreRender.call(this,camera,entity);this.renderTarget!=null&&Bridge.referenceEquals(this.renderTarget,this.RenderTexture.RenderTarget)||(this.renderTarget=this.RenderTexture.RenderTarget,this.TypedEffect.RenderTexture=this.RenderTexture.RenderTarget);this.TypedEffect.MatrixTransform=camera.ViewProjectionMatrix.$clone()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.GaussianBlurRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect),SpineEngine.ECS.IScreenResolutionChangedListener],fields:{renderTarget:null,renderTargetScale:0,sceneRenderTarget:null},props:{RenderTargetScale:{get:function(){return this.renderTargetScale},set:function(value){this.renderTargetScale!==value&&(this.renderTargetScale=value,this.UpdateEffectDeltas())}}},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{init:function(){this.sceneRenderTarget=new Microsoft.Xna.Framework.Rectangle;this.renderTargetScale=1},ctor:function(executionOrder){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect).ctor.call(this,executionOrder,SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect,PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect.EffectAssetName))}},methods:{SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){this.sceneRenderTarget=sceneRenderTarget.$clone();this.UpdateEffectDeltas()},UpdateEffectDeltas:function(){this.sceneRenderTarget.Width!==0&&this.sceneRenderTarget.Height!==0&&(this.TypedEffect.HorizontalBlurDelta=1/(this.sceneRenderTarget.Width*this.renderTargetScale),this.TypedEffect.VerticalBlurDelta=1/(this.sceneRenderTarget.Height*this.renderTargetScale),this.renderTarget!=null?this.renderTarget.Dispose():null,this.renderTarget=new Microsoft.Xna.Framework.Graphics.RenderTarget2D.$ctor2(SpineEngine.Core.Instance.GraphicsDevice,Bridge.Int.clip32(this.sceneRenderTarget.Width*this.renderTargetScale),Bridge.Int.clip32(this.sceneRenderTarget.Height*this.renderTargetScale),!1,SpineEngine.Core.Instance.Screen.BackBufferFormat,Microsoft.Xna.Framework.Graphics.DepthFormat.None,0,Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents))},Render:function(source,destination){this.TypedEffect.PrepareForHorizontalBlur();this.DrawFullScreenQuad(source,this.renderTarget);this.TypedEffect.PrepareForVerticalBlur();this.DrawFullScreenQuad(this.renderTarget,destination)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.HeatDistortionRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.HeatDistortionEffect)],fields:{distortionFactor:0,riseFactor:0,elapsed:0},props:{DistortionFactor:{get:function(){return this.distortionFactor},set:function(value){this.distortionFactor!==value&&(this.distortionFactor=value,this.TypedEffect!=null&&(this.TypedEffect.DistortionFactor=this.distortionFactor))}},RiseFactor:{get:function(){return this.riseFactor},set:function(value){this.riseFactor!==value&&(this.riseFactor=value,this.TypedEffect!=null&&(this.TypedEffect.RiseFactor=this.riseFactor))}},DistortionTexture:{set:function(value){this.TypedEffect.DistortionTexture=value}}},ctors:{init:function(){this.distortionFactor=.005;this.riseFactor=.15},ctor:function(executionOrder){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.HeatDistortionEffect).ctor.call(this,executionOrder)}},methods:{OnAddedToScene:function(scene){this.TypedEffect=scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.HeatDistortionEffect,PixelRPG.Base.AdditionalStuff.Effects.HeatDistortionEffect.EffectAssetName);this.TypedEffect.DistortionFactor=this.distortionFactor;this.TypedEffect.RiseFactor=this.riseFactor;this.DistortionTexture=scene.Content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.AdditionalStuff.ContentPaths.Textures.heatDistortionNoise)},Update:function(gameTime){SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.HeatDistortionEffect).prototype.Update.call(this,gameTime);this.elapsed+=gameTime.getTotalSeconds();this.TypedEffect.Time=this.elapsed}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.PixelBloomRenderProcessor",{inherits:[PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor],fields:{layerRt:null,tempRt:null},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{ctor:function(layerRenderTexture,executionOrder){this.$initialize();PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.ctor.call(this,executionOrder);this.layerRt=layerRenderTexture;this.tempRt=new SpineEngine.Graphics.RenderTexture.$ctor3(this.layerRt.RenderTarget.Width,this.layerRt.RenderTarget.Height,Microsoft.Xna.Framework.Graphics.DepthFormat.None)}},methods:{SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.prototype.SceneBackBufferSizeChanged.call(this,realRenderTarget.$clone(),sceneRenderTarget.$clone());this.tempRt.Resize(sceneRenderTarget.Width,sceneRenderTarget.Height)},Render:function(source,destination){PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.prototype.Render.call(this,SpineEngine.Graphics.RenderTexture.op_Implicit(this.layerRt),SpineEngine.Graphics.RenderTexture.op_Implicit(this.tempRt));this.Batch.Clear();this.Batch.Draw(source,SpineEngine.Maths.RectangleF.op_Implicit$1(destination.Bounds.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(source.Bounds.$clone()),Microsoft.Xna.Framework.Color.White.$clone(),0);this.Batch.Draw(SpineEngine.Graphics.RenderTexture.op_Implicit(this.tempRt),SpineEngine.Maths.RectangleF.op_Implicit$1(destination.Bounds.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(this.tempRt.RenderTarget.Bounds.$clone()),Microsoft.Xna.Framework.Color.White.$clone(),0);this.Batch.Draw(SpineEngine.Graphics.RenderTexture.op_Implicit(this.layerRt),SpineEngine.Maths.RectangleF.op_Implicit$1(destination.Bounds.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(this.layerRt.RenderTarget.Bounds.$clone()),Microsoft.Xna.Framework.Color.White.$clone(),0);this.Material.BlendState=Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend;this.Material.SamplerState=this.SamplerState;this.Material.DepthStencilState=Microsoft.Xna.Framework.Graphics.DepthStencilState.None;SpineEngine.Graphics.Graphic.Draw(destination,Microsoft.Xna.Framework.Color.Black.$clone(),this.Batch,this.Material)},Unload:function(){PixelRPG.Base.AdditionalStuff.RenderProcessors.BloomRenderProcessor.prototype.Unload.call(this);this.tempRt.Dispose()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.PixelGlitchRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.PixelGlitchEffect),SpineEngine.ECS.IScreenResolutionChangedListener],fields:{horizontalOffset:0,verticalSize:0},props:{VerticalSize:{get:function(){return this.verticalSize},set:function(value){this.verticalSize!==value&&(this.verticalSize=value,this.TypedEffect!=null&&(this.TypedEffect.VerticalSize=this.verticalSize))}},HorizontalOffset:{get:function(){return this.horizontalOffset},set:function(value){this.horizontalOffset!==value&&(this.horizontalOffset=value,this.TypedEffect!=null&&(this.TypedEffect.HorizontalOffset=this.horizontalOffset))}}},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{init:function(){this.horizontalOffset=10;this.verticalSize=5},ctor:function(executionOrder){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.PixelGlitchEffect).ctor.call(this,executionOrder)}},methods:{SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){this.TypedEffect.ScreenSize=new Microsoft.Xna.Framework.Vector2.$ctor2(sceneRenderTarget.Width,sceneRenderTarget.Height)},OnAddedToScene:function(scene){this.TypedEffect=scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.PixelGlitchEffect,PixelRPG.Base.AdditionalStuff.Effects.PixelGlitchEffect.EffectAssetName);this.TypedEffect.VerticalSize=this.verticalSize;this.TypedEffect.HorizontalOffset=this.horizontalOffset;this.TypedEffect.ScreenSize=new Microsoft.Xna.Framework.Vector2.$ctor2(SpineEngine.Core.Instance.Screen.Width,SpineEngine.Core.Instance.Screen.Height)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.PixelMosaicRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.MultiTextureOverlayEffect),SpineEngine.ECS.IScreenResolutionChangedListener],fields:{CellColor:null,lastMosaicScale:0,mosaicRenderTex:null,mosaicTexture:null,tmpMaterial:null},props:{Scene:null},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{init:function(){var $t;this.CellColor=new Microsoft.Xna.Framework.Color;this.CellColor=new Microsoft.Xna.Framework.Color.$ctor10(8421504);this.lastMosaicScale=-1;this.tmpMaterial=($t=new SpineEngine.Graphics.Materials.Material,$t.SamplerState=Microsoft.Xna.Framework.Graphics.SamplerState.PointWrap,$t)},ctor:function(executionOrder){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.MultiTextureOverlayEffect).ctor.call(this,executionOrder)}},methods:{SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){var screenWidth=realRenderTarget.Width,screenHeight=realRenderTarget.Height,screenAspectRatio=screenWidth/screenHeight,designSize=this.Scene.DesignResolutionSize.$clone(),pixelPerfectScale=1;pixelPerfectScale=designSize.X/designSize.Y>screenAspectRatio?Bridge.Int.div(screenWidth,designSize.X)|0:Bridge.Int.div(screenHeight,designSize.Y)|0;pixelPerfectScale===0&&(pixelPerfectScale=1);this.lastMosaicScale!==pixelPerfectScale&&(this.CreateMosaicTexture(Bridge.Int.mul(50,pixelPerfectScale)),this.lastMosaicScale=pixelPerfectScale);this.mosaicRenderTex!=null?this.mosaicRenderTex.Dispose():null;this.mosaicRenderTex=new Microsoft.Xna.Framework.Graphics.RenderTarget2D.$ctor2(SpineEngine.Core.Instance.GraphicsDevice,Bridge.Int.mul(sceneRenderTarget.Width,pixelPerfectScale),Bridge.Int.mul(sceneRenderTarget.Height,pixelPerfectScale),!1,SpineEngine.Core.Instance.Screen.BackBufferFormat,Microsoft.Xna.Framework.Graphics.DepthFormat.None,0,Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents);this.Batch.Clear();this.Batch.Draw(this.mosaicTexture,SpineEngine.Maths.RectangleF.op_Implicit$1(this.mosaicRenderTex.Bounds.$clone()),SpineEngine.Maths.RectangleF.op_Implicit$1(this.mosaicRenderTex.Bounds.$clone()),Microsoft.Xna.Framework.Color.White.$clone(),0);SpineEngine.Graphics.Graphic.Draw(this.mosaicRenderTex,Microsoft.Xna.Framework.Color.Black.$clone(),this.Batch,this.tmpMaterial);this.TypedEffect.SecondTexture=this.mosaicRenderTex},OnAddedToScene:function(scene){SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.MultiTextureOverlayEffect).prototype.OnAddedToScene.call(this,scene);this.Scene=scene;this.Effect=this.Scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.MultiTextureOverlayEffect,PixelRPG.Base.AdditionalStuff.Effects.MultiTextureOverlayEffect.EffectAssetName)},CreateMosaicTexture:function(size){var colors,i,x,y;for(this.mosaicTexture!=null?this.mosaicTexture.Dispose():null,this.mosaicTexture=new Microsoft.Xna.Framework.Graphics.Texture2D.ctor(SpineEngine.Core.Instance.GraphicsDevice,size,size),colors=System.Array.init(Bridge.Int.mul(size,size),0,System.UInt32),i=0;i<colors.length;i=i+1|0)colors[System.Array.index(i,colors)]=this.CellColor.PackedValue;for(colors[System.Array.index(0,colors)]=4294967295,colors[System.Array.index(Bridge.Int.mul(size,size)-1|0,colors)]=4278190080,x=1;x<(size-1|0);x=x+1|0)colors[System.Array.index(Bridge.Int.mul(x,size),colors)]=4292927712,colors[System.Array.index(Bridge.Int.mul(x,size)+1|0,colors)]=4294967295,colors[System.Array.index((Bridge.Int.mul(x,size)+size|0)-1|0,colors)]=4278190080;for(y=1;y<(size-1|0);y=y+1|0)colors[System.Array.index(y,colors)]=4294967295,colors[System.Array.index(Bridge.Int.mul(size-1|0,size)+y|0,colors)]=4278190080;this.mosaicTexture.SetData(System.UInt32,colors)},Unload:function(){SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.MultiTextureOverlayEffect).prototype.Unload.call(this);this.mosaicTexture.Dispose();this.mosaicRenderTex.Dispose()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.PolyLightRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect),SpineEngine.ECS.IScreenResolutionChangedListener],fields:{lightsRenderTexture:null,blurEffect:null,blurEnabled:!1,blurRenderTargetScale:0,multiplicativeFactor:0,renderTarget:null,scene:null,sceneRenderTarget:null},props:{MultiplicativeFactor:{get:function(){return this.multiplicativeFactor},set:function(value){this.TypedEffect!=null&&(this.TypedEffect.MultiplicativeFactor=value);this.multiplicativeFactor=value}},EnableBlur:{get:function(){return this.blurEnabled},set:function(value){value!==this.blurEnabled&&(this.blurEnabled=value,this.blurEnabled&&this.blurEffect==null&&this.scene!=null)&&(this.blurEffect=SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect,PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect.EffectAssetName),this.UpdateBlurEffectDeltas())}},BlurRenderTargetScale:{get:function(){return this.blurRenderTargetScale},set:function(value){this.blurRenderTargetScale!==value&&(this.blurRenderTargetScale=value,this.blurEffect!=null&&this.UpdateBlurEffectDeltas())}},BlurAmount:{get:function(){var $t;return $t=this.blurEffect!=null?this.blurEffect.BlurAmount:null,$t!=null?$t:-1},set:function(value){this.blurEffect!=null&&(this.blurEffect.BlurAmount=value)}}},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{init:function(){this.sceneRenderTarget=new Microsoft.Xna.Framework.Rectangle;this.blurRenderTargetScale=.5;this.multiplicativeFactor=1},ctor:function(executionOrder,lightsRenderTexture){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect).ctor.call(this,executionOrder);this.lightsRenderTexture=lightsRenderTexture}},methods:{SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){this.sceneRenderTarget=sceneRenderTarget.$clone();this.TypedEffect.LightTexture=SpineEngine.Graphics.RenderTexture.op_Implicit(this.lightsRenderTexture);this.blurEnabled&&this.UpdateBlurEffectDeltas()},UpdateBlurEffectDeltas:function(){this.sceneRenderTarget.Width!==0&&this.sceneRenderTarget.Height!==0&&(this.blurEffect.HorizontalBlurDelta=1/(this.sceneRenderTarget.Width*this.blurRenderTargetScale),this.blurEffect.VerticalBlurDelta=1/(this.sceneRenderTarget.Height*this.blurRenderTargetScale),this.renderTarget!=null?this.renderTarget.Dispose():null,this.renderTarget=new Microsoft.Xna.Framework.Graphics.RenderTarget2D.$ctor2(SpineEngine.Core.Instance.GraphicsDevice,Bridge.Int.clip32(this.sceneRenderTarget.Width*this.blurRenderTargetScale),Bridge.Int.clip32(this.sceneRenderTarget.Height*this.blurRenderTargetScale),!1,SpineEngine.Core.Instance.Screen.BackBufferFormat,Microsoft.Xna.Framework.Graphics.DepthFormat.None,0,Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents))},OnAddedToScene:function(scene){this.scene=scene;this.TypedEffect=this.scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect,PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect.EffectAssetName);this.TypedEffect.LightTexture=SpineEngine.Graphics.RenderTexture.op_Implicit(this.lightsRenderTexture);this.TypedEffect.MultiplicativeFactor=this.multiplicativeFactor;this.blurEnabled&&(this.blurEffect=SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect,PixelRPG.Base.AdditionalStuff.Effects.GaussianBlurEffect.EffectAssetName))},Render:function(source,destination){this.blurEnabled&&(this.blurEffect.PrepareForHorizontalBlur(),this.DrawFullScreenQuad(SpineEngine.Graphics.RenderTexture.op_Implicit(this.lightsRenderTexture),this.renderTarget,this.blurEffect),this.blurEffect.PrepareForVerticalBlur(),this.DrawFullScreenQuad(this.renderTarget,SpineEngine.Graphics.RenderTexture.op_Implicit(this.lightsRenderTexture),this.blurEffect));this.DrawFullScreenQuad(source,destination)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.ScanlinesRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.ScanlinesEffect)],ctors:{ctor:function(executionOrder){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.ScanlinesEffect).ctor.call(this,executionOrder,SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.ScanlinesEffect,PixelRPG.Base.AdditionalStuff.Effects.ScanlinesEffect.EffectAssetName))}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.SpriteLightRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect),SpineEngine.ECS.IScreenResolutionChangedListener],fields:{lightsRenderTexture:null,multiplicativeFactor:0},props:{MultiplicativeFactor:{get:function(){return this.multiplicativeFactor},set:function(value){this.TypedEffect!=null&&(this.TypedEffect.MultiplicativeFactor=value);this.multiplicativeFactor=value}}},alias:["SceneBackBufferSizeChanged","SpineEngine$ECS$IScreenResolutionChangedListener$SceneBackBufferSizeChanged"],ctors:{init:function(){this.multiplicativeFactor=1},ctor:function(executionOrder,lightsRenderTexture){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect).ctor.call(this,executionOrder);this.lightsRenderTexture=lightsRenderTexture}},methods:{SceneBackBufferSizeChanged:function(realRenderTarget,sceneRenderTarget){this.TypedEffect.LightTexture=SpineEngine.Graphics.RenderTexture.op_Implicit(this.lightsRenderTexture)},OnAddedToScene:function(scene){this.TypedEffect=scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect,PixelRPG.Base.AdditionalStuff.Effects.SpriteLightMultiplyEffect.EffectAssetName);this.TypedEffect.LightTexture=SpineEngine.Graphics.RenderTexture.op_Implicit(this.lightsRenderTexture);this.TypedEffect.MultiplicativeFactor=this.multiplicativeFactor}}});Bridge.define("PixelRPG.Base.AdditionalStuff.RenderProcessors.VignetteRenderProcessor",{inherits:[SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.VignetteEffect)],fields:{power:0,radius:0},props:{Power:{get:function(){return this.power},set:function(value){this.power!==value&&(this.power=value,this.TypedEffect!=null&&(this.TypedEffect.Power=this.power))}},Radius:{get:function(){return this.radius},set:function(value){this.radius!==value&&(this.radius=value,this.TypedEffect!=null&&(this.TypedEffect.Radius=this.radius))}}},ctors:{init:function(){this.power=1;this.radius=1.25},ctor:function(executionOrder){this.$initialize();SpineEngine.Graphics.RenderProcessors.RenderProcessor$1(PixelRPG.Base.AdditionalStuff.Effects.VignetteEffect).ctor.call(this,executionOrder)}},methods:{OnAddedToScene:function(scene){this.TypedEffect=scene.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.VignetteEffect,PixelRPG.Base.AdditionalStuff.Effects.VignetteEffect.EffectAssetName);this.TypedEffect.Power=this.power;this.TypedEffect.Radius=this.radius}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledImageLayer",{inherits:[PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledLayer],fields:{AssetName:null}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer",{inherits:[PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledLayer],fields:{X:0,Y:0,Width:0,Height:0,Tiles:null,Color:null},ctors:{init:function(){this.Color=new Microsoft.Xna.Framework.Color;this.Color=Microsoft.Xna.Framework.Color.White.$clone()}},methods:{GetTile:function(x,y){return this.Tiles[System.Array.index(x+Bridge.Int.mul(y,this.Width)|0,this.Tiles)]},SetTile:function(x,y,tile){this.Tiles[System.Array.index(x+Bridge.Int.mul(y,this.Width)|0,this.Tiles)]=tile},RemoveTile$1:function(x,y){this.Tiles[System.Array.index(x+Bridge.Int.mul(y,this.Width)|0,this.Tiles)]=null},RemoveTile:function(tile){for(var index=0;index<this.Tiles.length;index=index+1|0)Bridge.referenceEquals(tile,this.Tiles[System.Array.index(index,this.Tiles)])&&(this.Tiles[System.Array.index(index,this.Tiles)]=null)}}});Bridge.define("PixelRPG.Base.AdditionalStuff.TiledMap.PipelineImporter.TiledMapReader",{inherits:[Microsoft.Xna.Framework.Content.ContentTypeReader$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledMap)],methods:{Read$1:function(reader,existingInstance){var result=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledMap,layerCount,i,layerType,layer,newLayer,newLayer1,j,objectGroupsCount,i1,objectGroup,objectsCount,j1,obj,pointsCount,k,tileSetCount,i2,tileSet,tileCount,j2,tile,animationFrameCount,k1,animationFrame;for(result.FirstGid=reader.ReadInt32(),result.Width=reader.ReadInt32(),result.Height=reader.ReadInt32(),result.TileWidth=reader.ReadInt32(),result.TileHeight=reader.ReadInt32(),reader.ReadBoolean()&&(result.BackgroundColor=reader.ReadColor()),result.RenderOrder=reader.ReadInt32(),result.Orientation=reader.ReadInt32(),this.ReadProperties(reader,result.Properties),layerCount=reader.ReadInt32(),i=0;i<layerCount;i=i+1|0){if(layerType=reader.ReadInt32(),layer=null,layerType===1)newLayer=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledImageLayer,newLayer.AssetName=reader.ReadString(),layer=newLayer;else if(layerType===2){for(newLayer1=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer,newLayer1.X=reader.ReadInt32(),newLayer1.Y=reader.ReadInt32(),newLayer1.Width=reader.ReadInt32(),newLayer1.Height=reader.ReadInt32(),newLayer1.Tiles=System.Array.init(reader.ReadInt32(),null,PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile),j=0;j<newLayer1.Tiles.length;j=j+1|0)reader.ReadBoolean()&&(newLayer1.Tiles[System.Array.index(j,newLayer1.Tiles)]=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile,newLayer1.Tiles[System.Array.index(j,newLayer1.Tiles)].Id=reader.ReadInt32(),newLayer1.Tiles[System.Array.index(j,newLayer1.Tiles)].FlippedHorizonally=reader.ReadBoolean(),newLayer1.Tiles[System.Array.index(j,newLayer1.Tiles)].FlippedVertically=reader.ReadBoolean(),newLayer1.Tiles[System.Array.index(j,newLayer1.Tiles)].FlippedDiagonally=reader.ReadBoolean());newLayer1.Color=reader.ReadColor();layer=newLayer1}if(layer==null)throw new System.NotSupportedException.ctor;result.Layers.add(layer);layer.Offset=reader.ReadVector2();this.ReadProperties(reader,layer.Properties);layer.Name=reader.ReadString();layer.Visible=reader.ReadBoolean();layer.Opacity=reader.ReadSingle()}for(objectGroupsCount=reader.ReadInt32(),i1=0;i1<objectGroupsCount;i1=i1+1|0)for(objectGroup=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObjectGroup,result.ObjectGroups.add(objectGroup),objectGroup.Name=reader.ReadString(),objectGroup.Color=reader.ReadColor(),objectGroup.Opacity=reader.ReadSingle(),objectGroup.Visible=reader.ReadBoolean(),this.ReadProperties(reader,objectGroup.Properties),objectsCount=reader.ReadInt32(),j1=0;j1<objectsCount;j1=j1+1|0){for(obj=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledObject,objectGroup.Objects.add(obj),obj.Id=reader.ReadInt32(),obj.Name=reader.ReadString(),obj.Type=reader.ReadString(),obj.X=reader.ReadInt32(),obj.Y=reader.ReadInt32(),obj.Width=reader.ReadInt32(),obj.Height=reader.ReadInt32(),obj.Rotation=reader.ReadInt32(),obj.Gid=reader.ReadInt32(),obj.Visible=reader.ReadBoolean(),obj.TiledObjectType=reader.ReadInt32(),obj.ObjectType=reader.ReadString(),pointsCount=reader.ReadInt32(),k=0;k<pointsCount;k=k+1|0)obj.PolyPoints.add(reader.ReadVector2());this.ReadProperties(reader,obj.Properties)}for(tileSetCount=reader.ReadInt32(),i2=0;i2<tileSetCount;i2=i2+1|0){for(tileSet=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSet,result.TileSets.add(tileSet),tileSet.Spacing=reader.ReadInt32(),tileSet.Margin=reader.ReadInt32(),this.ReadProperties(reader,tileSet.Properties),tileCount=reader.ReadInt32(),j2=0;j2<tileCount;j2=j2+1|0){if(tile=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSetTile,tileSet.Tiles.add(tile),tile.Id=reader.ReadInt32(),reader.ReadBoolean())for(animationFrameCount=reader.ReadInt32(),tile.AnimationFrames=new(System.Collections.Generic.List$1(PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSetAnimationFrame).$ctor2)(animationFrameCount),k1=0;k1<animationFrameCount;k1=k1+1|0)animationFrame=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileSetAnimationFrame,tile.AnimationFrames.add(animationFrame),animationFrame.TileId=reader.ReadInt32(),animationFrame.Duration=reader.ReadSingle();this.ReadProperties(reader,tile.Properties);var x=reader.ReadInt32(),y=reader.ReadInt32(),width=reader.ReadInt32(),height=reader.ReadInt32();tile.SourceRect=new Microsoft.Xna.Framework.Rectangle.$ctor2(x,y,width,height)}tileSet.FirstGid=reader.ReadInt32();tileSet.Image=reader.ReadString();tileSet.ImageTexture=reader.ContentManager.Load(Microsoft.Xna.Framework.Graphics.Texture2D,tileSet.Image)}return result},ReadProperties:function(reader,dataProperties){var count,i,key,value;for(dataProperties.clear(),count=reader.ReadInt32(),i=0;i<count;i=i+1|0)key=reader.ReadString(),value=reader.ReadString(),dataProperties.set(key,value)}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.AcidicSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.scorpio),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,18,17);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[14,14,14,14,14,14,14,14,15,16,15,16,15,16]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[19,20]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[14,17,18]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[14,21,22,23,24])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.AlbinoSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.rat),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[16,16,16,17]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[22,23,24,25,26]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[18,19,20,21]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[27,28,29,30])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.BeeSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.bee),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,1,0,2,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,1,0,2,2]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[3,4,5,6]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[7,8,9,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.BlacksmithSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Neutral.blacksmith),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,13,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,1,2,2,2,3]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.BruteSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.brute),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1,0,0,1,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6,7]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[8,9,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.BurningFistSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.burning_fist),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,24,17);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,5,6]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,2,3,4])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.CrabSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.crab),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,0,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[3,4,5,6]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[7,8,9]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[10,11,12,13])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.DM300Sprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.dm300),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,22,20);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,7,0,7,0,7,0,7,0,7,0,7,8])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.ElementalSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.elemental),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,14);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,3]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[7,8,9,10,11,12,13,12])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.EyeSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.eye),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,18);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[5,6]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,3]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[7,8,9])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.GhostSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Neutral.ghost),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,14,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.GnollSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.gnoll),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1,0,0,1,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6,7]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[8,9,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.GolemSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.golem),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,4,5]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[6,7,8]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[9,10,11,12,13])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.GooSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.goo),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,20,14);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[5,0,6]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,4])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.HeroSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content,heroType,heroLevel){var operate,read;this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,heroType),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,15),LevelSize=21;this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0+Bridge.Int.mul(heroLevel,LevelSize)|0,0+Bridge.Int.mul(heroLevel,LevelSize)|0,0+Bridge.Int.mul(heroLevel,LevelSize)|0,1+Bridge.Int.mul(heroLevel,LevelSize)|0,0+Bridge.Int.mul(heroLevel,LevelSize)|0,0+Bridge.Int.mul(heroLevel,LevelSize)|0,1+Bridge.Int.mul(heroLevel,LevelSize)|0,1+Bridge.Int.mul(heroLevel,LevelSize)|0]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2+Bridge.Int.mul(heroLevel,LevelSize)|0,3+Bridge.Int.mul(heroLevel,LevelSize)|0,4+Bridge.Int.mul(heroLevel,LevelSize)|0,5+Bridge.Int.mul(heroLevel,LevelSize)|0,6+Bridge.Int.mul(heroLevel,LevelSize)|0,7+Bridge.Int.mul(heroLevel,LevelSize)|0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[13+Bridge.Int.mul(heroLevel,LevelSize)|0,14+Bridge.Int.mul(heroLevel,LevelSize)|0,15+Bridge.Int.mul(heroLevel,LevelSize)|0,0+Bridge.Int.mul(heroLevel,LevelSize)|0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[8+Bridge.Int.mul(heroLevel,LevelSize)|0,9+Bridge.Int.mul(heroLevel,LevelSize)|0,10+Bridge.Int.mul(heroLevel,LevelSize)|0,11+Bridge.Int.mul(heroLevel,LevelSize)|0,12+Bridge.Int.mul(heroLevel,LevelSize)|0,11+Bridge.Int.mul(heroLevel,LevelSize)|0]);operate=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[16+Bridge.Int.mul(heroLevel,LevelSize)|0,17+Bridge.Int.mul(heroLevel,LevelSize)|0,16+Bridge.Int.mul(heroLevel,LevelSize)|0,17+Bridge.Int.mul(heroLevel,LevelSize)|0]);read=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[19+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,20+Bridge.Int.mul(heroLevel,LevelSize)|0,19+Bridge.Int.mul(heroLevel,LevelSize)|0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.ImpSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Neutral.demon),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,14);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,3,0,1,2,3,0,0,0,4,4,4,4,4,4,4,4,4,4,0,1,2,3,0,1,2,3,0,1,3,0,0,0,4,4,4,4,4,4,4,4,0,0,0,4,4,4,4,4,4,4,4]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,3,2,1,0,3,2,1,0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.KingSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.king),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,0,0,0,0,0,1,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[3,4,5,6,7,8]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[9,10,11]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[12,13,14,15])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.LarvaSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.larva),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,8);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,4,4,4,4,5,5]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,3]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[6,5,7]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[8])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.MimicSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.mimic),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,3,3,2,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,4,5,6]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[7,8,9])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.MonkSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.monk),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,15,14);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[1,0,1,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[11,12,13,14,15,16]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[3,4,3,4,5,6,5]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[1,7,8,8,9,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.PiranhaSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.piranha),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[3,4,5,6,7,8,9,10,11]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[12,13,14])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.RatKingSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.ratking),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,4,5,6]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.RatSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.rat),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[6,7,8,9,10]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,4,5,0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[11,12,13,14])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.RottingFistSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.rotting_fist),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,24,17);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,2,3,4])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.ScorpioSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.scorpio),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,18,17);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,0,1,2,1,2,1,2]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[5,5,6,6]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,3,4]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,7,8,9,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.SeniorSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.monk),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,15,14);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[18,17,18,19]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[28,29,30,31,32,33]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[20,21,20,21,22,23,22]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[18,24,25,25,26,27])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.ShamanSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.shaman),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1,0,0,1,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6,7]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[8,9,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.SheepSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Neutral.sheep),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.ShieldedSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.brute),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[21,21,21,22,21,21,22,22]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[25,26,27,28]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[23,24]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[29,30,31])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.ShopkeeperSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Neutral.shopkeeper),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,14,14);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[1,1,1,1,1,0,0,0,0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.SkeletonSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.skeleton),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6,7,8,9]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[14,15,16]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[10,11,12,13])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.SpinnerSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.spinner),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,1,0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,2,0,3]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,4,5,0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[6,7,8,9])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.StatueSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.statue),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,1,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,4,5,6,7]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[8,9,10]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[11,12,13,14,15,15])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.SuccubusSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.succubus),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[3,4,5,6,7,8]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[9,10,11]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[12])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.SwarmSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.swarm),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,16,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,3,4,5]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,3,4,5]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[6,7,8,9]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[10,11,12,13,14])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.TenguSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.tengu),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,14,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[2,3,4,5,0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[6,7,7,0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[8,9,10,10,10,10,10,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.ThiefSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.thief),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,13);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1,0,0,0,0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,2,3,3,4]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[5,6,7,8,9]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[10,11,12,0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.UndeadSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.undead),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,16);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[4,5,6,7,8,9]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[14,15,16]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[10,11,12,13])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.WandmakerSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Neutral.wandmaker),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,14);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,2,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.WarlockSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.warlock),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,12,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,0,0,1,0,0,1,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,2,3,4]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,5,6]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,7,8,8,9,10])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.WraithSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.wraith),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,14,15);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,2,3]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,4,5,6,7])}}});Bridge.define("PixelRPG.Base.Assets.UnitAnimations.YogSprite",{inherits:[PixelRPG.Base.Assets.UnitAnimation],ctors:{ctor:function(content){this.$initialize();PixelRPG.Base.Assets.UnitAnimation.ctor.call(this);var texture=content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,PixelRPG.Base.ContentPaths.Assets.Enemy.yog),frames=SpineEngine.Graphics.Drawable.SubtextureDrawable.SubtexturesFromAtlas(texture,20,19);this.Idle=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,1,2,2,1,0,3,4,4,3,0,5,6,6,5]);this.Run=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Attack=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0]);this.Die=new SpineEngine.ECS.EntitySystems.Animation.SpriteAnimation.$ctor4(frames,[0,7,8,9])}}});Bridge.define("PixelRPG.Base.Components.GameState.Skills.MoveRangeSkill",{inherits:[PixelRPG.Base.Components.GameState.ISkill],alias:["Apply","PixelRPG$Base$Components$GameState$ISkill$Apply"],methods:{Apply:function(player,unit){unit.MoveRange=unit.MoveRange+1|0}}});Bridge.define("PixelRPG.Base.Components.GameState.Skills.VisionRangeSkill",{inherits:[PixelRPG.Base.Components.GameState.ISkill],alias:["Apply","PixelRPG$Base$Components$GameState$ISkill$Apply"],methods:{Apply:function(player,unit){unit.VisionRange=unit.VisionRange+2|0}}});Bridge.define("PixelRPG.Base.TransferMessages.ClientConnectTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage).Obtain()}}},fields:{PlayerName:null,UnitsData:null},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],ctors:{init:function(){this.UnitsData=new(System.Collections.Generic.List$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.UnitSubMessage).ctor)}},methods:{AddSkill:function(unitIndex,value){return this.UnitsData.getItem(unitIndex).Skills.add(value),this},AddUnitType:function(value){var unit=PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.UnitSubMessage.Create();return unit.UnitType=value,this.UnitsData.add(unit),this},SetPlayerName:function(value){return this.PlayerName=value,this},Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage).Free(this)},Reset:function(){var thisUnitsDataIndex,thisUnitsDataListValue;if(this!=null){if(this.PlayerName=null,this.UnitsData!=null)for(thisUnitsDataIndex=0;thisUnitsDataIndex<this.UnitsData.Count;thisUnitsDataIndex=thisUnitsDataIndex+1|0)thisUnitsDataListValue={v:this.UnitsData.getItem(thisUnitsDataIndex)},thisUnitsDataListValue.v!=null?thisUnitsDataListValue.v.Free():null,thisUnitsDataListValue.v=null;this.UnitsData.clear()}}}});Bridge.define("PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage).Obtain()}}},fields:{UnitActions:null},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],ctors:{init:function(){this.UnitActions=new(System.Collections.Generic.Dictionary$2(System.Int32,PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage))}},methods:{SetNewPosition:function(unitId,x,y){return this.UnitActions.containsKey(unitId)||this.UnitActions.set(unitId,PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage.Create()),this.UnitActions.get(unitId).NewPosition=this.UnitActions.get(unitId).NewPosition||PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.PointSubMessage.Create(),this.UnitActions.get(unitId).NewPosition.X=x,this.UnitActions.get(unitId).NewPosition.Y=y,this},SetAttackDirection:function(unitId,x,y){return this.UnitActions.containsKey(unitId)||this.UnitActions.set(unitId,PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage.Create()),this.UnitActions.get(unitId).AttackDirection=this.UnitActions.get(unitId).AttackDirection||PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.PointSubMessage.Create(),this.UnitActions.get(unitId).AttackDirection.X=x,this.UnitActions.get(unitId).AttackDirection.Y=y,this},Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage).Free(this)},Reset:function(){var $t;if(this!=null){if(this.UnitActions!=null){$t=Bridge.getEnumerator(this.UnitActions);try{while($t.moveNext()){var thisUnitActionsKVP=$t.Current,thisUnitActionsKVPKey=thisUnitActionsKVP.key,thisUnitActionsKVPValue={v:thisUnitActionsKVP.value};thisUnitActionsKVPKey=0;thisUnitActionsKVPValue.v!=null?thisUnitActionsKVPValue.v.Free():null;thisUnitActionsKVPValue.v=null}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}this.UnitActions.clear()}}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage).Obtain()}}},fields:{PlayerName:null,PlayerId:0,CurrentCount:0,WaitingCount:0,Units:null},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],ctors:{init:function(){this.Units=new(System.Collections.Generic.List$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.UnitSubMessage).ctor)}},methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage).Free(this)},Reset:function(){var thisUnitsIndex,thisUnitsListValue;if(this!=null){if(this.CurrentCount=0,this.PlayerId=0,this.PlayerName=null,this.Units!=null)for(thisUnitsIndex=0;thisUnitsIndex<this.Units.Count;thisUnitsIndex=thisUnitsIndex+1|0)thisUnitsListValue={v:this.Units.getItem(thisUnitsIndex)},thisUnitsListValue.v!=null?thisUnitsListValue.v.Free():null,thisUnitsListValue.v=null;this.Units.clear();this.WaitingCount=0}},SetData:function(playerId,playerName,waitingCount,currentCount){return this.PlayerId=playerId,this.PlayerName=playerName,this.WaitingCount=waitingCount,this.CurrentCount=currentCount,this},PopulateUnits:function(units){for(var unit,i=0;i<units.Count;i=i+1|0)unit=units.getItem(i),this.AddUnit(unit.UnitId,unit.UnitType);return this},AddUnit:function(unitId,unitType){var unitData=PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.UnitSubMessage.Create();return unitData.UnitId=unitId,unitData.UnitType=unitType,this.Units.add(unitData),this}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage).Obtain()}}},fields:{Players:null,Exit:null,Map:null,Doors:null},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],ctors:{init:function(){this.Players=new(System.Collections.Generic.List$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PlayerSubMessage).ctor);this.Map=new(System.Collections.Generic.List$1(System.Nullable$1(System.Int32)).ctor);this.Doors=new(System.Collections.Generic.List$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage).ctor)}},methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage).Free(this)},Reset:function(){var thisDoorsIndex,thisDoorsListValue,thisMapIndex,thisMapListValue,thisPlayersIndex,thisPlayersListValue;if(this!=null){if(this.Doors!=null)for(thisDoorsIndex=0;thisDoorsIndex<this.Doors.Count;thisDoorsIndex=thisDoorsIndex+1|0)thisDoorsListValue={v:this.Doors.getItem(thisDoorsIndex)},thisDoorsListValue.v!=null?thisDoorsListValue.v.Free():null,thisDoorsListValue.v=null;if(this.Doors.clear(),this.Exit!=null?this.Exit.Free():null,this.Exit=null,this.Map!=null)for(thisMapIndex=0;thisMapIndex<this.Map.Count;thisMapIndex=thisMapIndex+1|0)thisMapListValue=this.Map.getItem(thisMapIndex),thisMapListValue=null;if(this.Map.clear(),this.Players!=null)for(thisPlayersIndex=0;thisPlayersIndex<this.Players.Count;thisPlayersIndex=thisPlayersIndex+1|0)thisPlayersListValue={v:this.Players.getItem(thisPlayersIndex)},thisPlayersListValue.v!=null?thisPlayersListValue.v.Free():null,thisPlayersListValue.v=null;this.Players.clear()}},AddPlayer:function(playerId,levelScore,totalScore){var responsePlayer=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PlayerSubMessage.Create();return responsePlayer.PlayerId=playerId,responsePlayer.LevelScore=levelScore,responsePlayer.TotalScore=totalScore,this.Players.add(responsePlayer),this},AddUnit:function(playerIndex,unitId,posX,posY,hp){var unit=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.UnitSubMessage.Create();return unit.Hp=hp,unit.UnitId=unitId,unit.Position=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage.Create(),unit.Position.X=posX,unit.Position.Y=posY,this.Players.getItem(playerIndex).Units.add(unit),this},SetExit:function(x,y){return this.Exit=this.Exit||PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage.Create(),this.Exit.X=x,this.Exit.Y=y,this},AddDoor:function(x,y){var door=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage.Create();return door.X=x,door.Y=y,this.Doors.add(door),this}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage).Obtain()}}},fields:{Width:0,Height:0},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage).Free(this)},Reset:function(){this!=null&&(this.Height=0,this.Width=0)},SetSize:function(width,height){return this.Width=width,this.Height=height,this}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerPlayerTurnMadeTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerPlayerTurnMadeTransferMessage).Obtain()}}},fields:{PlayerId:0},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerPlayerTurnMadeTransferMessage).Free(this)},Reset:function(){this!=null&&(this.PlayerId=0)},SetPlayerId:function(playerId){return this.PlayerId=playerId,this}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage).Obtain()}}},fields:{PlayerId:0,UnitsData:null},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],ctors:{init:function(){this.UnitsData=new(System.Collections.Generic.List$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.UnitSubMessage).ctor)}},methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage).Free(this)},Reset:function(){var thisUnitsDataIndex,thisUnitsDataListValue;if(this!=null){if(this.PlayerId=0,this.UnitsData!=null)for(thisUnitsDataIndex=0;thisUnitsDataIndex<this.UnitsData.Count;thisUnitsDataIndex=thisUnitsDataIndex+1|0)thisUnitsDataListValue={v:this.UnitsData.getItem(thisUnitsDataIndex)},thisUnitsDataListValue.v!=null?thisUnitsDataListValue.v.Free():null,thisUnitsDataListValue.v=null;this.UnitsData.clear()}},SetPlayerId:function(playerId){return this.PlayerId=playerId,this},PopulateUnits:function(units){for(var newUnit,i=0;i<units.Count;i=i+1|0)newUnit=units.getItem(i),this.AddUnit(newUnit.UnitId,newUnit.UnitType,newUnit.VisionRange,newUnit.MoveRange,newUnit.AttackDamage,newUnit.AttackDistance,newUnit.AttackFriendlyFire,newUnit.AttackRadius,newUnit.Hp,newUnit.MaxHp);return this},AddUnit:function(unitId,unitType,visionRange,moveRange,attackDamage,attackDistance,attackFriendlyFire,attackRadius,hp,maxHp){var unit=PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.UnitSubMessage.Create();return unit.UnitId=unitId,unit.UnitType=unitType,unit.VisionRange=visionRange,unit.MoveRange=moveRange,unit.AttackDamage=attackDamage,unit.AttackDistance=attackDistance,unit.AttackFriendlyFire=attackFriendlyFire,unit.AttackRadius=attackRadius,unit.Hp=hp,unit.MaxHp=maxHp,this.UnitsData.add(unit),this}}});Bridge.define("PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.IPoolableTransferMessage,PixelRPG.Base.AdditionalStuff.ClientServer.ITransferMessage],statics:{methods:{Create:function(){return SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage).Obtain()}}},alias:["Free","PixelRPG$Base$AdditionalStuff$ClientServer$IPoolableTransferMessage$Free","Reset","SpineEngine$Utils$Collections$IPoolable$Reset"],methods:{Free:function(){SpineEngine.Utils.Collections.Pool$1(PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage).Free(this)},Reset:function(){this!=null}}});Bridge.define("PixelRPG.Base.AdditionalStuff.Materials.WaterReflectionMaterial",{inherits:[SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.WaterReflectionEffect)],fields:{renderTarget:null,RenderTexture:null},ctors:{ctor:function(reflectionRenderer){this.$initialize();SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.WaterReflectionEffect).$ctor1.call(this,SpineEngine.Core.Instance.Content.Load(PixelRPG.Base.AdditionalStuff.Effects.WaterReflectionEffect,PixelRPG.Base.AdditionalStuff.Effects.ReflectionEffect.EffectAssetName));this.RenderTexture=reflectionRenderer.RenderTexture}},methods:{OnPreRender:function(camera,entity){SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.WaterReflectionEffect).prototype.OnPreRender.call(this,camera,entity);this.renderTarget!=null&&Bridge.referenceEquals(this.renderTarget,this.RenderTexture.RenderTarget)||(this.renderTarget=this.RenderTexture.RenderTarget,this.TypedEffect.RenderTexture=this.RenderTexture.RenderTarget);this.TypedEffect.MatrixTransform=camera.ViewProjectionMatrix.$clone();this.TypedEffect.CurrentTechnique=this.TypedEffect.Techniques.getItem$1("WaterReflectionTechnique")},Update:function(gameTime){SpineEngine.Graphics.Materials.Material$1(PixelRPG.Base.AdditionalStuff.Effects.WaterReflectionEffect).prototype.Update.call(this,gameTime);this.TypedEffect.Time=gameTime.getTotalSeconds()}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ClientConnectTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage)],props:{Identifier:{get:function(){return 1}}},methods:{InternalWrite:function(transferModel,writer){var transferModelUnitsDataIndex,transferModelUnitsDatatransferModelUnitsDataIndexSkillsIndex;if(writer.Write(transferModel!=null),transferModel!=null&&(writer.Write(transferModel.PlayerName!=null),transferModel.PlayerName!=null&&writer.Write$14(transferModel.PlayerName),writer.Write(transferModel.UnitsData!=null),transferModel.UnitsData!=null))for(writer.Write$10(transferModel.UnitsData.Count),transferModelUnitsDataIndex=0;transferModelUnitsDataIndex<transferModel.UnitsData.Count;transferModelUnitsDataIndex=transferModelUnitsDataIndex+1|0)if(writer.Write(transferModel.UnitsData.getItem(transferModelUnitsDataIndex)!=null),transferModel.UnitsData.getItem(transferModelUnitsDataIndex)!=null){if(writer.Write(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).Skills!=null),transferModel.UnitsData.getItem(transferModelUnitsDataIndex).Skills!=null)for(writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).Skills.Count),transferModelUnitsDatatransferModelUnitsDataIndexSkillsIndex=0;transferModelUnitsDatatransferModelUnitsDataIndexSkillsIndex<transferModel.UnitsData.getItem(transferModelUnitsDataIndex).Skills.Count;transferModelUnitsDatatransferModelUnitsDataIndexSkillsIndex=transferModelUnitsDatatransferModelUnitsDataIndexSkillsIndex+1|0)writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).Skills.getItem(transferModelUnitsDatatransferModelUnitsDataIndexSkillsIndex));writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).UnitType)}},InternalRead:function(reader){var transferModel=null,transferModelUnitsDataCount,transferModelUnitsDataIndex,transferModelUnitsDataValue,transferModelUnitsDataValueSkillsCount,transferModelUnitsDataValueSkillsIndex,transferModelUnitsDataValueSkillsValue;if(reader.ReadBoolean()&&(transferModel=PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.Create(),reader.ReadBoolean()&&(transferModel.PlayerName=reader.ReadString()),reader.ReadBoolean()))for(transferModelUnitsDataCount=reader.ReadInt32(),transferModel.UnitsData.clear(),transferModelUnitsDataIndex=0;transferModelUnitsDataIndex<transferModelUnitsDataCount;transferModelUnitsDataIndex=transferModelUnitsDataIndex+1|0){if(transferModelUnitsDataValue=null,reader.ReadBoolean()){if(transferModelUnitsDataValue=PixelRPG.Base.TransferMessages.ClientConnectTransferMessage.UnitSubMessage.Create(),reader.ReadBoolean())for(transferModelUnitsDataValueSkillsCount=reader.ReadInt32(),transferModelUnitsDataValue.Skills.clear(),transferModelUnitsDataValueSkillsIndex=0;transferModelUnitsDataValueSkillsIndex<transferModelUnitsDataValueSkillsCount;transferModelUnitsDataValueSkillsIndex=transferModelUnitsDataValueSkillsIndex+1|0)transferModelUnitsDataValueSkillsValue=0,transferModelUnitsDataValueSkillsValue=reader.ReadInt32(),transferModelUnitsDataValue.Skills.add(transferModelUnitsDataValueSkillsValue);transferModelUnitsDataValue.UnitType=reader.ReadInt32()}transferModel.UnitsData.add(transferModelUnitsDataValue)}return transferModel}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ClientTurnDoneTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage)],props:{Identifier:{get:function(){return 2}}},methods:{InternalWrite:function(transferModel,writer){var $t,transferModelUnitActionsKVP;if(writer.Write(transferModel!=null),transferModel!=null&&(writer.Write(transferModel.UnitActions!=null),transferModel.UnitActions!=null)){writer.Write$10(transferModel.UnitActions.count);$t=Bridge.getEnumerator(transferModel.UnitActions);try{while($t.moveNext())transferModelUnitActionsKVP=$t.Current,writer.Write$10(transferModelUnitActionsKVP.key),writer.Write(transferModelUnitActionsKVP.value!=null),transferModelUnitActionsKVP.value!=null&&(writer.Write(transferModelUnitActionsKVP.value.AttackDirection!=null),transferModelUnitActionsKVP.value.AttackDirection!=null&&(writer.Write$10(transferModelUnitActionsKVP.value.AttackDirection.X),writer.Write$10(transferModelUnitActionsKVP.value.AttackDirection.Y)),writer.Write(transferModelUnitActionsKVP.value.NewPosition!=null),transferModelUnitActionsKVP.value.NewPosition!=null&&(writer.Write$10(transferModelUnitActionsKVP.value.NewPosition.X),writer.Write$10(transferModelUnitActionsKVP.value.NewPosition.Y)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}},InternalRead:function(reader){var transferModel=null,transferModelUnitActionsCount,transferModelUnitActionsIndex,transferModelUnitActionsKey,transferModelUnitActionsValue;if(reader.ReadBoolean()&&(transferModel=PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.Create(),reader.ReadBoolean()))for(transferModelUnitActionsCount=reader.ReadInt32(),transferModel.UnitActions.clear(),transferModelUnitActionsIndex=0;transferModelUnitActionsIndex<transferModelUnitActionsCount;transferModelUnitActionsIndex=transferModelUnitActionsIndex+1|0)transferModelUnitActionsKey=Bridge.getDefaultValue(System.Int32),transferModelUnitActionsValue=null,transferModelUnitActionsKey=reader.ReadInt32(),reader.ReadBoolean()&&(transferModelUnitActionsValue=PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.UnitActionSubMessage.Create(),reader.ReadBoolean()&&(transferModelUnitActionsValue.AttackDirection=PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.PointSubMessage.Create(),transferModelUnitActionsValue.AttackDirection.X=reader.ReadInt32(),transferModelUnitActionsValue.AttackDirection.Y=reader.ReadInt32()),reader.ReadBoolean()&&(transferModelUnitActionsValue.NewPosition=PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage.PointSubMessage.Create(),transferModelUnitActionsValue.NewPosition.X=reader.ReadInt32(),transferModelUnitActionsValue.NewPosition.Y=reader.ReadInt32())),transferModel.UnitActions.set(transferModelUnitActionsKey,transferModelUnitActionsValue);return transferModel}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ServerClientConnectedTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage)],props:{Identifier:{get:function(){return 3}}},methods:{InternalWrite:function(transferModel,writer){if(writer.Write(transferModel!=null),transferModel!=null){if(writer.Write$10(transferModel.CurrentCount),writer.Write$10(transferModel.PlayerId),writer.Write(transferModel.PlayerName!=null),transferModel.PlayerName!=null&&writer.Write$14(transferModel.PlayerName),writer.Write(transferModel.Units!=null),transferModel.Units!=null){writer.Write$10(transferModel.Units.Count);for(var transferModelUnitsIndex=0;transferModelUnitsIndex<transferModel.Units.Count;transferModelUnitsIndex=transferModelUnitsIndex+1|0)writer.Write(transferModel.Units.getItem(transferModelUnitsIndex)!=null),transferModel.Units.getItem(transferModelUnitsIndex)!=null&&(writer.Write$10(transferModel.Units.getItem(transferModelUnitsIndex).UnitId),writer.Write$10(transferModel.Units.getItem(transferModelUnitsIndex).UnitType))}writer.Write$10(transferModel.WaitingCount)}},InternalRead:function(reader){var transferModel=null,transferModelUnitsCount,transferModelUnitsIndex,transferModelUnitsValue;if(reader.ReadBoolean()){if(transferModel=PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.Create(),transferModel.CurrentCount=reader.ReadInt32(),transferModel.PlayerId=reader.ReadInt32(),reader.ReadBoolean()&&(transferModel.PlayerName=reader.ReadString()),reader.ReadBoolean())for(transferModelUnitsCount=reader.ReadInt32(),transferModel.Units.clear(),transferModelUnitsIndex=0;transferModelUnitsIndex<transferModelUnitsCount;transferModelUnitsIndex=transferModelUnitsIndex+1|0)transferModelUnitsValue=null,reader.ReadBoolean()&&(transferModelUnitsValue=PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.UnitSubMessage.Create(),transferModelUnitsValue.UnitId=reader.ReadInt32(),transferModelUnitsValue.UnitType=reader.ReadInt32()),transferModel.Units.add(transferModelUnitsValue);transferModel.WaitingCount=reader.ReadInt32()}return transferModel}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ServerCurrentStateTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage)],props:{Identifier:{get:function(){return 4}}},methods:{InternalWrite:function(transferModel,writer){var transferModelDoorsIndex,transferModelMapIndex,transferModelPlayersIndex,transferModelPlayerstransferModelPlayersIndexUnitsIndex;if(writer.Write(transferModel!=null),transferModel!=null){if(writer.Write(transferModel.Doors!=null),transferModel.Doors!=null)for(writer.Write$10(transferModel.Doors.Count),transferModelDoorsIndex=0;transferModelDoorsIndex<transferModel.Doors.Count;transferModelDoorsIndex=transferModelDoorsIndex+1|0)writer.Write(transferModel.Doors.getItem(transferModelDoorsIndex)!=null),transferModel.Doors.getItem(transferModelDoorsIndex)!=null&&(writer.Write$10(transferModel.Doors.getItem(transferModelDoorsIndex).X),writer.Write$10(transferModel.Doors.getItem(transferModelDoorsIndex).Y));if(writer.Write(transferModel.Exit!=null),transferModel.Exit!=null&&(writer.Write$10(transferModel.Exit.X),writer.Write$10(transferModel.Exit.Y)),writer.Write(transferModel.Map!=null),transferModel.Map!=null)for(writer.Write$10(transferModel.Map.Count),transferModelMapIndex=0;transferModelMapIndex<transferModel.Map.Count;transferModelMapIndex=transferModelMapIndex+1|0)writer.Write(transferModel.Map.getItem(transferModelMapIndex)!=null),transferModel.Map.getItem(transferModelMapIndex)!=null&&writer.Write$10(System.Nullable.getValue(transferModel.Map.getItem(transferModelMapIndex)));if(writer.Write(transferModel.Players!=null),transferModel.Players!=null)for(writer.Write$10(transferModel.Players.Count),transferModelPlayersIndex=0;transferModelPlayersIndex<transferModel.Players.Count;transferModelPlayersIndex=transferModelPlayersIndex+1|0)if(writer.Write(transferModel.Players.getItem(transferModelPlayersIndex)!=null),transferModel.Players.getItem(transferModelPlayersIndex)!=null&&(writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).LevelScore),writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).PlayerId),writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).TotalScore),writer.Write(transferModel.Players.getItem(transferModelPlayersIndex).Units!=null),transferModel.Players.getItem(transferModelPlayersIndex).Units!=null))for(writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).Units.Count),transferModelPlayerstransferModelPlayersIndexUnitsIndex=0;transferModelPlayerstransferModelPlayersIndexUnitsIndex<transferModel.Players.getItem(transferModelPlayersIndex).Units.Count;transferModelPlayerstransferModelPlayersIndexUnitsIndex=transferModelPlayerstransferModelPlayersIndexUnitsIndex+1|0)writer.Write(transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex)!=null),transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex)!=null&&(writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex).Hp),writer.Write(transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex).Position!=null),transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex).Position!=null&&(writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex).Position.X),writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex).Position.Y)),writer.Write$10(transferModel.Players.getItem(transferModelPlayersIndex).Units.getItem(transferModelPlayerstransferModelPlayersIndexUnitsIndex).UnitId))}},InternalRead:function(reader){var transferModel=null,transferModelDoorsCount,transferModelDoorsIndex,transferModelDoorsValue,transferModelMapCount,transferModelMapIndex,transferModelMapValue,transferModelPlayersCount,transferModelPlayersIndex,transferModelPlayersValue,transferModelPlayersValueUnitsCount,transferModelPlayersValueUnitsIndex,transferModelPlayersValueUnitsValue;if(reader.ReadBoolean()){if(transferModel=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.Create(),reader.ReadBoolean())for(transferModelDoorsCount=reader.ReadInt32(),transferModel.Doors.clear(),transferModelDoorsIndex=0;transferModelDoorsIndex<transferModelDoorsCount;transferModelDoorsIndex=transferModelDoorsIndex+1|0)transferModelDoorsValue=null,reader.ReadBoolean()&&(transferModelDoorsValue=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage.Create(),transferModelDoorsValue.X=reader.ReadInt32(),transferModelDoorsValue.Y=reader.ReadInt32()),transferModel.Doors.add(transferModelDoorsValue);if(reader.ReadBoolean()&&(transferModel.Exit=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage.Create(),transferModel.Exit.X=reader.ReadInt32(),transferModel.Exit.Y=reader.ReadInt32()),reader.ReadBoolean())for(transferModelMapCount=reader.ReadInt32(),transferModel.Map.clear(),transferModelMapIndex=0;transferModelMapIndex<transferModelMapCount;transferModelMapIndex=transferModelMapIndex+1|0)transferModelMapValue=null,reader.ReadBoolean()&&(transferModelMapValue=reader.ReadInt32()),transferModel.Map.add(transferModelMapValue);if(reader.ReadBoolean())for(transferModelPlayersCount=reader.ReadInt32(),transferModel.Players.clear(),transferModelPlayersIndex=0;transferModelPlayersIndex<transferModelPlayersCount;transferModelPlayersIndex=transferModelPlayersIndex+1|0){if(transferModelPlayersValue=null,reader.ReadBoolean()&&(transferModelPlayersValue=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PlayerSubMessage.Create(),transferModelPlayersValue.LevelScore=reader.ReadInt32(),transferModelPlayersValue.PlayerId=reader.ReadInt32(),transferModelPlayersValue.TotalScore=reader.ReadInt32(),reader.ReadBoolean()))for(transferModelPlayersValueUnitsCount=reader.ReadInt32(),transferModelPlayersValue.Units.clear(),transferModelPlayersValueUnitsIndex=0;transferModelPlayersValueUnitsIndex<transferModelPlayersValueUnitsCount;transferModelPlayersValueUnitsIndex=transferModelPlayersValueUnitsIndex+1|0)transferModelPlayersValueUnitsValue=null,reader.ReadBoolean()&&(transferModelPlayersValueUnitsValue=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.UnitSubMessage.Create(),transferModelPlayersValueUnitsValue.Hp=reader.ReadInt32(),reader.ReadBoolean()&&(transferModelPlayersValueUnitsValue.Position=PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage.PointSubMessage.Create(),transferModelPlayersValueUnitsValue.Position.X=reader.ReadInt32(),transferModelPlayersValueUnitsValue.Position.Y=reader.ReadInt32()),transferModelPlayersValueUnitsValue.UnitId=reader.ReadInt32()),transferModelPlayersValue.Units.add(transferModelPlayersValueUnitsValue);transferModel.Players.add(transferModelPlayersValue)}}return transferModel}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ServerGameStartedTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage)],props:{Identifier:{get:function(){return 5}}},methods:{InternalWrite:function(transferModel,writer){writer.Write(transferModel!=null);transferModel!=null&&(writer.Write$10(transferModel.Height),writer.Write$10(transferModel.Width))},InternalRead:function(reader){var transferModel=null;return reader.ReadBoolean()&&(transferModel=PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage.Create(),transferModel.Height=reader.ReadInt32(),transferModel.Width=reader.ReadInt32()),transferModel}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ServerPlayerTurnMadeTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ServerPlayerTurnMadeTransferMessage)],props:{Identifier:{get:function(){return 6}}},methods:{InternalWrite:function(transferModel,writer){writer.Write(transferModel!=null);transferModel!=null&&writer.Write$10(transferModel.PlayerId)},InternalRead:function(reader){var transferModel=null;return reader.ReadBoolean()&&(transferModel=PixelRPG.Base.TransferMessages.ServerPlayerTurnMadeTransferMessage.Create(),transferModel.PlayerId=reader.ReadInt32()),transferModel}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ServerYouConnectedTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage)],props:{Identifier:{get:function(){return 7}}},methods:{InternalWrite:function(transferModel,writer){if(writer.Write(transferModel!=null),transferModel!=null&&(writer.Write$10(transferModel.PlayerId),writer.Write(transferModel.UnitsData!=null),transferModel.UnitsData!=null)){writer.Write$10(transferModel.UnitsData.Count);for(var transferModelUnitsDataIndex=0;transferModelUnitsDataIndex<transferModel.UnitsData.Count;transferModelUnitsDataIndex=transferModelUnitsDataIndex+1|0)writer.Write(transferModel.UnitsData.getItem(transferModelUnitsDataIndex)!=null),transferModel.UnitsData.getItem(transferModelUnitsDataIndex)!=null&&(writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).AttackDamage),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).AttackDistance),writer.Write(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).AttackFriendlyFire),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).AttackRadius),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).Hp),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).MaxHp),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).MoveRange),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).UnitId),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).UnitType),writer.Write$10(transferModel.UnitsData.getItem(transferModelUnitsDataIndex).VisionRange))}},InternalRead:function(reader){var transferModel=null,transferModelUnitsDataCount,transferModelUnitsDataIndex,transferModelUnitsDataValue;if(reader.ReadBoolean()&&(transferModel=PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.Create(),transferModel.PlayerId=reader.ReadInt32(),reader.ReadBoolean()))for(transferModelUnitsDataCount=reader.ReadInt32(),transferModel.UnitsData.clear(),transferModelUnitsDataIndex=0;transferModelUnitsDataIndex<transferModelUnitsDataCount;transferModelUnitsDataIndex=transferModelUnitsDataIndex+1|0)transferModelUnitsDataValue=null,reader.ReadBoolean()&&(transferModelUnitsDataValue=PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.UnitSubMessage.Create(),transferModelUnitsDataValue.AttackDamage=reader.ReadInt32(),transferModelUnitsDataValue.AttackDistance=reader.ReadInt32(),transferModelUnitsDataValue.AttackFriendlyFire=reader.ReadBoolean(),transferModelUnitsDataValue.AttackRadius=reader.ReadInt32(),transferModelUnitsDataValue.Hp=reader.ReadInt32(),transferModelUnitsDataValue.MaxHp=reader.ReadInt32(),transferModelUnitsDataValue.MoveRange=reader.ReadInt32(),transferModelUnitsDataValue.UnitId=reader.ReadInt32(),transferModelUnitsDataValue.UnitType=reader.ReadInt32(),transferModelUnitsDataValue.VisionRange=reader.ReadInt32()),transferModel.UnitsData.add(transferModelUnitsDataValue);return transferModel}}});Bridge.define("PixelRPG.Base.AdditionalStuff.ClientServer.ServerYourTurnTransferMessageParser",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.BinaryTransferMessageParser$1(PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage)],props:{Identifier:{get:function(){return 8}}},methods:{InternalWrite:function(transferModel,writer){writer.Write(transferModel!=null);transferModel!=null},InternalRead:function(reader){var transferModel=null;return reader.ReadBoolean()&&(transferModel=PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage.Create()),transferModel}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientReceiveServerClientConnectedVisibleSystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage)],fields:{scene:null,availableAnimations:null},ctors:{init:function(){this.availableAnimations=new(System.Collections.Generic.Dictionary$2(System.String,System.String))},ctor:function(scene){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.Components.VisiblePlayerComponent]));this.scene=scene}},methods:{DoAction$2:function(message,entity,gameTime){for(var entityName,playerUnit,unitComponent,visiblePlayer=entity.GetComponent(PixelRPG.Base.Components.VisiblePlayerComponent),j=0;j<message.Units.Count;j=j+1|0){entityName=System.String.format("PlayerUnit{0}_{1}",Bridge.box(message.PlayerId,System.Int32),Bridge.box(message.Units.getItem(j).UnitId,System.Int32));playerUnit=this.scene.CreateEntity(entityName);playerUnit.AddComponent(SpineEngine.ECS.Components.PositionComponent);unitComponent=playerUnit.AddComponent(PixelRPG.Base.Components.UnitComponent);switch(message.Units.getItem(j).UnitType){case PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Warrior:unitComponent.UnitAnimations=new PixelRPG.Base.Assets.UnitAnimations.HeroSprite(SpineEngine.Core.Instance.Content,PixelRPG.Base.ContentPaths.Assets.Characters.warrior,6);break;case PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Mage:unitComponent.UnitAnimations=new PixelRPG.Base.Assets.UnitAnimations.HeroSprite(SpineEngine.Core.Instance.Content,PixelRPG.Base.ContentPaths.Assets.Characters.mage,6);break;case PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Rogue:unitComponent.UnitAnimations=new PixelRPG.Base.Assets.UnitAnimations.HeroSprite(SpineEngine.Core.Instance.Content,PixelRPG.Base.ContentPaths.Assets.Characters.rogue,6);break;case PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Ranger:unitComponent.UnitAnimations=new PixelRPG.Base.Assets.UnitAnimations.HeroSprite(SpineEngine.Core.Instance.Content,PixelRPG.Base.ContentPaths.Assets.Characters.ranger,6);break;case PixelRPG.Base.Components.GameState.UnitUtils.UnitType.Bat:unitComponent.UnitAnimations=new BatSprite(SpineEngine.Core.Instance.Content);break}visiblePlayer.KnownPlayers.add(playerUnit);playerUnit.Enabled=!1}}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientReceiveServerCurrentStateAISystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage)],ctors:{ctor:function(){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent]))}},methods:{DoAction$2:function(message,entity,gameTime){var ai=entity.GetComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent),simpleAI=Bridge.cast(ai.AIBot,PixelRPG.Base.Screens.SimpleAI),mapIdx,x,y,map;for(simpleAI.Players=message.Players,simpleAI.Exit=simpleAI.Exit||message.Exit,mapIdx=0,x=0;x<System.Array.getLength(simpleAI.Regions,0);x=x+1|0)for(y=0;y<System.Array.getLength(simpleAI.Regions,1);y=y+1|0)(map=message.Map.getItem(mapIdx),mapIdx=mapIdx+1|0,System.Nullable.eq(map,PixelRPG.Base.Screens.GameSceneConfig.UnknownRegionValue))||(simpleAI.Regions.set([x,y],map),System.Nullable.eq(map,PixelRPG.Base.Screens.GameSceneConfig.WallRegionValue)&&simpleAI.Pathfinding.Walls.add(new BrainAI.Pathfinding.Point.$ctor1(x,y)))}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientReceiveServerCurrentStateVisibleSystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage)],fields:{scene:null},ctors:{ctor:function(scene){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerCurrentStateTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.Components.VisiblePlayerComponent]));this.scene=scene}},methods:{DoAction$2:function(message,entity,gameTime){for(var stat,text,i1,player,j,x,y,fogTile,mapTile,currentTile,i2,junction,tile,currentTile1,$t,visiblePlayer=entity.GetComponent(PixelRPG.Base.Components.VisiblePlayerComponent),i=0;i<visiblePlayer.KnownPlayers.Count;i=i+1|0)visiblePlayer.KnownPlayers.getItem(i).Enabled=!1;for(stat=this.scene.FindEntity("Stat"),text=stat.GetComponent(PixelRPG.Base.AdditionalStuff.FaceUI.ECS.Components.TextComponent),text.Text="Statistic:\nPlayer | Lvl | Tot\n",i1=0;i1<message.Players.Count;i1=i1+1|0){for(player=message.Players.getItem(i1),j=0;j<player.Units.Count;j=j+1|0){var entityName=System.String.format("PlayerUnit{0}_{1}",Bridge.box(player.PlayerId,System.Int32),Bridge.box(player.Units.getItem(j).UnitId,System.Int32)),playerUnit=this.scene.FindEntity(entityName),newPosition=new Microsoft.Xna.Framework.Vector2.$ctor2(Bridge.Int.mul(player.Units.getItem(j).Position.X,16)+8|0,Bridge.Int.mul(player.Units.getItem(j).Position.Y,16)+8|0),positionComponent=playerUnit.GetComponent(SpineEngine.ECS.Components.PositionComponent);playerUnit.GetComponent(PixelRPG.Base.Components.UnitComponent).State=player.Units.getItem(j).Hp<=0?PixelRPG.Base.Assets.UnitState.Dead:newPosition.X===positionComponent.Position.X&&newPosition.Y===positionComponent.Position.Y?PixelRPG.Base.Assets.UnitState.Idle:PixelRPG.Base.Assets.UnitState.Run;positionComponent.Position=newPosition.$clone();playerUnit.Enabled=!0}text.Text=(text.Text||"")+(System.String.format("{0} | {1,3} | {2,3}\n",Bridge.box(player.PlayerId,System.Int32),Bridge.box(player.LevelScore,System.Int32),Bridge.box(player.TotalScore,System.Int32))||"")}var map=this.scene.FindEntity(visiblePlayer.MapEntityName),tiledMap=map.GetComponent(PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent).TiledMap,maze=Bridge.cast(tiledMap.GetLayer("Maze"),PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer),fog=Bridge.cast(tiledMap.GetLayer("Fog"),PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer),mapIdx=0;for(x=0;x<maze.Width;x=x+1|0)for(y=0;y<maze.Height;y=y+1|0){if(fogTile=fog.GetTile(x,y),mapTile=message.Map.getItem(mapIdx),mapIdx=mapIdx+1|0,System.Nullable.eq(mapTile,PixelRPG.Base.Screens.GameSceneConfig.UnknownRegionValue)){if(fogTile==null){fogTile=($t=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile,$t.Id=70,$t);fog.SetTile(x,y,fogTile);continue}fogTile.Id=70;continue}fogTile!=null&&(fogTile.Id=71);currentTile=maze.GetTile(x,y);currentTile==null&&(currentTile=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile);System.Nullable.eq(mapTile,PixelRPG.Base.Screens.GameSceneConfig.WallRegionValue)?currentTile.Id=17:System.Nullable.eq(mapTile,PixelRPG.Base.Screens.GameSceneConfig.PathRegionValue)&&(currentTile.Id=2);maze.SetTile(x,y,currentTile)}for(i2=0;i2<message.Doors.Count;i2=i2+1|0)junction=message.Doors.getItem(i2),tile=maze.GetTile(junction.X,junction.Y),tile.Id=6;message.Exit!=null&&(currentTile1=maze.GetTile(message.Exit.X,message.Exit.Y),currentTile1==null&&(currentTile1=new PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile,maze.SetTile(message.Exit.X,message.Exit.Y,currentTile1)),currentTile1.Id=9)}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientReceiveServerGameStartedAISystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage)],ctors:{ctor:function(){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent]))}},methods:{DoAction$2:function(message,entity,gameTime){var ai=entity.GetComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent),simpleAI=Bridge.cast(ai.AIBot,PixelRPG.Base.Screens.SimpleAI);simpleAI.Pathfinding=new BrainAI.Pathfinding.AStar.AstarGridGraph(message.Width,message.Height);simpleAI.Regions=System.Array.create(null,null,System.Nullable$1(System.Int32),message.Width,message.Height);simpleAI.Exit=null}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientReceiveServerGameStartedVisibleSystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage)],fields:{scene:null},ctors:{ctor:function(scene){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.Components.VisiblePlayerComponent]));this.scene=scene}},methods:{DoAction$2:function(message,entity,gameTime){var visiblePlayer=entity.GetComponent(PixelRPG.Base.Components.VisiblePlayerComponent),map=this.scene.FindEntity(visiblePlayer.MapEntityName),tiledMap=map.GetComponent(PixelRPG.Base.AdditionalStuff.TiledMap.ECS.Components.TiledMapComponent).TiledMap,maze=Bridge.cast(tiledMap.GetLayer("Maze"),PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer),water=Bridge.cast(tiledMap.GetLayer("Water"),PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer),fog=Bridge.cast(tiledMap.GetLayer("Fog"),PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTileLayer);tiledMap.Width=maze.Width=water.Width=fog.Width=message.Width;tiledMap.Height=maze.Height=water.Height=fog.Height=message.Height;tiledMap.ObjectGroups.clear();maze.Tiles=System.Array.init(Bridge.Int.mul(maze.Width,maze.Height),null,PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile);water.Tiles=System.Array.init(Bridge.Int.mul(water.Width,water.Height),null,PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile);fog.Tiles=System.Array.init(Bridge.Int.mul(water.Width,water.Height),null,PixelRPG.Base.AdditionalStuff.TiledMap.Models.TiledTile);tiledMap.TileSets.getItem(1).ImageTexture=SpineEngine.Core.Instance.Content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,System.String.format("{0}{1}",System.String.trim(PixelRPG.Base.ContentPaths.Assets.water0,[48]),Bridge.box(FateRandom.Fate.GlobalFate.NextInt(5),System.Int32)));tiledMap.TileSets.getItem(0).ImageTexture=SpineEngine.Core.Instance.Content.Load(Microsoft.Xna.Framework.Graphics.Texture2D,System.String.format("{0}{1}",System.String.trim(PixelRPG.Base.ContentPaths.Assets.tiles0,[48]),Bridge.box(FateRandom.Fate.GlobalFate.NextInt(5),System.Int32)))}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientRecieveServerYouConnectedAISystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage)],ctors:{ctor:function(){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent]))}},methods:{DoAction$2:function(message,entity,gameTime){var ai=entity.GetComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent),simpleAI=Bridge.cast(ai.AIBot,PixelRPG.Base.Screens.SimpleAI);simpleAI.MePlayerId=message.PlayerId;simpleAI.UnitDesription=System.Linq.Enumerable.from(message.UnitsData).toDictionary($asm.$.PixelRPG.Base.EntitySystems.ClientRecieveServerYouConnectedAISystem.f1,null,System.Int32,PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.UnitSubMessage)}}});Bridge.ns("PixelRPG.Base.EntitySystems.ClientRecieveServerYouConnectedAISystem",$asm.$);Bridge.apply($asm.$.PixelRPG.Base.EntitySystems.ClientRecieveServerYouConnectedAISystem,{f1:function(a){return a.UnitId}});Bridge.define("PixelRPG.Base.EntitySystems.ClientRecieveServerYourTurnAISystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage)],ctors:{ctor:function(){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientReceiveHandlerSystem$1(PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent]))}},methods:{DoAction$2:function(message,entity,gameTime){var ai=entity.GetComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent),simpleAI=Bridge.cast(ai.AIBot,PixelRPG.Base.Screens.SimpleAI);simpleAI.NeedAction=!0}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientSendClientConnectDoneAISystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientSendHandlerSystem$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage)],ctors:{ctor:function(){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientSendHandlerSystem$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent]))}},methods:{PrepareSendData:function(entity,gameTime){var ai=entity.GetComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent),simpleAI=Bridge.cast(ai.AIBot,PixelRPG.Base.Screens.SimpleAI);return simpleAI.Connected?null:(simpleAI.Connected=!0,simpleAI.GetPlayerData())}}});Bridge.define("PixelRPG.Base.EntitySystems.ClientSendClientTurnDoneAISystem",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientSendHandlerSystem$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage)],ctors:{ctor:function(){this.$initialize();PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ClientSendHandlerSystem$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage).ctor.call(this,(new LocomotorECS.Matching.Matcher).All([PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent]))}},methods:{PrepareSendData:function(entity,gameTime){var ai=entity.GetComponent(PixelRPG.Base.AdditionalStuff.BrainAI.Components.AIComponent),simpleAI=Bridge.cast(ai.AIBot,PixelRPG.Base.Screens.SimpleAI);return simpleAI.NeedAction?(simpleAI.NeedAction=!1,simpleAI.GetNextTurn()):null}}});Bridge.define("PixelRPG.Base.EntitySystems.ServerReceiveClientConnectHandler",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem.Handler$1(PixelRPG.Base.TransferMessages.ClientConnectTransferMessage)],methods:{Handle$1:function(server,connectionKey,message){for(var newUnit,skillsCount,j,i1,newUnit1,player,player1,player2,responses,$t,$t1,$t2,gameState=server.Entity.GetComponent(PixelRPG.Base.Components.GameStateComponent),newPlayer=($t=new PixelRPG.Base.Components.GameState.Player,$t.PlayerId=connectionKey+100500|0,$t.PlayerName=message.PlayerName,$t.Units=new(System.Collections.Generic.List$1(PixelRPG.Base.Components.GameState.Unit).ctor),$t),unitsCount=Math.min(message.UnitsData.Count,gameState.MaxUnitsCount),i=0;i<unitsCount;i=i+1|0){for(newUnit=PixelRPG.Base.Components.GameState.UnitUtils.BuildUnit(message.UnitsData.getItem(i).UnitType),newUnit.UnitId=i+200|0,skillsCount=Math.min(message.UnitsData.getItem(i).Skills.Count,gameState.MaxSkillsCount),j=0;j<skillsCount;j=j+1|0)PixelRPG.Base.Components.GameState.UnitUtils.ApplySkill(newPlayer,newUnit,message.UnitsData.getItem(i).Skills.getItem(j));newPlayer.Units.add(newUnit)}for(i1=unitsCount;i1<gameState.MaxUnitsCount;i1=i1+1|0)newUnit1=PixelRPG.Base.Components.GameState.UnitUtils.GetRandomUnit(),newUnit1.UnitId=i1+200|0,newPlayer.Units.add(newUnit1);server.Response.get(connectionKey).Enqueue(PixelRPG.Base.TransferMessages.ServerYouConnectedTransferMessage.Create().SetPlayerId(newPlayer.PlayerId).PopulateUnits(newPlayer.Units));$t=Bridge.getEnumerator(gameState.Players);try{while($t.moveNext())player=$t.Current,server.Response.get(connectionKey).Enqueue(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.Create().SetData(player.value.PlayerId,player.value.PlayerName,gameState.MaxPlayersCount,gameState.Players.count).PopulateUnits(player.value.Units))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}gameState.Players.set(connectionKey,newPlayer);$t1=Bridge.getEnumerator(gameState.Players);try{while($t1.moveNext())player1=$t1.Current,server.Response.get(player1.key).Enqueue(PixelRPG.Base.TransferMessages.ServerClientConnectedTransferMessage.Create().SetData(newPlayer.PlayerId,message.PlayerName,gameState.MaxPlayersCount,gameState.Players.count).PopulateUnits(newPlayer.Units))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}if(gameState.Players.count===gameState.MaxPlayersCount){PixelRPG.Base.EntitySystems.ServerLogic.StartNewGame(gameState);$t2=Bridge.getEnumerator(gameState.Players);try{while($t2.moveNext())player2=$t2.Current,responses=server.Response.get(player2.key),responses.Enqueue(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage.Create().SetSize(System.Array.getLength(gameState.Map,0),System.Array.getLength(gameState.Map,1))),responses.Enqueue(PixelRPG.Base.EntitySystems.ServerLogic.BuildCurrentStateForPlayer(gameState,player2.value)),responses.Enqueue(PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage.Create())}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}}}});Bridge.define("PixelRPG.Base.EntitySystems.ServerRecieveClientTurnDoneHandler",{inherits:[PixelRPG.Base.AdditionalStuff.ClientServer.EntitySystems.ServerReceiveHandlerSystem.Handler$1(PixelRPG.Base.TransferMessages.ClientTurnDoneTransferMessage)],methods:{Handle$1:function(server,connectionKey,message){var $t,$t1,$t2,$t3,$t4,gameState=server.Entity.GetComponent(PixelRPG.Base.Components.GameStateComponent),player,playersList,i,player1,unitActions,j,unit,i1,player2,unitActions1,j1,unit1,newPosition,canMove,playerKVP,otherPlayer,k,otherUnit,distance,i2,player3,unitActions2,j2,unit2,playerKVP1,otherPlayer1,k1,otherUnit1,distanceToAttackPoint,allAtEnd,player4,i3,unit3,fullUnitId,player5,responses;gameState.CurrentTurn.set(gameState.Players.get(connectionKey).PlayerId,message.UnitActions);$t=Bridge.getEnumerator(gameState.Players);try{while($t.moveNext())player=$t.Current,server.Response.get(player.key).Enqueue(PixelRPG.Base.TransferMessages.ServerPlayerTurnMadeTransferMessage.Create().SetPlayerId(gameState.Players.get(connectionKey).PlayerId))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.Linq.Enumerable.from(gameState.CurrentTurn).count()===gameState.MaxPlayersCount){for(playersList=System.Linq.Enumerable.from(gameState.Players.getValues()).toList(PixelRPG.Base.Components.GameState.Player),FateRandom.Fate.GlobalFate.Shuffle(PixelRPG.Base.Components.GameState.Player,playersList),i=0;i<playersList.Count;i=i+1|0)for(player1=playersList.getItem(i),unitActions=gameState.CurrentTurn.get(player1.PlayerId),j=0;j<player1.Units.Count;j=j+1|0)unit=player1.Units.getItem(j),!unitActions.containsKey(unit.UnitId)&&unit.Hp>0&&unit.Hp<unit.MaxHp&&(unit.Hp=unit.Hp+1|0);for(i1=0;i1<playersList.Count;i1=i1+1|0)for(player2=playersList.getItem(i1),unitActions1=gameState.CurrentTurn.get(player2.PlayerId),j1=0;j1<player2.Units.Count;j1=j1+1|0)if(unit1=player2.Units.getItem(j1),unitActions1.containsKey(unit1.UnitId)&&!(unit1.Hp<=0)){if(newPosition=unitActions1.get(unit1.UnitId).NewPosition,canMove=!0,newPosition.X!==gameState.Exit.X||newPosition.Y!==gameState.Exit.Y){$t1=Bridge.getEnumerator(gameState.Players);try{while($t1.moveNext()){for(playerKVP=$t1.Current,otherPlayer=playerKVP.value,k=0;k<otherPlayer.Units.Count;k=k+1|0)if(otherUnit=otherPlayer.Units.getItem(k),otherUnit.Hp>0&&otherUnit.Position.X===newPosition.X&&otherUnit.Position.Y===newPosition.Y){canMove=!1;break}if(!canMove)break}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}canMove&&(distance=Math.abs(unit1.Position.X-newPosition.X|0)+Math.abs(unit1.Position.Y-newPosition.Y|0)|0,distance<=unit1.MoveRange&&(unit1.Position.X=newPosition.X,unit1.Position.Y=newPosition.Y))}for(i2=0;i2<playersList.Count;i2=i2+1|0)for(player3=playersList.getItem(i2),unitActions2=gameState.CurrentTurn.get(player3.PlayerId),j2=0;j2<player3.Units.Count;j2=j2+1|0)if((unit2=player3.Units.getItem(j2),unitActions2.containsKey(unit2.UnitId)&&!(unit2.Hp<=0))&&unitActions2.get(unit2.UnitId).AttackDirection!=null&&!Microsoft.Xna.Framework.Point.op_Equality(unit2.Position.$clone(),gameState.Exit.$clone())){var attackToX=unitActions2.get(unit2.UnitId).NewPosition.X+unitActions2.get(unit2.UnitId).AttackDirection.X|0,attackToY=unitActions2.get(unit2.UnitId).NewPosition.Y+unitActions2.get(unit2.UnitId).AttackDirection.Y|0,distance1=unitActions2.get(unit2.UnitId).AttackDirection.X+unitActions2.get(unit2.UnitId).AttackDirection.Y|0;if(!(distance1>unit2.AttackDistance)){$t2=Bridge.getEnumerator(gameState.Players);try{while($t2.moveNext())if(playerKVP1=$t2.Current,otherPlayer1=playerKVP1.value,unit2.AttackFriendlyFire||otherPlayer1.PlayerId!==player3.PlayerId)for(k1=0;k1<otherPlayer1.Units.Count;k1=k1+1|0)(otherUnit1=otherPlayer1.Units.getItem(k1),otherUnit1.Hp<=0)||(distanceToAttackPoint=Math.abs(attackToX-otherUnit1.Position.X|0)+Math.abs(attackToY-otherUnit1.Position.Y|0)|0,distanceToAttackPoint>unit2.AttackRadius)||(otherUnit1.Hp=otherUnit1.Hp-unit2.AttackDamage|0)}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}}gameState.CurrentTurn.clear();allAtEnd=!0;$t3=Bridge.getEnumerator(gameState.Players);try{while($t3.moveNext())for(player4=$t3.Current,i3=0;i3<player4.value.Units.Count;i3=i3+1|0)unit3=player4.value.Units.getItem(i3),fullUnitId=PixelRPG.Base.EntitySystems.ServerLogic.GetFullUnitId(player4.value,unit3),Microsoft.Xna.Framework.Point.op_Inequality(unit3.Position.$clone(),gameState.Exit.$clone())?unit3.Hp>0&&(allAtEnd=!1):gameState.AtEnd.contains(fullUnitId)||(gameState.AtEnd.add(fullUnitId),player4.value.LevelScore=player4.value.LevelScore+(Bridge.Int.mul(gameState.MaxUnitsCount,gameState.MaxPlayersCount)-System.Linq.Enumerable.from(gameState.AtEnd).count()|0)|0,player4.value.TotalScore=player4.value.TotalScore+(Bridge.Int.mul(gameState.MaxUnitsCount,gameState.MaxPlayersCount)-System.Linq.Enumerable.from(gameState.AtEnd).count()|0)|0)}finally{Bridge.is($t3,System.IDisposable)&&$t3.System$IDisposable$Dispose()}allAtEnd&&PixelRPG.Base.EntitySystems.ServerLogic.StartNewGame(gameState);$t4=Bridge.getEnumerator(gameState.Players);try{while($t4.moveNext())player5=$t4.Current,responses=server.Response.get(player5.key),allAtEnd&&responses.Enqueue(PixelRPG.Base.TransferMessages.ServerGameStartedTransferMessage.Create().SetSize(System.Array.getLength(gameState.Map,0),System.Array.getLength(gameState.Map,1))),responses.Enqueue(PixelRPG.Base.EntitySystems.ServerLogic.BuildCurrentStateForPlayer(gameState,player5.value)),responses.Enqueue(PixelRPG.Base.TransferMessages.ServerYourTurnTransferMessage.Create())}finally{Bridge.is($t4,System.IDisposable)&&$t4.System$IDisposable$Dispose()}}}}})});